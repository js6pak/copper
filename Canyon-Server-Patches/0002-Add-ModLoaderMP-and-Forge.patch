From a9b5a487090c635c9ec6365ffa74c83cec1d23e5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jakub=20Staro=C5=84?= <kubastaron@hotmail.com>
Date: Sun, 15 Mar 2020 20:18:02 +0100
Subject: [PATCH] Add ModLoaderMP and Forge


diff --git a/src/main/java/forge/ArmorProperties.java b/src/main/java/forge/ArmorProperties.java
new file mode 100644
index 00000000..6caed080
--- /dev/null
+++ b/src/main/java/forge/ArmorProperties.java
@@ -0,0 +1,14 @@
+package forge;
+
+public class ArmorProperties {
+    public int damageRemove = 0;
+    public boolean allowRegularComputation = false;
+
+    public ArmorProperties() {
+    }
+
+    public ArmorProperties(int damageRemove, boolean allowRegularCompuation) {
+        this.damageRemove = damageRemove;
+        this.allowRegularComputation = allowRegularCompuation;
+    }
+}
diff --git a/src/main/java/forge/Configuration.java b/src/main/java/forge/Configuration.java
new file mode 100644
index 00000000..8211eb8e
--- /dev/null
+++ b/src/main/java/forge/Configuration.java
@@ -0,0 +1,254 @@
+package forge;
+
+import java.io.BufferedReader;
+import java.io.BufferedWriter;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.text.DateFormat;
+import java.util.Collection;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.TreeMap;
+import net.minecraft.server.*;
+
+public class Configuration {
+    private boolean[] configBlocks = null;
+    public static final int GENERAL_PROPERTY = 0;
+    public static final int BLOCK_PROPERTY = 1;
+    public static final int ITEM_PROPERTY = 2;
+    File file;
+    public TreeMap<String, forge.Property> blockProperties = new TreeMap();
+    public TreeMap<String, forge.Property> itemProperties = new TreeMap();
+    public TreeMap<String, forge.Property> generalProperties = new TreeMap();
+
+    public Configuration(File file) {
+        this.file = file;
+    }
+
+    public Property getOrCreateBlockIdProperty(String key, int defaultId) {
+        if (this.configBlocks == null) {
+            this.configBlocks = new boolean[Block.byId.length];
+
+            for(int i = 0; i < this.configBlocks.length; ++i) {
+                this.configBlocks[i] = false;
+            }
+        }
+
+        Property property;
+        if (this.blockProperties.containsKey(key)) {
+            property = this.getOrCreateIntProperty(key, 1, defaultId);
+            this.configBlocks[Integer.parseInt(property.value)] = true;
+            return property;
+        } else {
+            property = new Property();
+            this.blockProperties.put(key, property);
+            property.name = key;
+            if (Block.byId[defaultId] == null && !this.configBlocks[defaultId]) {
+                property.value = Integer.toString(defaultId);
+                this.configBlocks[defaultId] = true;
+                return property;
+            } else {
+                for(int j = Block.byId.length - 1; j >= 0; --j) {
+                    if (Block.byId[j] == null && !this.configBlocks[j]) {
+                        property.value = Integer.toString(j);
+                        this.configBlocks[j] = true;
+                        return property;
+                    }
+                }
+
+                throw new RuntimeException("No more block ids available for " + key);
+            }
+        }
+    }
+
+    public Property getOrCreateIntProperty(String key, int kind, int defaultValue) {
+        Property prop = this.getOrCreateProperty(key, kind, Integer.toString(defaultValue));
+
+        try {
+            Integer.parseInt(prop.value);
+            return prop;
+        } catch (NumberFormatException var6) {
+            prop.value = Integer.toString(defaultValue);
+            return prop;
+        }
+    }
+
+    public Property getOrCreateBooleanProperty(String key, int kind, boolean defaultValue) {
+        Property prop = this.getOrCreateProperty(key, kind, Boolean.toString(defaultValue));
+        if (!"true".equals(prop.value.toLowerCase()) && !"false".equals(prop.value.toLowerCase())) {
+            prop.value = Boolean.toString(defaultValue);
+            return prop;
+        } else {
+            return prop;
+        }
+    }
+
+    public Property getOrCreateProperty(String key, int kind, String defaultValue) {
+        TreeMap<String, forge.Property> source = null;
+        switch(kind) {
+        case 0:
+            source = this.generalProperties;
+            break;
+        case 1:
+            source = this.blockProperties;
+            break;
+        case 2:
+            source = this.itemProperties;
+        }
+
+        if (source.containsKey(key)) {
+            return (Property)source.get(key);
+        } else if (defaultValue != null) {
+            Property property = new Property();
+            source.put(key, property);
+            property.name = key;
+            property.value = defaultValue;
+            return property;
+        } else {
+            return null;
+        }
+    }
+
+    public void load() {
+        try {
+            if (this.file.getParentFile() != null) {
+                this.file.getParentFile().mkdirs();
+            }
+
+            if (!this.file.exists() && !this.file.createNewFile()) {
+                return;
+            }
+
+            if (this.file.canRead()) {
+                FileInputStream fileinputstream = new FileInputStream(this.file);
+                BufferedReader buffer = new BufferedReader(new InputStreamReader(fileinputstream, "8859_1"));
+                TreeMap currentMap = null;
+
+                while(true) {
+                    String line = buffer.readLine();
+                    if (line == null) {
+                        break;
+                    }
+
+                    int nameStart = -1;
+                    int nameEnd = -1;
+                    boolean skip = false;
+
+                    for(int i = 0; i < line.length() && !skip; ++i) {
+                        if (!Character.isLetterOrDigit(line.charAt(i)) && line.charAt(i) != '.') {
+                            if (!Character.isWhitespace(line.charAt(i))) {
+                                switch(line.charAt(i)) {
+                                case '#':
+                                    skip = true;
+                                    break;
+                                case '=':
+                                    String propertyName = line.substring(nameStart, nameEnd + 1);
+                                    if (currentMap == null) {
+                                        throw new RuntimeException("property " + propertyName + " has no scope");
+                                    }
+
+                                    Property prop = new Property();
+                                    prop.name = propertyName;
+                                    prop.value = line.substring(i + 1);
+                                    i = line.length();
+                                    currentMap.put(propertyName, prop);
+                                    break;
+                                case '{':
+                                    String scopeName = line.substring(nameStart, nameEnd + 1);
+                                    if (scopeName.equals("general")) {
+                                        currentMap = this.generalProperties;
+                                    } else if (scopeName.equals("block")) {
+                                        currentMap = this.blockProperties;
+                                    } else {
+                                        if (!scopeName.equals("item")) {
+                                            throw new RuntimeException("unknown section " + scopeName);
+                                        }
+
+                                        currentMap = this.itemProperties;
+                                    }
+                                    break;
+                                case '}':
+                                    currentMap = null;
+                                    break;
+                                default:
+                                    throw new RuntimeException("unknown character " + line.charAt(i));
+                                }
+                            }
+                        } else {
+                            if (nameStart == -1) {
+                                nameStart = i;
+                            }
+
+                            nameEnd = i;
+                        }
+                    }
+                }
+            }
+        } catch (IOException var12) {
+            var12.printStackTrace();
+        }
+
+    }
+
+    public void save() {
+        try {
+            if (this.file.getParentFile() != null) {
+                this.file.getParentFile().mkdirs();
+            }
+
+            if (!this.file.exists() && !this.file.createNewFile()) {
+                return;
+            }
+
+            if (this.file.canWrite()) {
+                FileOutputStream fileoutputstream = new FileOutputStream(this.file);
+                BufferedWriter buffer = new BufferedWriter(new OutputStreamWriter(fileoutputstream, "8859_1"));
+                buffer.write("# Configuration file\r\n");
+                buffer.write("# Generated on " + DateFormat.getInstance().format(new Date()) + "\r\n");
+                buffer.write("\r\n");
+                buffer.write("###########\r\n");
+                buffer.write("# General #\r\n");
+                buffer.write("###########\r\n\r\n");
+                buffer.write("general {\r\n");
+                this.writeProperties(buffer, this.generalProperties.values());
+                buffer.write("}\r\n\r\n");
+                buffer.write("#########\r\n");
+                buffer.write("# Block #\r\n");
+                buffer.write("#########\r\n\r\n");
+                buffer.write("block {\r\n");
+                this.writeProperties(buffer, this.blockProperties.values());
+                buffer.write("}\r\n\r\n");
+                buffer.write("########\r\n");
+                buffer.write("# Item #\r\n");
+                buffer.write("########\r\n\r\n");
+                buffer.write("item {\r\n");
+                this.writeProperties(buffer, this.itemProperties.values());
+                buffer.write("}\r\n\r\n");
+                buffer.close();
+                fileoutputstream.close();
+            }
+        } catch (IOException var3) {
+            var3.printStackTrace();
+        }
+
+    }
+
+    private void writeProperties(BufferedWriter buffer, Collection<forge.Property> props) throws IOException {
+        Iterator i$ = props.iterator();
+
+        while(i$.hasNext()) {
+            Property property = (Property)i$.next();
+            if (property.comment != null) {
+                buffer.write("   # " + property.comment + "\r\n");
+            }
+
+            buffer.write("   " + property.name + "=" + property.value);
+            buffer.write("\r\n");
+        }
+
+    }
+}
diff --git a/src/main/java/forge/ForgeHooks.java b/src/main/java/forge/ForgeHooks.java
new file mode 100644
index 00000000..7ecaffa5
--- /dev/null
+++ b/src/main/java/forge/ForgeHooks.java
@@ -0,0 +1,155 @@
+package forge;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import net.minecraft.server.*;
+
+public class ForgeHooks {
+    static LinkedList<forge.ICraftingHandler> craftingHandlers = new LinkedList();
+    static LinkedList<forge.IDestroyToolHandler> destroyToolHandlers = new LinkedList();
+    static LinkedList<forge.ISleepHandler> sleepHandlers = new LinkedList();
+    public static final int majorVersion = 1;
+    public static final int minorVersion = 0;
+    public static final int revisionVersion = 6;
+    static boolean toolInit;
+    static HashMap toolClasses;
+    static HashMap toolHarvestLevels;
+    static HashSet toolEffectiveness;
+
+    public static void onTakenFromCrafting(EntityHuman player, ItemStack ist, IInventory craftMatrix) {
+        Iterator i$ = craftingHandlers.iterator();
+
+        while(i$.hasNext()) {
+            ICraftingHandler handler = (ICraftingHandler)i$.next();
+            handler.onTakenFromCrafting(player, ist, craftMatrix);
+        }
+
+    }
+
+    public static void onDestroyCurrentItem(EntityHuman player, ItemStack orig) {
+        Iterator i$ = destroyToolHandlers.iterator();
+
+        while(i$.hasNext()) {
+            IDestroyToolHandler handler = (IDestroyToolHandler)i$.next();
+            handler.onDestroyCurrentItem(player, orig);
+        }
+
+    }
+
+    public static EnumBedError sleepInBedAt(EntityHuman player, int i, int j, int k) {
+        Iterator i$ = sleepHandlers.iterator();
+
+        EnumBedError status;
+        do {
+            if (!i$.hasNext()) {
+                return null;
+            }
+
+            ISleepHandler handler = (ISleepHandler)i$.next();
+            status = handler.sleepInBedAt(player, i, j, k);
+        } while(status == null);
+
+        return status;
+    }
+
+    public static boolean canHarvestBlock(Block bl, EntityHuman player, int md) {
+        if (bl.material.i()) {
+            return true;
+        } else {
+            ItemStack itemstack = player.inventory.getItemInHand();
+            if (itemstack == null) {
+                return false;
+            } else {
+                List tc = (List)toolClasses.get(itemstack.id);
+                if (tc == null) {
+                    return itemstack.b(bl);
+                } else {
+                    Object[] ta = tc.toArray();
+                    String cls = (String)ta[0];
+                    int hvl = (Integer)ta[1];
+                    Integer bhl = (Integer)toolHarvestLevels.get(Arrays.asList(bl.id, md, cls));
+                    if (bhl == null) {
+                        return itemstack.b(bl);
+                    } else {
+                        return bhl > hvl ? false : itemstack.b(bl);
+                    }
+                }
+            }
+        }
+    }
+
+    public static float blockStrength(Block bl, EntityHuman player, int md) {
+        float bh = bl.getHardness(md);
+        if (bh < 0.0F) {
+            return 0.0F;
+        } else {
+            return !canHarvestBlock(bl, player, md) ? 1.0F / bh / 100.0F : player.getCurrentPlayerStrVsBlock(bl, md) / bh / 30.0F;
+        }
+    }
+
+    public static boolean isToolEffective(ItemStack ist, Block bl, int md) {
+        List tc = (List)toolClasses.get(ist.id);
+        if (tc == null) {
+            return false;
+        } else {
+            Object[] ta = tc.toArray();
+            String cls = (String)ta[0];
+            return toolEffectiveness.contains(Arrays.asList(bl.id, md, cls));
+        }
+    }
+
+    static void initTools() {
+        if (!toolInit) {
+            toolInit = true;
+            MinecraftForge.setToolClass(Item.WOOD_PICKAXE, "pickaxe", 0);
+            MinecraftForge.setToolClass(Item.STONE_PICKAXE, "pickaxe", 1);
+            MinecraftForge.setToolClass(Item.IRON_PICKAXE, "pickaxe", 2);
+            MinecraftForge.setToolClass(Item.GOLD_PICKAXE, "pickaxe", 0);
+            MinecraftForge.setToolClass(Item.DIAMOND_PICKAXE, "pickaxe", 3);
+            MinecraftForge.setToolClass(Item.WOOD_AXE, "axe", 0);
+            MinecraftForge.setToolClass(Item.STONE_AXE, "axe", 1);
+            MinecraftForge.setToolClass(Item.IRON_AXE, "axe", 2);
+            MinecraftForge.setToolClass(Item.GOLD_AXE, "axe", 0);
+            MinecraftForge.setToolClass(Item.DIAMOND_AXE, "axe", 3);
+            MinecraftForge.setToolClass(Item.WOOD_SPADE, "shovel", 0);
+            MinecraftForge.setToolClass(Item.STONE_SPADE, "shovel", 1);
+            MinecraftForge.setToolClass(Item.IRON_SPADE, "shovel", 2);
+            MinecraftForge.setToolClass(Item.GOLD_SPADE, "shovel", 0);
+            MinecraftForge.setToolClass(Item.DIAMOND_SPADE, "shovel", 3);
+            MinecraftForge.setBlockHarvestLevel(Block.OBSIDIAN, "pickaxe", 3);
+            MinecraftForge.setBlockHarvestLevel(Block.DIAMOND_ORE, "pickaxe", 2);
+            MinecraftForge.setBlockHarvestLevel(Block.DIAMOND_BLOCK, "pickaxe", 2);
+            MinecraftForge.setBlockHarvestLevel(Block.GOLD_ORE, "pickaxe", 2);
+            MinecraftForge.setBlockHarvestLevel(Block.GOLD_BLOCK, "pickaxe", 2);
+            MinecraftForge.setBlockHarvestLevel(Block.IRON_ORE, "pickaxe", 1);
+            MinecraftForge.setBlockHarvestLevel(Block.IRON_BLOCK, "pickaxe", 1);
+            MinecraftForge.setBlockHarvestLevel(Block.LAPIS_ORE, "pickaxe", 1);
+            MinecraftForge.setBlockHarvestLevel(Block.LAPIS_BLOCK, "pickaxe", 1);
+            MinecraftForge.setBlockHarvestLevel(Block.REDSTONE_ORE, "pickaxe", 2);
+            MinecraftForge.setBlockHarvestLevel(Block.GLOWING_REDSTONE_ORE, "pickaxe", 2);
+            MinecraftForge.removeBlockEffectiveness(Block.REDSTONE_ORE, "pickaxe");
+            MinecraftForge.removeBlockEffectiveness(Block.GLOWING_REDSTONE_ORE, "pickaxe");
+            Block[] pickeff = new Block[]{Block.COBBLESTONE, Block.DOUBLE_STEP, Block.STEP, Block.STONE, Block.SANDSTONE, Block.MOSSY_COBBLESTONE, Block.IRON_ORE, Block.IRON_BLOCK, Block.COAL_ORE, Block.GOLD_BLOCK, Block.GOLD_ORE, Block.DIAMOND_ORE, Block.DIAMOND_BLOCK, Block.ICE, Block.NETHERRACK, Block.LAPIS_ORE, Block.LAPIS_BLOCK};
+            Block[] arr$ = pickeff;
+            int len$ = pickeff.length;
+
+            for(int i$ = 0; i$ < len$; ++i$) {
+                Block bl = arr$[i$];
+                MinecraftForge.setBlockHarvestLevel(bl, "pickaxe", 0);
+            }
+
+        }
+    }
+
+    static {
+        System.out.println("MinecraftForge v1.0.6 Initialized");
+        toolInit = false;
+        toolClasses = new HashMap();
+        toolHarvestLevels = new HashMap();
+        toolEffectiveness = new HashSet();
+    }
+}
diff --git a/src/main/java/forge/IBlockSecondaryProperties.java b/src/main/java/forge/IBlockSecondaryProperties.java
new file mode 100644
index 00000000..c0c83617
--- /dev/null
+++ b/src/main/java/forge/IBlockSecondaryProperties.java
@@ -0,0 +1,13 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface IBlockSecondaryProperties {
+    boolean isBlockNormalCube(World var1, int var2, int var3, int var4);
+
+    boolean isBlockReplaceable(World var1, int var2, int var3, int var4);
+
+    boolean isBlockBurning(World var1, int var2, int var3, int var4);
+
+    boolean isAirBlock(World var1, int var2, int var3, int var4);
+}
diff --git a/src/main/java/forge/IBucketHandler.java b/src/main/java/forge/IBucketHandler.java
new file mode 100644
index 00000000..d35c4acb
--- /dev/null
+++ b/src/main/java/forge/IBucketHandler.java
@@ -0,0 +1,7 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface IBucketHandler {
+    ItemStack fillCustomBucket(World var1, int var2, int var3, int var4);
+}
diff --git a/src/main/java/forge/IConnectRedstone.java b/src/main/java/forge/IConnectRedstone.java
new file mode 100644
index 00000000..b3115818
--- /dev/null
+++ b/src/main/java/forge/IConnectRedstone.java
@@ -0,0 +1,7 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface IConnectRedstone {
+    boolean canConnectRedstone(IBlockAccess var1, int var2, int var3, int var4, int var5);
+}
diff --git a/src/main/java/forge/ICraftingHandler.java b/src/main/java/forge/ICraftingHandler.java
new file mode 100644
index 00000000..29562213
--- /dev/null
+++ b/src/main/java/forge/ICraftingHandler.java
@@ -0,0 +1,7 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface ICraftingHandler {
+    void onTakenFromCrafting(EntityHuman var1, ItemStack var2, IInventory var3);
+}
diff --git a/src/main/java/forge/IDestroyToolHandler.java b/src/main/java/forge/IDestroyToolHandler.java
new file mode 100644
index 00000000..c420c023
--- /dev/null
+++ b/src/main/java/forge/IDestroyToolHandler.java
@@ -0,0 +1,7 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface IDestroyToolHandler {
+    void onDestroyCurrentItem(EntityHuman var1, ItemStack var2);
+}
diff --git a/src/main/java/forge/IMultipassRender.java b/src/main/java/forge/IMultipassRender.java
new file mode 100644
index 00000000..fc260e9b
--- /dev/null
+++ b/src/main/java/forge/IMultipassRender.java
@@ -0,0 +1,5 @@
+package forge;
+
+public interface IMultipassRender {
+    boolean canRenderInPass(int var1);
+}
diff --git a/src/main/java/forge/IOverrideReplace.java b/src/main/java/forge/IOverrideReplace.java
new file mode 100644
index 00000000..2364fc19
--- /dev/null
+++ b/src/main/java/forge/IOverrideReplace.java
@@ -0,0 +1,9 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface IOverrideReplace {
+    boolean canReplaceBlock(World var1, int var2, int var3, int var4, int var5);
+
+    boolean getReplacedSuccess();
+}
diff --git a/src/main/java/forge/ISleepHandler.java b/src/main/java/forge/ISleepHandler.java
new file mode 100644
index 00000000..9d42995e
--- /dev/null
+++ b/src/main/java/forge/ISleepHandler.java
@@ -0,0 +1,7 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface ISleepHandler {
+    EnumBedError sleepInBedAt(EntityHuman var1, int var2, int var3, int var4);
+}
diff --git a/src/main/java/forge/ISpecialArmor.java b/src/main/java/forge/ISpecialArmor.java
new file mode 100644
index 00000000..b52511d4
--- /dev/null
+++ b/src/main/java/forge/ISpecialArmor.java
@@ -0,0 +1,7 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface ISpecialArmor {
+    ArmorProperties getProperties(EntityHuman var1, int var2, int var3);
+}
diff --git a/src/main/java/forge/ISpecialResistance.java b/src/main/java/forge/ISpecialResistance.java
new file mode 100644
index 00000000..2e852fc2
--- /dev/null
+++ b/src/main/java/forge/ISpecialResistance.java
@@ -0,0 +1,7 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface ISpecialResistance {
+    float getSpecialExplosionResistance(World var1, int var2, int var3, int var4, double var5, double var7, double var9, Entity var11);
+}
diff --git a/src/main/java/forge/ITextureProvider.java b/src/main/java/forge/ITextureProvider.java
new file mode 100644
index 00000000..144ee197
--- /dev/null
+++ b/src/main/java/forge/ITextureProvider.java
@@ -0,0 +1,5 @@
+package forge;
+
+public interface ITextureProvider {
+    String getTextureFile();
+}
diff --git a/src/main/java/forge/IUseItemFirst.java b/src/main/java/forge/IUseItemFirst.java
new file mode 100644
index 00000000..460f8536
--- /dev/null
+++ b/src/main/java/forge/IUseItemFirst.java
@@ -0,0 +1,7 @@
+package forge;
+
+import net.minecraft.server.*;
+
+public interface IUseItemFirst {
+    boolean onItemUseFirst(ItemStack var1, EntityHuman var2, World var3, int var4, int var5, int var6, int var7);
+}
diff --git a/src/main/java/forge/MinecraftForge.java b/src/main/java/forge/MinecraftForge.java
new file mode 100644
index 00000000..9b4d93cf
--- /dev/null
+++ b/src/main/java/forge/MinecraftForge.java
@@ -0,0 +1,125 @@
+package forge;
+
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import net.minecraft.server.*;
+
+public class MinecraftForge {
+    private static LinkedList<forge.IBucketHandler> bucketHandlers = new LinkedList();
+
+    /** @deprecated */
+    public static void registerCustomBucketHander(IBucketHandler handler) {
+        bucketHandlers.add(handler);
+    }
+
+    public static void registerCustomBucketHandler(IBucketHandler handler) {
+        bucketHandlers.add(handler);
+    }
+
+    public static void registerSleepHandler(ISleepHandler handler) {
+        ForgeHooks.sleepHandlers.add(handler);
+    }
+
+    public static void registerDestroyToolHandler(IDestroyToolHandler handler) {
+        ForgeHooks.destroyToolHandlers.add(handler);
+    }
+
+    public static void registerCraftingHandler(ICraftingHandler handler) {
+        ForgeHooks.craftingHandlers.add(handler);
+    }
+
+    public static ItemStack fillCustomBucket(World w, int i, int j, int k) {
+        Iterator i$ = bucketHandlers.iterator();
+
+        ItemStack stack;
+        do {
+            if (!i$.hasNext()) {
+                return null;
+            }
+
+            IBucketHandler handler = (IBucketHandler)i$.next();
+            stack = handler.fillCustomBucket(w, i, j, k);
+        } while(stack == null);
+
+        return stack;
+    }
+
+    public static void setToolClass(Item tool, String tclass, int hlevel) {
+        ForgeHooks.initTools();
+        ForgeHooks.toolClasses.put(tool.id, Arrays.asList(tclass, hlevel));
+    }
+
+    public static void setBlockHarvestLevel(Block bl, int md, String tclass, int hlevel) {
+        ForgeHooks.initTools();
+        List key = Arrays.asList(bl.id, md, tclass);
+        ForgeHooks.toolHarvestLevels.put(key, hlevel);
+        ForgeHooks.toolEffectiveness.add(key);
+    }
+
+    public static void removeBlockEffectiveness(Block bl, int md, String tclass) {
+        ForgeHooks.initTools();
+        List key = Arrays.asList(bl.id, md, tclass);
+        ForgeHooks.toolEffectiveness.remove(key);
+    }
+
+    public static void setBlockHarvestLevel(Block bl, String tclass, int hlevel) {
+        ForgeHooks.initTools();
+
+        for(int md = 0; md < 16; ++md) {
+            List key = Arrays.asList(bl.id, md, tclass);
+            ForgeHooks.toolHarvestLevels.put(key, hlevel);
+            ForgeHooks.toolEffectiveness.add(key);
+        }
+
+    }
+
+    public static void removeBlockEffectiveness(Block bl, String tclass) {
+        ForgeHooks.initTools();
+
+        for(int md = 0; md < 16; ++md) {
+            List key = Arrays.asList(bl.id, md, tclass);
+            ForgeHooks.toolEffectiveness.remove(key);
+        }
+
+    }
+
+    public static void addPickaxeBlockEffectiveAgainst(Block block) {
+        setBlockHarvestLevel(block, "pickaxe", 0);
+    }
+
+    public static void killMinecraft(String modname, String msg) {
+        throw new RuntimeException(modname + ": " + msg);
+    }
+
+    public static void versionDetect(String modname, int major, int minor, int revision) {
+        if (major != 1) {
+            killMinecraft(modname, "MinecraftForge Major Version Mismatch, expecting " + major + ".x.x");
+        } else if (minor != 0) {
+            if (minor > 0) {
+                killMinecraft(modname, "MinecraftForge Too Old, need at least " + major + "." + minor + "." + revision);
+            } else {
+                System.out.println(modname + ": MinecraftForge minor version mismatch, expecting " + major + "." + minor + ".x, may lead to unexpected behavior");
+            }
+        } else if (revision > 6) {
+            killMinecraft(modname, "MinecraftForge Too Old, need at least " + major + "." + minor + "." + revision);
+        }
+
+    }
+
+    public static void versionDetectStrict(String modname, int major, int minor, int revision) {
+        if (major != 1) {
+            killMinecraft(modname, "MinecraftForge Major Version Mismatch, expecting " + major + ".x.x");
+        } else if (minor != 0) {
+            if (minor > 0) {
+                killMinecraft(modname, "MinecraftForge Too Old, need at least " + major + "." + minor + "." + revision);
+            } else {
+                killMinecraft(modname, "MinecraftForge minor version mismatch, expecting " + major + "." + minor + ".x");
+            }
+        } else if (revision > 6) {
+            killMinecraft(modname, "MinecraftForge Too Old, need at least " + major + "." + minor + "." + revision);
+        }
+
+    }
+}
diff --git a/src/main/java/forge/Property.java b/src/main/java/forge/Property.java
new file mode 100644
index 00000000..d1b8c7ef
--- /dev/null
+++ b/src/main/java/forge/Property.java
@@ -0,0 +1,7 @@
+package forge;
+
+public class Property {
+    public String name;
+    public String value;
+    public String comment;
+}
diff --git a/src/main/java/modloader/BaseMod.java b/src/main/java/modloader/BaseMod.java
new file mode 100644
index 00000000..6e8a5a0b
--- /dev/null
+++ b/src/main/java/modloader/BaseMod.java
@@ -0,0 +1,41 @@
+package modloader;
+
+import java.util.Random;
+import net.minecraft.server.*;
+
+public abstract class BaseMod {
+    public int AddFuel(int i) {
+        return 0;
+    }
+
+    public boolean DispenseEntity(World world, double d, double d1, double d2, int i, int j, ItemStack itemstack) {
+        return false;
+    }
+
+    public void GenerateNether(World world, Random random, int i, int j) {
+    }
+
+    public void GenerateSurface(World world, Random random, int i, int j) {
+    }
+
+    public void OnTickInGame(MinecraftServer minecraftserver) {
+    }
+
+    public void ModsLoaded() {
+    }
+
+    public void TakenFromCrafting(EntityHuman entityplayer, ItemStack itemstack) {
+    }
+
+    public void TakenFromFurnace(EntityHuman entityplayer, ItemStack itemstack) {
+    }
+
+    public void OnItemPickup(EntityHuman entityplayer, ItemStack itemstack) {
+    }
+
+    public String toString() {
+        return this.getClass().getName() + " " + this.Version();
+    }
+
+    public abstract String Version();
+}
diff --git a/src/main/java/modloader/BaseModMp.java b/src/main/java/modloader/BaseModMp.java
new file mode 100644
index 00000000..72e78718
--- /dev/null
+++ b/src/main/java/modloader/BaseModMp.java
@@ -0,0 +1,33 @@
+package modloader;
+
+import net.minecraft.server.*;
+
+public abstract class BaseModMp extends BaseMod {
+    public final int getId() {
+        return this.toString().hashCode();
+    }
+
+    public void ModsLoaded() {
+        ModLoaderMp.InitModLoaderMp();
+    }
+
+    public void HandlePacket(Packet230ModLoader packet230modloader, EntityPlayer entityplayermp) {
+    }
+
+    public void HandleLogin(EntityPlayer entityplayermp) {
+    }
+
+    public void HandleSendKey(EntityPlayer entityplayermp, int i) {
+    }
+
+    public void GetCommandInfo(ICommandListener icommandlistener) {
+    }
+
+    public boolean HandleCommand(String s, String s1, ICommandListener icommandlistener, ConsoleCommandHandler consolecommandhandler) {
+        return false;
+    }
+
+    public boolean hasClientSide() {
+        return true;
+    }
+}
diff --git a/src/main/java/modloader/EntityTrackerEntry2.java b/src/main/java/modloader/EntityTrackerEntry2.java
new file mode 100644
index 00000000..ce082145
--- /dev/null
+++ b/src/main/java/modloader/EntityTrackerEntry2.java
@@ -0,0 +1,11 @@
+package modloader;
+
+public class EntityTrackerEntry2 {
+    public int entityId = -1;
+    public boolean entityHasOwner = false;
+
+    public EntityTrackerEntry2(int i, boolean flag) {
+        this.entityId = i;
+        this.entityHasOwner = flag;
+    }
+}
diff --git a/src/main/java/modloader/ISpawnable.java b/src/main/java/modloader/ISpawnable.java
new file mode 100644
index 00000000..2b116e8f
--- /dev/null
+++ b/src/main/java/modloader/ISpawnable.java
@@ -0,0 +1,5 @@
+package modloader;
+
+public interface ISpawnable {
+    Packet230ModLoader getSpawnPacket();
+}
diff --git a/src/main/java/modloader/MLProp.java b/src/main/java/modloader/MLProp.java
new file mode 100644
index 00000000..a160c743
--- /dev/null
+++ b/src/main/java/modloader/MLProp.java
@@ -0,0 +1,18 @@
+package modloader;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.FIELD})
+public @interface MLProp {
+    String name() default "";
+
+    String info() default "";
+
+    double min() default Double.NEGATIVE_INFINITY;
+
+    double max() default Double.POSITIVE_INFINITY;
+}
diff --git a/src/main/java/modloader/ModLoader.java b/src/main/java/modloader/ModLoader.java
new file mode 100644
index 00000000..92badab9
--- /dev/null
+++ b/src/main/java/modloader/ModLoader.java
@@ -0,0 +1,1037 @@
+package modloader;
+
+import forge.MinecraftForge;
+import net.fabricmc.tinyremapper.ClassInstance;
+import net.fabricmc.tinyremapper.OutputConsumerPath;
+import net.fabricmc.tinyremapper.TinyRemapper;
+import net.fabricmc.tinyremapper.TinyUtils;
+import net.minecraft.server.*;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Opcodes;
+import org.objectweb.asm.commons.ClassRemapper;
+import org.objectweb.asm.commons.Remapper;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.*;
+import java.util.Map.Entry;
+import java.util.logging.FileHandler;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.logging.SimpleFormatter;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipInputStream;
+
+public final class ModLoader {
+    private static File configDirectory;
+    private static File configFile;
+    public static Level configLoggingLevel;
+    private static long clock = 0L;
+    public static final boolean DEBUG = true;
+    private static Field field_modifiers = null;
+    private static Map<String, Class<? extends Entity>> classMap = null;
+    private static boolean hasInit = false;
+    private static int highestEntityId = 3000;
+    private static final Map<BaseMod, Boolean> inGameHooks = new HashMap<>();
+    private static MinecraftServer instance = null;
+    private static int itemSpriteIndex = 0;
+    private static int itemSpritesLeft = 0;
+    private static File logFile;
+    private static File modsDirectory;
+    private static File mappedModsDir;
+    private static final Logger logger = Logger.getLogger("ModLoader");
+    private static FileHandler logHandler = null;
+    private static Method method_RegisterEntityID = null;
+    private static Method method_RegisterTileEntity = null;
+    private static final LinkedList<BaseMod> modsList = new LinkedList<>();
+    private static int nextBlockModelID = 1000;
+    private static final Map<Integer, Object> overrides = new HashMap<>();
+    public static final Properties props = new Properties();
+    private static BiomeBase[] standardBiomes;
+    private static int terrainSpriteIndex = 0;
+    private static int terrainSpritesLeft = 0;
+    private static final boolean[] usedItemSprites = new boolean[256];
+    private static final boolean[] usedTerrainSprites = new boolean[256];
+    public static final String VERSION = ModLoaderMp.NAME + " " + ModLoaderMp.VERSION;
+    private static Method method_getNextWindowId;
+    private static Field field_currentWindowId;
+
+    public static void AddAchievementDesc(Achievement achievement, String s, String s1) {
+        try {
+            if (achievement.f.contains(".")) {
+                String s2 = achievement.f.split("\\.")[1];
+                setPrivateValue(Statistic.class, achievement, 1, StatisticCollector.a("achievement." + s2));
+                setPrivateValue(Achievement.class, achievement, 3, StatisticCollector.a("achievement." + s2 + ".desc"));
+            } else {
+                setPrivateValue(Statistic.class, achievement, 1, s);
+                setPrivateValue(Achievement.class, achievement, 3, s1);
+            }
+        } catch (IllegalArgumentException | SecurityException | NoSuchFieldException var4) {
+            logger.throwing("ModLoader", "AddAchievementDesc", var4);
+            ThrowException(var4);
+        }
+
+    }
+
+    public static int AddAllFuel(int i) {
+        logger.finest("Finding fuel for " + i);
+        int j = 0;
+
+        for (Iterator iterator = modsList.iterator(); iterator.hasNext() && j == 0; j = ((BaseMod) iterator.next()).AddFuel(i)) {
+        }
+
+        if (j != 0) {
+            logger.finest("Returned " + j);
+        }
+
+        return j;
+    }
+
+    public static int AddArmor(String s) {
+        return -1;
+    }
+
+    private static void addMod(ClassLoader classloader, String className, String modId) {
+        try {
+            if (modsList.stream().anyMatch(mod -> mod.getClass().getSimpleName().equals(modId.replace(".class", "")))) {
+                System.out.println("Mod " + modId + " was already loaded!");
+                return;
+            }
+
+            String s1 = className.split("\\.")[0];
+            if (s1.contains("$")) {
+                return;
+            }
+
+            if (props.containsKey(s1) && (props.getProperty(s1).equalsIgnoreCase("no") || props.getProperty(s1).equalsIgnoreCase("off"))) {
+                return;
+            }
+
+            Class<?> class1 = classloader.loadClass(s1.replace("/", "."));
+            if (!BaseMod.class.isAssignableFrom(class1)) {
+                return;
+            }
+
+            setupProperties(class1);
+            BaseMod basemod = (BaseMod) class1.newInstance();
+            if (basemod != null) {
+                modsList.add(basemod);
+                System.out.println("Mod Loaded: " + modId);
+            }
+        } catch (Throwable var6) {
+            System.out.println("Failed to load mod from \"" + className + "\"");
+            logger.throwing("ModLoader", "addMod", var6);
+            ThrowException(var6);
+        }
+
+    }
+
+    private static void setupProperties(Class class1) throws IllegalArgumentException, IllegalAccessException, IOException, SecurityException, NoSuchFieldException {
+        Properties properties = new Properties();
+        File file = new File(configDirectory, class1.getName() + ".cfg");
+        if (file.exists() && file.canRead()) {
+            properties.load(new FileInputStream(file));
+        }
+
+        StringBuilder stringbuilder = new StringBuilder();
+        Field[] afield;
+        int i = (afield = class1.getFields()).length;
+
+        for (int j = 0; j < i; ++j) {
+            Field field = afield[j];
+            if ((field.getModifiers() & 8) != 0 && field.isAnnotationPresent(MLProp.class)) {
+                Class<?> class2 = field.getType();
+                MLProp mlprop = field.getAnnotation(MLProp.class);
+                String s = mlprop.name().length() == 0 ? field.getName() : mlprop.name();
+                Object obj = field.get(null);
+                StringBuilder stringbuilder1 = new StringBuilder();
+                if (mlprop.min() != Double.NEGATIVE_INFINITY) {
+                    stringbuilder1.append(String.format(",>=%.1f", mlprop.min()));
+                }
+
+                if (mlprop.max() != Double.POSITIVE_INFINITY) {
+                    stringbuilder1.append(String.format(",<=%.1f", mlprop.max()));
+                }
+
+                StringBuilder stringbuilder2 = new StringBuilder();
+                if (mlprop.info().length() > 0) {
+                    stringbuilder2.append(" -- ");
+                    stringbuilder2.append(mlprop.info());
+                }
+
+                stringbuilder.append(String.format("%s (%s:%s%s)%s\n", s, class2.getName(), obj, stringbuilder1, stringbuilder2));
+                if (properties.containsKey(s)) {
+                    String s1 = properties.getProperty(s);
+                    Object obj1 = null;
+                    if (class2.isAssignableFrom(String.class)) {
+                        obj1 = s1;
+                    } else if (class2.isAssignableFrom(Integer.TYPE)) {
+                        obj1 = Integer.parseInt(s1);
+                    } else if (class2.isAssignableFrom(Short.TYPE)) {
+                        obj1 = Short.parseShort(s1);
+                    } else if (class2.isAssignableFrom(Byte.TYPE)) {
+                        obj1 = Byte.parseByte(s1);
+                    } else if (class2.isAssignableFrom(Boolean.TYPE)) {
+                        obj1 = Boolean.parseBoolean(s1);
+                    } else if (class2.isAssignableFrom(Float.TYPE)) {
+                        obj1 = Float.parseFloat(s1);
+                    } else if (class2.isAssignableFrom(Double.TYPE)) {
+                        obj1 = Double.parseDouble(s1);
+                    }
+
+                    if (obj1 != null) {
+                        if (obj1 instanceof Number) {
+                            double d = ((Number) obj1).doubleValue();
+                            if (mlprop.min() != Double.NEGATIVE_INFINITY && d < mlprop.min() || mlprop.max() != Double.POSITIVE_INFINITY && d > mlprop.max()) {
+                                continue;
+                            }
+                        }
+
+                        logger.finer(s + " set to " + obj1);
+                        if (!obj1.equals(obj)) {
+                            field.set(null, obj1);
+                        }
+                    }
+                } else {
+                    logger.finer(s + " not in config, using default: " + obj);
+                    properties.setProperty(s, obj.toString());
+                }
+            }
+        }
+
+        if (!properties.isEmpty() && (file.exists() || file.createNewFile()) && file.canWrite()) {
+            properties.store(new FileOutputStream(file), stringbuilder.toString());
+        }
+
+    }
+
+    public static int addOverride(String s, String s1) {
+        try {
+            int i = getUniqueSpriteIndex(s);
+            addOverride(s, s1, i);
+            return i;
+        } catch (Throwable var3) {
+            logger.throwing("ModLoader", "addOverride", var3);
+            ThrowException(var3);
+            throw new RuntimeException(var3);
+        }
+    }
+
+    public static void addOverride(String s, String s1, int i) {
+//        int j = true;
+//        int k = false;
+        byte j;
+        int k;
+        if (s.equals("/terrain.png")) {
+            j = 0;
+            k = terrainSpritesLeft;
+        } else {
+            if (!s.equals("/gui/items.png")) {
+                return;
+            }
+
+            j = 1;
+            k = itemSpritesLeft;
+        }
+
+        System.out.println("Overriding " + s + " with " + s1 + " @ " + i + ". " + k + " left.");
+        logger.finer("addOverride(" + s + "," + s1 + "," + i + "). " + k + " left.");
+        Object obj = overrides.get(Integer.valueOf(j));
+        if (obj == null) {
+            obj = new HashMap();
+            overrides.put(Integer.valueOf(j), obj);
+        }
+
+        ((Map) obj).put(s1, i);
+    }
+
+    public static void AddRecipe(ItemStack itemstack, Object[] aobj) {
+        CraftingManager.getInstance().registerShapedRecipe(itemstack, aobj);
+    }
+
+    public static void AddShapelessRecipe(ItemStack itemstack, Object[] aobj) {
+        CraftingManager.getInstance().registerShapelessRecipe(itemstack, aobj);
+    }
+
+    public static void AddSmelting(int i, ItemStack itemstack) {
+        FurnaceRecipes.getInstance().registerRecipe(i, itemstack);
+    }
+
+    public static void AddSpawn(Class class1, int i, EnumCreatureType enumcreaturetype) {
+        AddSpawn(class1, i, enumcreaturetype, null);
+    }
+
+    public static void AddSpawn(Class class1, int i, EnumCreatureType enumcreaturetype, BiomeBase[] abiomegenbase) {
+        if (class1 == null) {
+            throw new IllegalArgumentException("entityClass cannot be null");
+        } else if (enumcreaturetype == null) {
+            throw new IllegalArgumentException("spawnList cannot be null");
+        } else {
+            if (abiomegenbase == null) {
+                abiomegenbase = standardBiomes;
+            }
+
+            for (int j = 0; j < abiomegenbase.length; ++j) {
+                List list = abiomegenbase[j].a(enumcreaturetype);
+                if (list != null) {
+                    boolean flag = false;
+                    Iterator iterator = list.iterator();
+
+                    while (iterator.hasNext()) {
+                        BiomeMeta spawnlistentry = (BiomeMeta) iterator.next();
+                        if (spawnlistentry.a == class1) {
+                            spawnlistentry.b = i;
+                            flag = true;
+                            break;
+                        }
+                    }
+
+                    if (!flag) {
+                        list.add(new BiomeMeta(class1, i));
+                    }
+                }
+            }
+
+        }
+    }
+
+    public static void AddSpawn(String s, int i, EnumCreatureType enumcreaturetype) {
+        AddSpawn(s, i, enumcreaturetype, null);
+    }
+
+    public static void AddSpawn(String s, int i, EnumCreatureType enumcreaturetype, BiomeBase[] abiomegenbase) {
+        Class class1 = classMap.get(s);
+        if (class1 != null && EntityLiving.class.isAssignableFrom(class1)) {
+            AddSpawn(class1, i, enumcreaturetype, abiomegenbase);
+        }
+
+    }
+
+    public static boolean DispenseEntity(World world, double d, double d1, double d2, int i, int j, ItemStack itemstack) {
+        boolean flag = false;
+
+        for (Iterator iterator = modsList.iterator(); iterator.hasNext() && !flag; flag = ((BaseMod) iterator.next()).DispenseEntity(world, d, d1, d2, i, j, itemstack)) {
+        }
+
+        return flag;
+    }
+
+    public static List<BaseMod> getLoadedMods() {
+        return Collections.unmodifiableList(modsList);
+    }
+
+    public static Logger getLogger() {
+        return logger;
+    }
+
+    public static MinecraftServer getMinecraftServerInstance() {
+        return instance;
+    }
+
+    public static Object getPrivateValue(Class class1, Object obj, int i) throws IllegalArgumentException, SecurityException, NoSuchFieldException {
+        try {
+            Field field = class1.getDeclaredFields()[i];
+            field.setAccessible(true);
+            return field.get(obj);
+        } catch (IllegalAccessException var4) {
+            logger.throwing("ModLoader", "getPrivateValue", var4);
+            ThrowException("An impossible error has occured!", var4);
+            return null;
+        }
+    }
+
+    public static Object getPrivateValue(Class class1, Object obj, String s) throws IllegalArgumentException, SecurityException, NoSuchFieldException {
+        try {
+            Field field = class1.getDeclaredField(s);
+            field.setAccessible(true);
+            return field.get(obj);
+        } catch (IllegalAccessException var4) {
+            logger.throwing("ModLoader", "getPrivateValue", var4);
+            ThrowException("An impossible error has occured!", var4);
+            return null;
+        }
+    }
+
+    public static int getUniqueBlockModelID(BaseMod basemod, boolean flag) {
+        return nextBlockModelID++;
+    }
+
+    public static int getUniqueEntityId() {
+        return highestEntityId++;
+    }
+
+    private static int getUniqueItemSpriteIndex() {
+        while (itemSpriteIndex < usedItemSprites.length) {
+            if (!usedItemSprites[itemSpriteIndex]) {
+                usedItemSprites[itemSpriteIndex] = true;
+                --itemSpritesLeft;
+                return itemSpriteIndex++;
+            }
+
+            ++itemSpriteIndex;
+        }
+
+        Exception exception = new Exception("No more empty item sprite indices left!");
+        logger.throwing("ModLoader", "getUniqueItemSpriteIndex", exception);
+        ThrowException(exception);
+        return 0;
+    }
+
+    public static int getUniqueSpriteIndex(String s) {
+        if (s.equals("/gui/items.png")) {
+            return getUniqueItemSpriteIndex();
+        } else if (s.equals("/terrain.png")) {
+            return getUniqueTerrainSpriteIndex();
+        } else {
+            Exception exception = new Exception("No registry for this texture: " + s);
+            logger.throwing("ModLoader", "getUniqueItemSpriteIndex", exception);
+            ThrowException(exception);
+            return 0;
+        }
+    }
+
+    private static int getUniqueTerrainSpriteIndex() {
+        while (terrainSpriteIndex < usedTerrainSprites.length) {
+            if (!usedTerrainSprites[terrainSpriteIndex]) {
+                usedTerrainSprites[terrainSpriteIndex] = true;
+                --terrainSpritesLeft;
+                return terrainSpriteIndex++;
+            }
+
+            ++terrainSpriteIndex;
+        }
+
+        Exception exception = new Exception("No more empty terrain sprite indices left!");
+        logger.throwing("ModLoader", "getUniqueItemSpriteIndex", exception);
+        ThrowException(exception);
+        return 0;
+    }
+
+    private static void init() {
+        hasInit = true;
+        String s = "1111111111111111111111111111111111111101111111011111111111111001111111111111111111111011111010111111100110000011111110000000001111111001100000110000000100000011000000010000001100000000000000110000000000000000000000000000000000000000000000001100000000000000";
+        String s1 = "1111111111111111111111111111110111111111111111111111110111111111111111111111000111111011111111111111001111000000111111111111100011111111000010001111011110000000111111000000000011111100000000001111000000000111111000000000001101000000000001111111111111000011";
+
+        for (int i = 0; i < 256; ++i) {
+            usedItemSprites[i] = s.charAt(i) == '1';
+            if (!usedItemSprites[i]) {
+                ++itemSpritesLeft;
+            }
+
+            usedTerrainSprites[i] = s1.charAt(i) == '1';
+            if (!usedTerrainSprites[i]) {
+                ++terrainSpritesLeft;
+            }
+        }
+
+        try {
+            classMap = (Map) getPrivateValue(EntityTypes.class, null, 0);
+            field_modifiers = Field.class.getDeclaredField("modifiers");
+            field_modifiers.setAccessible(true);
+            Field[] afield = BiomeBase.class.getDeclaredFields();
+            LinkedList linkedlist = new LinkedList();
+
+            for (int j = 0; j < afield.length; ++j) {
+                Class class1 = afield[j].getType();
+                if ((afield[j].getModifiers() & 8) != 0 && class1.isAssignableFrom(BiomeBase.class)) {
+                    BiomeBase biomegenbase = (BiomeBase) afield[j].get(null);
+                    if (!(biomegenbase instanceof BiomeHell)) {
+                        linkedlist.add(biomegenbase);
+                    }
+                }
+            }
+
+            standardBiomes = new BiomeBase[0];
+
+            try {
+                method_RegisterTileEntity = TileEntity.class.getDeclaredMethod("a", Class.class, String.class);
+            } catch (NoSuchMethodException var8) {
+                method_RegisterTileEntity = TileEntity.class.getDeclaredMethod("addMapping", Class.class, String.class);
+            }
+
+            method_RegisterTileEntity.setAccessible(true);
+
+            try {
+                method_RegisterEntityID = EntityTypes.class.getDeclaredMethod("a", Class.class, String.class, Integer.TYPE);
+            } catch (NoSuchMethodException var7) {
+                method_RegisterEntityID = EntityTypes.class.getDeclaredMethod("addMapping", Class.class, String.class, Integer.TYPE);
+            }
+
+            method_RegisterEntityID.setAccessible(true);
+        } catch (SecurityException | NoSuchFieldException | NoSuchMethodException | IllegalArgumentException | IllegalAccessException var11) {
+            logger.throwing("ModLoader", "init", var11);
+            ThrowException(var11);
+            throw new RuntimeException(var11);
+        }
+
+        try {
+            try {
+                loadConfig();
+            } catch (IOException var9) {
+                if (!var9.getMessage().contains("No such file or directory")) {
+                    throw var9;
+                }
+
+                String s2 = "Error loading ModLoader config. Check the common problems section in the ModLoaderMP thread.";
+                ThrowException(new RuntimeException(s2, var9));
+            }
+
+            if (props.containsKey("loggingLevel")) {
+                configLoggingLevel = Level.parse(props.getProperty("loggingLevel"));
+            }
+
+            logger.setLevel(configLoggingLevel);
+            if ((logFile.exists() || logFile.createNewFile()) && logFile.canWrite() && logHandler == null) {
+                logHandler = new FileHandler(logFile.getPath());
+                logHandler.setFormatter(new SimpleFormatter());
+                logger.addHandler(logHandler);
+            }
+
+            System.out.println(VERSION + " initializing...");
+
+            File file = new File("b1.7.3.jar");
+            if(!file.exists()) {
+                throw new RuntimeException("Vanilla server jar not found! It's required for remapping, please download it and save it to " + file.getAbsolutePath());
+            }
+
+            modsDirectory.mkdirs();
+            mappedModsDir.mkdirs();
+            readFromModFolder(modsDirectory);
+            System.out.println("Done.");
+            props.setProperty("loggingLevel", configLoggingLevel.getName());
+
+            for (BaseMod basemod : modsList) {
+                basemod.ModsLoaded();
+                if (!props.containsKey(basemod.getClass().getName())) {
+                    props.setProperty(basemod.getClass().getName(), "on");
+                }
+            }
+
+            initStats();
+            saveConfig();
+        } catch (Throwable var10) {
+            logger.throwing("ModLoader", "init", var10);
+            ThrowException("ModLoader has failed to initialize.", var10);
+            if (logHandler != null) {
+                logHandler.close();
+            }
+
+            throw new RuntimeException(var10);
+        }
+    }
+
+    private static void initStats() {
+        int j;
+        String s2;
+        try {
+            Field a = StatisticList.class.getDeclaredField("a");
+            a.setAccessible(true);
+            for (j = 0; j < Block.byId.length; ++j) {
+                if (!((Map) a.get(null)).containsKey(16777216 + j) && Block.byId[j] != null && Block.byId[j].m()) {
+                    s2 = StatisticCollector.a("stat.mineBlock", Block.byId[j].k());
+                    StatisticList.C[j] = (new CraftingStatistic(16777216 + j, s2, j)).d();
+                    StatisticList.e.add(StatisticList.C[j]);
+                }
+            }
+
+            for (j = 0; j < Item.byId.length; ++j) {
+                if (!((Map) a.get(null)).containsKey(16908288 + j) && Item.byId[j] != null) {
+                    s2 = StatisticCollector.a("stat.useItem", Item.byId[j].j());
+                    StatisticList.E[j] = (new CraftingStatistic(16908288 + j, s2, j)).d();
+                    if (j >= Block.byId.length) {
+                        StatisticList.d.add(StatisticList.E[j]);
+                    }
+                }
+
+                if (!((Map) a.get(null)).containsKey(16973824 + j) && Item.byId[j] != null && Item.byId[j].f()) {
+                    s2 = StatisticCollector.a("stat.breakItem", Item.byId[j].j());
+                    StatisticList.F[j] = (new CraftingStatistic(16973824 + j, s2, j)).d();
+                }
+            }
+
+            HashSet hashset = new HashSet();
+
+            for (Object obj : CraftingManager.getInstance().b()) {
+                hashset.add(((CraftingRecipe) obj).b().id);
+            }
+
+            Iterator iterator2 = FurnaceRecipes.getInstance().b().values().iterator();
+
+            while (iterator2.hasNext()) {
+                Object obj1 = iterator2.next();
+                hashset.add(((ItemStack) obj1).id);
+            }
+
+            iterator2 = hashset.iterator();
+
+            while (iterator2.hasNext()) {
+                int k = (Integer) iterator2.next();
+                if (!((Map) a.get(null)).containsKey(16842752 + k) && Item.byId[k] != null) {
+                    String s3 = StatisticCollector.a("stat.craftItem", Item.byId[k].j());
+                    StatisticList.D[k] = (new CraftingStatistic(16842752 + k, s3, k)).d();
+                }
+            }
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static boolean isModLoaded(String s) {
+        Class class1;
+
+        try {
+            class1 = Class.forName(s, false, MinecraftServer.class.getClassLoader());
+        } catch (ClassNotFoundException var4) {
+            return false;
+        }
+
+        if (class1 != null) {
+            Iterator iterator = modsList.iterator();
+
+            while (iterator.hasNext()) {
+                BaseMod basemod = (BaseMod) iterator.next();
+                if (class1.isInstance(basemod)) {
+                    return true;
+                }
+            }
+        }
+
+        return false;
+    }
+
+    public static void loadConfig() throws IOException {
+        configDirectory.mkdir();
+        if (configFile.exists() || configFile.createNewFile()) {
+            if (configFile.canRead()) {
+                FileInputStream fileinputstream = new FileInputStream(configFile);
+                props.load(fileinputstream);
+                fileinputstream.close();
+            }
+
+        }
+    }
+
+    public static void OnTick(MinecraftServer minecraftserver) {
+        if (!hasInit) {
+            init();
+            logger.fine("Initialized");
+        }
+
+        long l = 0L;
+        if (minecraftserver.worlds != null && minecraftserver.worlds.size() > 0 && minecraftserver.worlds.get(0) != null) {
+            l = minecraftserver.worlds.get(0).getTime();
+            Iterator iterator = inGameHooks.entrySet().iterator();
+
+            label26:
+            while (true) {
+                Entry entry;
+                do {
+                    if (!iterator.hasNext()) {
+                        break label26;
+                    }
+
+                    entry = (Entry) iterator.next();
+                } while (clock == l && (Boolean) entry.getValue());
+
+                ((BaseMod) entry.getKey()).OnTickInGame(minecraftserver);
+            }
+        }
+
+        clock = l;
+    }
+
+    public static void PopulateChunk(IChunkProvider ichunkprovider, int i, int j, World world) {
+        if (!hasInit) {
+            init();
+            logger.fine("Initialized");
+        }
+
+        Iterator iterator = modsList.iterator();
+
+        while (iterator.hasNext()) {
+            BaseMod basemod = (BaseMod) iterator.next();
+            if (ichunkprovider instanceof ChunkProviderGenerate) {
+                basemod.GenerateSurface(world, world.random, i, j);
+            } else if (ichunkprovider instanceof ChunkProviderHell) {
+                basemod.GenerateNether(world, world.random, i, j);
+            }
+        }
+
+    }
+
+    private static String getExtension(String filename) {
+        return Optional.ofNullable(filename)
+                .filter(f -> f.contains("."))
+                .map(f -> f.substring(filename.lastIndexOf(".") + 1)).orElse(null);
+    }
+
+    private static void readFromModFolder(File modsFile) throws IOException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, SecurityException, NoSuchMethodException {
+        ClassLoader classloader = MinecraftServer.class.getClassLoader();
+        Method method = URLClassLoader.class.getDeclaredMethod("addURL", URL.class);
+        method.setAccessible(true);
+        Path mappings;
+        try {
+            mappings = Paths.get(classloader.getResource("mappings.tiny").toURI());
+        } catch (URISyntaxException e) {
+            throw new RuntimeException(e);
+        }
+        if (!modsFile.isDirectory()) {
+            throw new IllegalArgumentException("folder must be a Directory.");
+        } else {
+            List<Class<?>> fixPackage = Arrays.asList(BaseMod.class, BaseModMp.class, EntityTrackerEntry2.class, ISpawnable.class, MLProp.class, ModLoader.class, ModLoaderMp.class, Packet230ModLoader.class, Pair.class, MinecraftForge.class);
+            List<String> modsClasses = new ArrayList<>();
+            HashMap<File, File> modsFiles = new HashMap<>();
+
+            for (File modFile : modsFile.listFiles()) {
+                String extension = getExtension(modFile.getName());
+                if (modFile.isFile() && (extension.equalsIgnoreCase("jar") || extension.equalsIgnoreCase("zip"))) {
+                    modsFiles.put(modFile, new File(mappedModsDir, modFile.getName().replace(extension, "remapped.jar")));
+                    ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(modFile));
+                    while (true) {
+                        ZipEntry entry = zipInputStream.getNextEntry();
+                        if (entry == null) {
+                            zipInputStream.close();
+                            break;
+                        }
+
+                        if (!entry.isDirectory()) {
+                            modsClasses.add(entry.getName().replace(".class", ""));
+                        }
+                    }
+                }
+            }
+
+            for (Map.Entry<File, File> entry : modsFiles.entrySet()) {
+                File modFile = entry.getKey();
+                File remappedModFile = entry.getValue();
+
+                TinyRemapper remapper = TinyRemapper.newRemapper()
+                        .withMappings(TinyUtils.createTinyMappingProvider(mappings, "official", "named"))
+                        .extraVisitor((visitor, remapper1) -> new ClassRemapper(visitor, remapper1) {
+                            @Override
+                            protected MethodVisitor createMethodRemapper(MethodVisitor mv) {
+                                return new MethodVisitor(Opcodes.ASM7, mv) {
+                                    @Override
+                                    public void visitLdcInsn(Object value) {
+                                        if (value instanceof String && modsClasses.contains(((String) value).replace(".", "/"))) {
+                                            super.visitLdcInsn("net.minecraft.server." + value);
+                                        } else {
+                                            super.visitLdcInsn(value);
+                                        }
+                                    }
+                                };
+                            }
+                        })
+                        .extraRemapper(new Remapper() {
+                            @Override
+                            public String map(String internalName) {
+                                Class<?> aClass = fixPackage.stream().filter(c -> c.getSimpleName().equals(internalName)).findAny().orElse(null);
+                                if (aClass != null) {
+                                    return super.map(aClass.getName().replace(".", "/"));
+                                } else if (!internalName.startsWith("net/minecraft/server/") && modsClasses.contains(internalName)) {
+                                    return super.map("net/minecraft/server/" + internalName);
+                                }
+                                return super.map(internalName);
+                            }
+                        })
+                        .extraClassNameMapper((tinyRemapper, def) -> {
+                            ClassInstance classInstance = tinyRemapper.getClasses().get(def);
+                            if (classInstance != null && classInstance.isInput()) {
+                                return "net/minecraft/server/" + def;
+                            }
+                            return def;
+                        })
+                        .build();
+                OutputConsumerPath outputConsumer = new OutputConsumerPath.Builder(remappedModFile.toPath()).build();
+                outputConsumer.addNonClassFiles(modFile.toPath());
+                remapper.readClassPath(Paths.get("b1.7.3.jar"));
+//                remapper.readClassPath(Arrays.stream(((URLClassLoader) classloader).getURLs()).map(x -> {
+//                    try {
+//                        return Paths.get(x.toURI());
+//                    } catch (URISyntaxException e) {
+//                        e.printStackTrace();
+//                    }
+//                    return null;
+//                }).toArray(Path[]::new));
+                remapper.readClassPath(modsFiles.keySet().stream().filter(x -> x != modFile).map(File::toPath).toArray(Path[]::new));
+                remapper.readInputs(modFile.toPath());
+
+                remapper.apply(outputConsumer);
+                outputConsumer.close();
+                remapper.finish();
+
+                if (classloader instanceof URLClassLoader) {
+                    method.invoke(classloader, remappedModFile.toURI().toURL());
+                }
+
+                logger.finer("Adding mod from " + remappedModFile.getCanonicalPath());
+
+                FileInputStream fileinputstream = new FileInputStream(remappedModFile);
+                ZipInputStream zipinputstream = new ZipInputStream(fileinputstream);
+                while (true) {
+                    ZipEntry zipentry = zipinputstream.getNextEntry();
+                    if (zipentry == null) {
+                        zipinputstream.close();
+                        fileinputstream.close();
+                        break;
+                    }
+
+                    String[] split = zipentry.getName().split("/");
+                    String fileName = split[split.length - 1];
+                    if (!zipentry.isDirectory() && fileName.startsWith("mod_") && fileName.endsWith(".class")) {
+                        addMod(classloader, zipentry.getName(), fileName);
+                    }
+                }
+            }
+        }
+    }
+
+    public static void RegisterBlock(Block block) {
+        RegisterBlock(block, null);
+    }
+
+    public static void RegisterBlock(Block block, Class class1) {
+        try {
+            if (block == null) {
+                throw new IllegalArgumentException("block parameter cannot be null.");
+            }
+
+            int i = block.id;
+            ItemBlock itemblock = null;
+            if (class1 != null) {
+                itemblock = (ItemBlock) class1.getConstructor(Integer.TYPE).newInstance(i - 256);
+            } else {
+                itemblock = new ItemBlock(i - 256);
+            }
+
+            if (Block.byId[i] != null && Item.byId[i] == null) {
+                Item.byId[i] = itemblock;
+            }
+        } catch (IllegalArgumentException | IllegalAccessException | SecurityException | InstantiationException | InvocationTargetException | NoSuchMethodException var4) {
+            logger.throwing("ModLoader", "RegisterBlock", var4);
+            ThrowException(var4);
+        }
+
+    }
+
+    public static void RegisterEntityID(Class class1, String s, int i) {
+        try {
+            method_RegisterEntityID.invoke(null, class1, s, i);
+        } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException var4) {
+            logger.throwing("ModLoader", "RegisterEntityID", var4);
+            ThrowException(var4);
+        }
+
+    }
+
+    public static void RegisterTileEntity(Class class1, String s) {
+        try {
+            method_RegisterTileEntity.invoke(null, class1, s);
+        } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException var3) {
+            logger.throwing("ModLoader", "RegisterTileEntity", var3);
+            ThrowException(var3);
+        }
+
+    }
+
+    public static void RemoveSpawn(Class class1, EnumCreatureType enumcreaturetype) {
+        RemoveSpawn(class1, enumcreaturetype, null);
+    }
+
+    public static void RemoveSpawn(Class class1, EnumCreatureType enumcreaturetype, BiomeBase[] abiomegenbase) {
+        if (class1 == null) {
+            throw new IllegalArgumentException("entityClass cannot be null");
+        } else if (enumcreaturetype == null) {
+            throw new IllegalArgumentException("spawnList cannot be null");
+        } else {
+            if (abiomegenbase == null) {
+                abiomegenbase = standardBiomes;
+            }
+
+            for (int i = 0; i < abiomegenbase.length; ++i) {
+                List list = abiomegenbase[i].a(enumcreaturetype);
+                if (list != null) {
+                    Iterator iterator = list.iterator();
+
+                    while (iterator.hasNext()) {
+                        BiomeMeta spawnlistentry = (BiomeMeta) iterator.next();
+                        if (spawnlistentry.a == class1) {
+                            list.remove(spawnlistentry);
+                            break;
+                        }
+                    }
+                }
+            }
+
+        }
+    }
+
+    public static void RemoveSpawn(String s, EnumCreatureType enumcreaturetype) {
+        RemoveSpawn(s, enumcreaturetype, null);
+    }
+
+    public static void RemoveSpawn(String s, EnumCreatureType enumcreaturetype, BiomeBase[] abiomegenbase) {
+        Class<? extends Entity> class1 = classMap.get(s);
+        if (class1 != null && EntityLiving.class.isAssignableFrom(class1)) {
+            RemoveSpawn(class1, enumcreaturetype, abiomegenbase);
+        }
+    }
+
+    public static void saveConfig() throws IOException {
+        configDirectory.mkdir();
+        if (configFile.exists() || configFile.createNewFile()) {
+            if (configFile.canWrite()) {
+                FileOutputStream fileoutputstream = new FileOutputStream(configFile);
+                props.store(fileoutputstream, "ModLoader Config");
+                fileoutputstream.close();
+            }
+
+        }
+    }
+
+    public static void SetInGameHook(BaseMod basemod, boolean flag, boolean flag1) {
+        if (flag) {
+            inGameHooks.put(basemod, flag1);
+        } else {
+            inGameHooks.remove(basemod);
+        }
+
+    }
+
+    public static void setPrivateValue(Class class1, Object obj, int i, Object obj1) throws IllegalArgumentException, SecurityException, NoSuchFieldException {
+        try {
+            Field field = class1.getDeclaredFields()[i];
+            field.setAccessible(true);
+            int j = field_modifiers.getInt(field);
+            if ((j & 16) != 0) {
+                field_modifiers.setInt(field, j & -17);
+            }
+
+            field.set(obj, obj1);
+        } catch (IllegalAccessException var6) {
+            logger.throwing("ModLoader", "setPrivateValue", var6);
+            ThrowException("An impossible error has occured!", var6);
+        }
+
+    }
+
+    public static void setPrivateValue(Class class1, Object obj, String s, Object obj1) throws IllegalArgumentException, SecurityException, NoSuchFieldException {
+        try {
+            Field field = class1.getDeclaredField(s);
+            int i = field_modifiers.getInt(field);
+            if ((i & 16) != 0) {
+                field_modifiers.setInt(field, i & -17);
+            }
+
+            field.setAccessible(true);
+            field.set(obj, obj1);
+        } catch (IllegalAccessException var6) {
+            logger.throwing("ModLoader", "setPrivateValue", var6);
+            ThrowException("An impossible error has occured!", var6);
+        }
+
+    }
+
+    public static void TakenFromCrafting(EntityHuman entityplayer, ItemStack itemstack) {
+        for (BaseMod basemod : modsList) {
+            basemod.TakenFromCrafting(entityplayer, itemstack);
+        }
+    }
+
+    public static void TakenFromFurnace(EntityHuman entityplayer, ItemStack itemstack) {
+        for (BaseMod basemod : modsList) {
+            basemod.TakenFromFurnace(entityplayer, itemstack);
+        }
+    }
+
+    public static void OnItemPickup(EntityHuman entityplayer, ItemStack itemstack) {
+        for (BaseMod basemod : modsList) {
+            basemod.OnItemPickup(entityplayer, itemstack);
+        }
+    }
+
+    public static void ThrowException(String s, Throwable throwable) {
+        throwable.printStackTrace();
+        logger.log(Level.SEVERE, "Unexpected exception", throwable);
+        MinecraftServer.log.throwing("ModLoader", s, throwable);
+        throw new RuntimeException(s, throwable);
+    }
+
+    private static void ThrowException(Throwable throwable) {
+        ThrowException("Exception occured in ModLoader", throwable);
+    }
+
+    private ModLoader() {
+    }
+
+    public static void Init(MinecraftServer minecraftserver) {
+        instance = minecraftserver;
+
+        configDirectory = new File("config/");
+        configFile = new File("config/ModLoader.cfg");
+        logFile = new File("ModLoader.txt");
+        modsDirectory = new File("mods/");
+        mappedModsDir = new File(modsDirectory, "mapped/");
+
+        try {
+            try {
+                method_getNextWindowId = EntityPlayer.class.getDeclaredMethod("ai", (Class[]) null);
+            } catch (NoSuchMethodException var3) {
+                method_getNextWindowId = EntityPlayer.class.getDeclaredMethod("getNextWidowId", (Class[]) null);
+            }
+
+            method_getNextWindowId.setAccessible(true);
+
+            try {
+                field_currentWindowId = EntityPlayer.class.getDeclaredField("bO");
+            } catch (NoSuchFieldException var2) {
+                field_currentWindowId = EntityPlayer.class.getDeclaredField("currentWindowId");
+            }
+
+            field_currentWindowId.setAccessible(true);
+        } catch (NoSuchFieldException | NoSuchMethodException var4) {
+            getLogger().throwing("ModLoader", "Init", var4);
+            ThrowException("ModLoader", var4);
+            return;
+        }
+
+        init();
+    }
+
+    public static void OpenGUI(EntityHuman entityplayer, int i, IInventory iinventory, Container container) {
+        if (!hasInit) {
+            init();
+        }
+
+        if (entityplayer instanceof EntityPlayer) {
+            EntityPlayer entityplayermp = (EntityPlayer) entityplayer;
+
+            try {
+                method_getNextWindowId.invoke(entityplayermp);
+                int j = field_currentWindowId.getInt(entityplayermp);
+                entityplayermp.netServerHandler.sendPacket(new Packet100OpenWindow(j, i, iinventory.getName(), iinventory.getSize()));
+                entityplayermp.activeContainer = container;
+                entityplayermp.activeContainer.windowId = j;
+                entityplayermp.activeContainer.a(entityplayer);
+            } catch (InvocationTargetException | IllegalAccessException var6) {
+                getLogger().throwing("ModLoaderMultiplayer", "OpenModGUI", var6);
+                ThrowException("ModLoaderMultiplayer", var6);
+            }
+        }
+
+    }
+
+    static {
+        configLoggingLevel = Level.FINER;
+    }
+}
diff --git a/src/main/java/modloader/ModLoaderMp.java b/src/main/java/modloader/ModLoaderMp.java
new file mode 100644
index 00000000..58811b1d
--- /dev/null
+++ b/src/main/java/modloader/ModLoaderMp.java
@@ -0,0 +1,463 @@
+package modloader;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import net.minecraft.server.*;
+
+public class ModLoaderMp {
+    public static final String NAME = "ModLoaderMP Server";
+    public static final String VERSION = "b1.7.3 (Canyon)";
+    private static boolean hasInit = false;
+    private static Map entityTrackerMap = new HashMap();
+    private static Map entityTrackerEntryMap = new HashMap();
+    private static List bannedMods = new ArrayList();
+
+    public static void InitModLoaderMp() {
+        if (!hasInit) {
+            init();
+        }
+
+    }
+
+    public static void RegisterEntityTracker(Class class1, int i, int j) {
+        if (!hasInit) {
+            init();
+        }
+
+        if (entityTrackerMap.containsKey(class1)) {
+            System.out.println("RegisterEntityTracker error: entityClass already registered.");
+        } else {
+            entityTrackerMap.put(class1, new Pair(i, j));
+        }
+
+    }
+
+    public static void RegisterEntityTrackerEntry(Class class1, int i) {
+        RegisterEntityTrackerEntry(class1, false, i);
+    }
+
+    public static void RegisterEntityTrackerEntry(Class class1, boolean flag, int i) {
+        if (!hasInit) {
+            init();
+        }
+
+        if (i > 255) {
+            System.out.println("RegisterEntityTrackerEntry error: entityId cannot be greater than 255.");
+        }
+
+        if (entityTrackerEntryMap.containsKey(class1)) {
+            System.out.println("RegisterEntityTrackerEntry error: entityClass already registered.");
+        } else {
+            entityTrackerEntryMap.put(class1, new EntityTrackerEntry2(i, flag));
+        }
+
+    }
+
+    public static void HandleAllLogins(EntityPlayer entityplayermp) {
+        if (!hasInit) {
+            init();
+        }
+
+        sendModCheck(entityplayermp);
+
+        for(int i = 0; i < ModLoader.getLoadedMods().size(); ++i) {
+            BaseMod basemod = (BaseMod)ModLoader.getLoadedMods().get(i);
+            if (basemod instanceof BaseModMp) {
+                ((BaseModMp)basemod).HandleLogin(entityplayermp);
+            }
+        }
+
+    }
+
+    public static void HandleAllPackets(Packet230ModLoader packet230modloader, EntityPlayer entityplayermp) {
+        if (!hasInit) {
+            init();
+        }
+
+        if (packet230modloader.modId == "ModLoaderMP".hashCode()) {
+            switch(packet230modloader.packetType) {
+                case 0:
+                    handleModCheckResponse(packet230modloader, entityplayermp);
+                    break;
+                case 1:
+                    handleSendKey(packet230modloader, entityplayermp);
+            }
+        } else {
+            for(int i = 0; i < ModLoader.getLoadedMods().size(); ++i) {
+                BaseMod basemod = (BaseMod)ModLoader.getLoadedMods().get(i);
+                if (basemod instanceof BaseModMp) {
+                    BaseModMp basemodmp = (BaseModMp)basemod;
+                    if (basemodmp.getId() == packet230modloader.modId) {
+                        basemodmp.HandlePacket(packet230modloader, entityplayermp);
+                        break;
+                    }
+                }
+            }
+        }
+
+    }
+
+    public static void HandleEntityTrackers(EntityTracker entitytracker, Entity entity) {
+        if (!hasInit) {
+            init();
+        }
+
+        Iterator iterator = entityTrackerMap.entrySet().iterator();
+
+        Entry entry;
+        do {
+            if (!iterator.hasNext()) {
+                return;
+            }
+
+            entry = (Entry)iterator.next();
+        } while(!((Class)entry.getKey()).isInstance(entity));
+
+        entitytracker.a(entity, (Integer)((Pair)entry.getValue()).getLeft(), (Integer)((Pair)entry.getValue()).getRight(), true);
+    }
+
+    public static EntityTrackerEntry2 HandleEntityTrackerEntries(Entity entity) {
+        if (!hasInit) {
+            init();
+        }
+
+        return entityTrackerEntryMap.containsKey(entity.getClass()) ? (EntityTrackerEntry2)entityTrackerEntryMap.get(entity.getClass()) : null;
+    }
+
+    public static void SendPacketToAll(BaseModMp basemodmp, Packet230ModLoader packet230modloader) {
+        if (!hasInit) {
+            init();
+        }
+
+        if (basemodmp == null) {
+            IllegalArgumentException illegalargumentexception = new IllegalArgumentException("baseModMp cannot be null.");
+            ModLoader.getLogger().throwing("ModLoaderMP", "SendPacketToAll", illegalargumentexception);
+            ModLoader.ThrowException("baseModMp cannot be null.", illegalargumentexception);
+        } else {
+            packet230modloader.modId = basemodmp.getId();
+            sendPacketToAll(packet230modloader);
+        }
+    }
+
+    private static void sendPacketToAll(Packet packet) {
+        if (packet != null) {
+            for(int i = 0; i < ModLoader.getMinecraftServerInstance().serverConfigurationManager.players.size(); ++i) {
+                ((EntityPlayer)ModLoader.getMinecraftServerInstance().serverConfigurationManager.players.get(i)).netServerHandler.sendPacket(packet);
+            }
+        }
+
+    }
+
+    public static void SendPacketTo(BaseModMp basemodmp, EntityPlayer entityplayermp, Packet230ModLoader packet230modloader) {
+        if (!hasInit) {
+            init();
+        }
+
+        if (basemodmp == null) {
+            IllegalArgumentException illegalargumentexception = new IllegalArgumentException("baseModMp cannot be null.");
+            ModLoader.getLogger().throwing("ModLoaderMP", "SendPacketTo", illegalargumentexception);
+            ModLoader.ThrowException("baseModMp cannot be null.", illegalargumentexception);
+        } else {
+            packet230modloader.modId = basemodmp.getId();
+            sendPacketTo(entityplayermp, packet230modloader);
+        }
+    }
+
+    public static void Log(String s) {
+//        MinecraftServer.log.info(s);
+//        ModLoader.getLogger().fine(s);
+        System.out.println(s);
+    }
+
+    public static World GetPlayerWorld(EntityHuman entityplayer) {
+        for (WorldServer world : ModLoader.getMinecraftServerInstance().worlds) {
+            if (world.players.contains(entityplayer)) {
+                return world;
+            }
+        }
+
+        return null;
+    }
+
+    private static void init() {
+        hasInit = true;
+
+        try {
+            Method method;
+            try {
+                method = Packet.class.getDeclaredMethod("a", Integer.TYPE, Boolean.TYPE, Boolean.TYPE, Class.class);
+            } catch (NoSuchMethodException var3) {
+                method = Packet.class.getDeclaredMethod("addIdClassMapping", Integer.TYPE, Boolean.TYPE, Boolean.TYPE, Class.class);
+            }
+
+            method.setAccessible(true);
+            method.invoke(null, 230, true, true, Packet230ModLoader.class);
+        } catch (IllegalAccessException var4) {
+            ModLoader.getLogger().throwing("ModLoaderMP", "AddCustomPacketMapping", var4);
+            ModLoader.ThrowException("ModLoaderMP", var4);
+            return;
+        } catch (IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException var5) {
+            ModLoader.getLogger().throwing("ModLoaderMP", "init", var5);
+            ModLoader.ThrowException("ModLoaderMP", var5);
+            return;
+        }
+
+        try {
+            File file = ModLoader.getMinecraftServerInstance().a("banned-mods.txt");
+            if (!file.exists()) {
+                file.createNewFile();
+            }
+
+            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
+
+            String s;
+            while((s = bufferedreader.readLine()) != null) {
+                bannedMods.add(s);
+            }
+        } catch (IOException var9) {
+            ModLoader.getLogger().throwing("ModLoader", "init", var9);
+            ModLoader.ThrowException("ModLoaderMultiplayer", var9);
+            return;
+        }
+
+        Log(ModLoader.VERSION + " initialized");
+    }
+
+    private static void sendPacketTo(EntityPlayer entityplayermp, Packet230ModLoader packet230modloader) {
+        entityplayermp.netServerHandler.sendPacket(packet230modloader);
+    }
+
+    private static void sendModCheck(EntityPlayer entityplayermp) {
+        Packet230ModLoader packet230modloader = new Packet230ModLoader();
+        packet230modloader.modId = "ModLoaderMP".hashCode();
+        packet230modloader.packetType = 0;
+        sendPacketTo(entityplayermp, packet230modloader);
+    }
+
+    private static void handleModCheckResponse(Packet230ModLoader packet230modloader, EntityPlayer entityplayermp) {
+        StringBuilder stringbuilder = new StringBuilder();
+        if (packet230modloader.dataString.length != 0) {
+            for(int i = 0; i < packet230modloader.dataString.length; ++i) {
+                if (packet230modloader.dataString[i].lastIndexOf("mod_") != -1) {
+                    if (stringbuilder.length() != 0) {
+                        stringbuilder.append(", ");
+                    }
+
+                    stringbuilder.append(packet230modloader.dataString[i].substring(packet230modloader.dataString[i].lastIndexOf("mod_")));
+                }
+            }
+        } else {
+            stringbuilder.append("no mods");
+        }
+
+        Log(entityplayermp.displayName + " joined with " + stringbuilder.toString());
+        ArrayList arraylist = new ArrayList();
+
+        int k;
+        for(int j = 0; j < bannedMods.size(); ++j) {
+            for(k = 0; k < packet230modloader.dataString.length; ++k) {
+                if (packet230modloader.dataString[k].lastIndexOf("mod_") != -1 && packet230modloader.dataString[k].substring(packet230modloader.dataString[k].lastIndexOf("mod_")).startsWith((String)bannedMods.get(j))) {
+                    arraylist.add(packet230modloader.dataString[k]);
+                }
+            }
+        }
+
+        ArrayList arraylist1 = new ArrayList();
+
+        for(k = 0; k < ModLoader.getLoadedMods().size(); ++k) {
+            BaseModMp basemodmp = (BaseModMp)ModLoader.getLoadedMods().get(k);
+            if (basemodmp.hasClientSide() && basemodmp.toString().lastIndexOf("mod_") != -1) {
+                String s = basemodmp.toString().substring(basemodmp.toString().lastIndexOf("mod_"));
+                boolean flag = false;
+
+                for(int l1 = 0; l1 < packet230modloader.dataString.length; ++l1) {
+                    if (packet230modloader.dataString[l1].lastIndexOf("mod_") != -1) {
+                        String s1 = packet230modloader.dataString[l1].substring(packet230modloader.dataString[l1].lastIndexOf("mod_"));
+                        if (s.equals(s1)) {
+                            flag = true;
+                            break;
+                        }
+                    }
+                }
+
+                if (!flag) {
+                    arraylist1.add(s);
+                }
+            }
+        }
+
+        StringBuilder stringbuilder1;
+        int i1;
+        if (arraylist.size() != 0) {
+            stringbuilder1 = new StringBuilder();
+
+            for(i1 = 0; i1 < arraylist.size(); ++i1) {
+                if (((String)arraylist.get(i1)).lastIndexOf("mod_") != -1) {
+                    if (stringbuilder1.length() != 0) {
+                        stringbuilder1.append(", ");
+                    }
+
+                    stringbuilder1.append(((String)arraylist.get(i1)).substring(((String)arraylist.get(i1)).lastIndexOf("mod_")));
+                }
+            }
+
+            Log(entityplayermp.displayName + " kicked for having " + stringbuilder1.toString());
+            StringBuilder stringbuilder3 = new StringBuilder();
+
+            for(int k1 = 0; k1 < arraylist.size(); ++k1) {
+                if (((String)arraylist.get(k1)).lastIndexOf("mod_") != -1) {
+                    stringbuilder3.append("\n");
+                    stringbuilder3.append(((String)arraylist.get(k1)).substring(((String)arraylist.get(k1)).lastIndexOf("mod_")));
+                }
+            }
+
+            entityplayermp.netServerHandler.disconnect("The following mods are banned on this server:" + stringbuilder3.toString());
+        } else if (arraylist1.size() != 0) {
+            stringbuilder1 = new StringBuilder();
+
+            for(i1 = 0; i1 < arraylist1.size(); ++i1) {
+                if (((String)arraylist1.get(i1)).lastIndexOf("mod_") != -1) {
+                    stringbuilder1.append("\n");
+                    stringbuilder1.append(((String)arraylist1.get(i1)).substring(((String)arraylist1.get(i1)).lastIndexOf("mod_")));
+                }
+            }
+
+            entityplayermp.netServerHandler.disconnect("You are missing the following mods:" + stringbuilder1.toString());
+        }
+
+    }
+
+    private static void handleSendKey(Packet230ModLoader packet230modloader, EntityPlayer entityplayermp) {
+        if (packet230modloader.dataInt.length != 2) {
+            System.out.println("SendKey packet received with missing data.");
+        } else {
+            int i = packet230modloader.dataInt[0];
+            int j = packet230modloader.dataInt[1];
+
+            for(int k = 0; k < ModLoader.getLoadedMods().size(); ++k) {
+                BaseMod basemod = (BaseMod)ModLoader.getLoadedMods().get(k);
+                if (basemod instanceof BaseModMp) {
+                    BaseModMp basemodmp = (BaseModMp)basemod;
+                    if (basemodmp.getId() == i) {
+                        basemodmp.HandleSendKey(entityplayermp, j);
+                        break;
+                    }
+                }
+            }
+        }
+
+    }
+
+    public static void getCommandInfo(ICommandListener icommandlistener) {
+        for(int i = 0; i < ModLoader.getLoadedMods().size(); ++i) {
+            BaseMod basemod = (BaseMod)ModLoader.getLoadedMods().get(i);
+            if (basemod instanceof BaseModMp) {
+                BaseModMp basemodmp = (BaseModMp)basemod;
+                basemodmp.GetCommandInfo(icommandlistener);
+            }
+        }
+
+    }
+
+    public static boolean handleCommand(String s, String s1, ICommandListener icommandlistener, ConsoleCommandHandler consolecommandhandler) {
+        boolean flag = false;
+
+        for(int i = 0; i < ModLoader.getLoadedMods().size(); ++i) {
+            BaseMod basemod = (BaseMod)ModLoader.getLoadedMods().get(i);
+            if (basemod instanceof BaseModMp) {
+                BaseModMp basemodmp = (BaseModMp)basemod;
+                if (basemodmp.HandleCommand(s, s1, icommandlistener, consolecommandhandler)) {
+                    flag = true;
+                }
+            }
+        }
+
+        return flag;
+    }
+
+    public static void sendChatToAll(String s, String s1) {
+        String s2 = s + ": " + s1;
+        sendChatToAll(s2);
+    }
+
+    public static void sendChatToAll(String s) {
+        List list = ModLoader.getMinecraftServerInstance().serverConfigurationManager.players;
+
+        for(int i = 0; i < list.size(); ++i) {
+            EntityPlayer entityplayermp = (EntityPlayer)list.get(i);
+            entityplayermp.netServerHandler.sendPacket(new Packet3Chat(s));
+        }
+
+        MinecraftServer.log.info(s);
+    }
+
+    public static void sendChatToOps(String s, String s1) {
+        String s2 = "\u00a77(" + s + ": " + s1 + ")";
+        sendChatToOps(s2);
+    }
+
+    public static void sendChatToOps(String s) {
+        List list = ModLoader.getMinecraftServerInstance().serverConfigurationManager.players;
+
+        for(int i = 0; i < list.size(); ++i) {
+            EntityPlayer entityplayermp = (EntityPlayer)list.get(i);
+            if (ModLoader.getMinecraftServerInstance().serverConfigurationManager.isOp(entityplayermp.displayName)) {
+                entityplayermp.netServerHandler.sendPacket(new Packet3Chat(s));
+            }
+        }
+
+        MinecraftServer.log.info(s);
+    }
+
+    public static Packet GetTileEntityPacket(BaseModMp basemodmp, int i, int j, int k, int l, int[] ai, float[] af, String[] as) {
+        Packet230ModLoader packet230modloader = new Packet230ModLoader();
+        packet230modloader.modId = "ModLoaderMP".hashCode();
+        packet230modloader.packetType = 1;
+        packet230modloader.k = true;
+        int i1 = ai != null ? ai.length : 0;
+        int[] ai1 = new int[i1 + 5];
+        ai1[0] = basemodmp.getId();
+        ai1[1] = i;
+        ai1[2] = j;
+        ai1[3] = k;
+        ai1[4] = l;
+        if (i1 != 0) {
+            System.arraycopy(ai, 0, ai1, 5, ai.length);
+        }
+
+        packet230modloader.dataInt = ai1;
+        packet230modloader.dataFloat = af;
+        packet230modloader.dataString = as;
+        return packet230modloader;
+    }
+
+    public static void SendTileEntityPacket(TileEntity tileentity) {
+        sendPacketToAll(tileentity.f());
+    }
+
+    public static BaseModMp GetModInstance(Class class1) {
+        for(int i = 0; i < ModLoader.getLoadedMods().size(); ++i) {
+            BaseMod basemod = (BaseMod)ModLoader.getLoadedMods().get(i);
+            if (basemod instanceof BaseModMp) {
+                BaseModMp basemodmp = (BaseModMp)basemod;
+                if (class1.isInstance(basemodmp)) {
+                    return (BaseModMp)ModLoader.getLoadedMods().get(i);
+                }
+            }
+        }
+
+        return null;
+    }
+}
diff --git a/src/main/java/modloader/Packet230ModLoader.java b/src/main/java/modloader/Packet230ModLoader.java
new file mode 100644
index 00000000..d8100544
--- /dev/null
+++ b/src/main/java/modloader/Packet230ModLoader.java
@@ -0,0 +1,149 @@
+package modloader;
+
+import net.minecraft.server.*;
+
+import java.io.DataInputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+public class Packet230ModLoader extends Packet {
+    private static final int MAX_DATA_LENGTH = 65535;
+    public int modId;
+    public int packetType;
+    public int[] dataInt = new int[0];
+    public float[] dataFloat = new float[0];
+    public String[] dataString = new String[0];
+    private static Map playerMap = new HashMap();
+
+    public void a(DataInputStream datainputstream) throws IOException {
+        this.modId = datainputstream.readInt();
+        this.packetType = datainputstream.readInt();
+        int i = datainputstream.readInt();
+        if (i > 65535) {
+            throw new IOException(String.format("Integer data size of %d is higher than the max (%d).", i, 65535));
+        } else {
+            this.dataInt = new int[i];
+
+            int k;
+            for(k = 0; k < i; ++k) {
+                this.dataInt[k] = datainputstream.readInt();
+            }
+
+            k = datainputstream.readInt();
+            if (k > 65535) {
+                throw new IOException(String.format("Float data size of %d is higher than the max (%d).", k, 65535));
+            } else {
+                this.dataFloat = new float[k];
+
+                int i1;
+                for(i1 = 0; i1 < k; ++i1) {
+                    this.dataFloat[i1] = datainputstream.readFloat();
+                }
+
+                i1 = datainputstream.readInt();
+                if (i1 > 65535) {
+                    throw new IOException(String.format("String data size of %d is higher than the max (%d).", i1, 65535));
+                } else {
+                    this.dataString = new String[i1];
+
+                    for(int j1 = 0; j1 < i1; ++j1) {
+                        int k1 = datainputstream.readInt();
+                        if (k1 > 65535) {
+                            throw new IOException(String.format("String length of %d is higher than the max (%d).", k1, 65535));
+                        }
+
+                        byte[] abyte0 = new byte[k1];
+                        datainputstream.read(abyte0, 0, k1);
+                        this.dataString[j1] = new String(abyte0);
+                    }
+
+                }
+            }
+        }
+    }
+
+    public void a(DataOutputStream dataoutputstream) throws IOException {
+        if (this.dataInt != null && this.dataInt.length > 65535) {
+            throw new IOException(String.format("Integer data size of %d is higher than the max (%d).", this.dataInt.length, 65535));
+        } else if (this.dataFloat != null && this.dataFloat.length > 65535) {
+            throw new IOException(String.format("Float data size of %d is higher than the max (%d).", this.dataFloat.length, 65535));
+        } else if (this.dataString != null && this.dataString.length > 65535) {
+            throw new IOException(String.format("String data size of %d is higher than the max (%d).", this.dataString.length, 65535));
+        } else {
+            dataoutputstream.writeInt(this.modId);
+            dataoutputstream.writeInt(this.packetType);
+            int k;
+            if (this.dataInt == null) {
+                dataoutputstream.writeInt(0);
+            } else {
+                dataoutputstream.writeInt(this.dataInt.length);
+
+                for(k = 0; k < this.dataInt.length; ++k) {
+                    dataoutputstream.writeInt(this.dataInt[k]);
+                }
+            }
+
+            if (this.dataFloat == null) {
+                dataoutputstream.writeInt(0);
+            } else {
+                dataoutputstream.writeInt(this.dataFloat.length);
+
+                for(k = 0; k < this.dataFloat.length; ++k) {
+                    dataoutputstream.writeFloat(this.dataFloat[k]);
+                }
+            }
+
+            if (this.dataString == null) {
+                dataoutputstream.writeInt(0);
+            } else {
+                dataoutputstream.writeInt(this.dataString.length);
+
+                for(k = 0; k < this.dataString.length; ++k) {
+                    if (this.dataString[k].length() > 65535) {
+                        throw new IOException(String.format("String length of %d is higher than the max (%d).", this.dataString[k].length(), 65535));
+                    }
+
+                    dataoutputstream.writeInt(this.dataString[k].length());
+                    dataoutputstream.writeBytes(this.dataString[k]);
+                }
+            }
+
+        }
+    }
+
+    public void a(NetHandler nethandler) {
+        EntityPlayer entityplayermp = null;
+        if (playerMap.containsKey(nethandler)) {
+            entityplayermp = (EntityPlayer)playerMap.get(nethandler);
+        } else if (nethandler instanceof NetServerHandler) {
+            try {
+                entityplayermp = (EntityPlayer)ModLoader.getPrivateValue(NetServerHandler.class, nethandler, 4);
+            } catch (NoSuchFieldException var4) {
+                System.out.println("Error getting player from NetServerHandler.");
+                var4.printStackTrace();
+            }
+        }
+
+        ModLoaderMp.HandleAllPackets(this, entityplayermp);
+    }
+
+    public int a() {
+        int i = 1;
+        i = i + 1;
+        ++i;
+        i += this.dataInt != null ? this.dataInt.length * 32 : 0;
+        ++i;
+        i += this.dataFloat != null ? this.dataFloat.length * 32 : 0;
+        ++i;
+        if (this.dataString != null) {
+            for(int j = 0; j < this.dataString.length; ++j) {
+                ++i;
+                i += this.dataString[j].length();
+            }
+        }
+
+        return i;
+    }
+}
diff --git a/src/main/java/modloader/Pair.java b/src/main/java/modloader/Pair.java
new file mode 100644
index 00000000..9cbfc5d9
--- /dev/null
+++ b/src/main/java/modloader/Pair.java
@@ -0,0 +1,34 @@
+package modloader;
+
+public class Pair {
+    private final Object left;
+    private final Object right;
+
+    public Pair(Object obj, Object obj1) {
+        this.left = obj;
+        this.right = obj1;
+    }
+
+    public Object getLeft() {
+        return this.left;
+    }
+
+    public Object getRight() {
+        return this.right;
+    }
+
+    public int hashCode() {
+        return this.left.hashCode() ^ this.right.hashCode();
+    }
+
+    public boolean equals(Object obj) {
+        if (obj == null) {
+            return false;
+        } else if (!(obj instanceof Pair)) {
+            return false;
+        } else {
+            Pair pair = (Pair)obj;
+            return this.left.equals(pair.getLeft()) && this.right.equals(pair.getRight());
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
index 8183374e..6ca4ea1f 100644
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -2,6 +2,7 @@ package net.minecraft.server;
 
 import java.util.ArrayList;
 import java.util.Random;
+import forge.ForgeHooks;
 
 public class Block {
 
@@ -135,6 +136,7 @@ public class Block {
     public final Material material;
     public float frictionFactor;
     private String name;
+    private org.bukkit.Material bukkitMaterial; // Copper
 
     protected Block(int i, Material material) {
         this.bq = true;
@@ -153,6 +155,8 @@ public class Block {
             q[i] = this.a() ? 255 : 0;
             r[i] = !material.blocksLight();
             isTileEntity[i] = false;
+
+            bukkitMaterial = org.bukkit.Material.addBlock(this.id); // Copper
         }
     }
 
@@ -282,8 +286,8 @@ public class Block {
         return this.id;
     }
 
-    public float getDamage(EntityHuman entityhuman) {
-        return this.strength < 0.0F ? 0.0F : (!entityhuman.b(this) ? 1.0F / this.strength / 100.0F : entityhuman.a(this) / this.strength / 30.0F);
+    public float getDamage(EntityHuman entityplayer) {
+        return this.blockStrength(entityplayer, 0); // Copper
     }
 
     public final void g(World world, int i, int j, int k, int l) {
@@ -486,6 +490,11 @@ public class Block {
     public void postPlace(World world, int i, int j, int k, EntityLiving entityliving) {}
 
     public Block a(String s) {
+        // Copper start
+        if (bukkitMaterial.isModded()) {
+            bukkitMaterial.setName(s);
+        }
+        // Copper end
         this.name = "tile." + s;
         return this;
     }
@@ -513,6 +522,57 @@ public class Block {
         return this.material.j();
     }
 
+    // Copper start
+    public boolean isLadder() {
+        return false;
+    }
+
+    public boolean isBlockNormalCube(World world, int i, int j, int k) {
+        return this.material.h() && this.b();
+    }
+
+    public boolean isBlockSolidOnSide(World world, int i, int j, int k, int side) {
+        return this.isBlockNormalCube(world, i, j, k);
+    }
+
+    public boolean isBlockReplaceable(World world, int i, int j, int k) {
+        return false;
+    }
+
+    public boolean isBlockBurning(World world, int i, int j, int k) {
+        return false;
+    }
+
+    public boolean isAirBlock(World world, int i, int j, int k) {
+        return false;
+    }
+
+    public float getHardness(int md) {
+        return this.strength;
+    }
+
+    public float blockStrength(World world, EntityHuman player, int i, int j, int k) {
+        int md = world.getData(i, j, k);
+        return this.blockStrength(player, md);
+    }
+
+    public float blockStrength(EntityHuman player, int md) {
+        return ForgeHooks.blockStrength(this, player, md);
+    }
+
+    public boolean canHarvestBlock(EntityHuman player, int md) {
+        return ForgeHooks.canHarvestBlock(this, player, md);
+    }
+
+    static Class<?> _mthclass$(String s) {
+        try {
+            return Class.forName(s);
+        } catch (ClassNotFoundException var2) {
+            throw new NoClassDefFoundError(var2.getMessage());
+        }
+    }
+    // Copper end
+
     static {
         Item.byId[WOOL.id] = (new ItemCloth(WOOL.id - 256)).a("cloth");
         Item.byId[LOG.id] = (new ItemLog(LOG.id - 256)).a("log");
diff --git a/src/main/java/net/minecraft/server/BlockButton.java b/src/main/java/net/minecraft/server/BlockButton.java
index a5b3c6a2..3951bcd8 100644
--- a/src/main/java/net/minecraft/server/BlockButton.java
+++ b/src/main/java/net/minecraft/server/BlockButton.java
@@ -28,11 +28,29 @@ public class BlockButton extends Block {
     }
 
     public boolean canPlace(World world, int i, int j, int k, int l) {
-        return l == 2 && world.e(i, j, k + 1) ? true : (l == 3 && world.e(i, j, k - 1) ? true : (l == 4 && world.e(i + 1, j, k) ? true : l == 5 && world.e(i - 1, j, k)));
+        // Copper start - e -> isBlockSolidOnSide
+        if (l == 2 && world.isBlockSolidOnSide(i, j, k + 1, 2)) {
+            return true;
+        } else if (l == 3 && world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            return true;
+        } else if (l == 4 && world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            return true;
+        } else {
+            return l == 5 && world.isBlockSolidOnSide(i - 1, j, k, 5);
+        }
+        // Copper end
     }
 
     public boolean canPlace(World world, int i, int j, int k) {
-        return world.e(i - 1, j, k) ? true : (world.e(i + 1, j, k) ? true : (world.e(i, j, k - 1) ? true : world.e(i, j, k + 1)));
+        // Copper start - e -> isBlockSolidOnSide
+        if (world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            return true;
+        } else if (world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            return true;
+        } else {
+            return world.isBlockSolidOnSide(i, j, k - 1, 3) || world.isBlockSolidOnSide(i, j, k + 1, 2);
+        }
+        // Copper end
     }
 
     public void postPlace(World world, int i, int j, int k, int l) {
@@ -40,45 +58,57 @@ public class BlockButton extends Block {
         int j1 = i1 & 8;
 
         i1 &= 7;
-        if (l == 2 && world.e(i, j, k + 1)) {
+        // Copper start - e -> isBlockSolidOnSide
+        if (l == 2 && world.isBlockSolidOnSide(i, j, k + 1, 2)) {
             i1 = 4;
-        } else if (l == 3 && world.e(i, j, k - 1)) {
+        } else if (l == 3 && world.isBlockSolidOnSide(i, j, k - 1, 3)) {
             i1 = 3;
-        } else if (l == 4 && world.e(i + 1, j, k)) {
+        } else if (l == 4 && world.isBlockSolidOnSide(i + 1, j, k, 4)) {
             i1 = 2;
-        } else if (l == 5 && world.e(i - 1, j, k)) {
+        } else if (l == 5 && world.isBlockSolidOnSide(i - 1, j, k, 5)) {
             i1 = 1;
         } else {
             i1 = this.g(world, i, j, k);
         }
-
+        // Copper end
         world.setData(i, j, k, i1 + j1);
     }
 
     private int g(World world, int i, int j, int k) {
-        return world.e(i - 1, j, k) ? 1 : (world.e(i + 1, j, k) ? 2 : (world.e(i, j, k - 1) ? 3 : (world.e(i, j, k + 1) ? 4 : 1)));
+        // Copper start - e -> isBlockSolidOnSide
+        if (world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            return 1;
+        } else if (world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            return 2;
+        } else if (world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            return 3;
+        } else {
+            return !world.isBlockSolidOnSide(i, j, k + 1, 2) ? 1 : 4;
+        }
+        // Copper end
     }
 
     public void doPhysics(World world, int i, int j, int k, int l) {
         if (this.h(world, i, j, k)) {
             int i1 = world.getData(i, j, k) & 7;
             boolean flag = false;
-
-            if (!world.e(i - 1, j, k) && i1 == 1) {
+            // Copper start - e -> isBlockSolidOnSide
+            if (!world.isBlockSolidOnSide(i - 1, j, k, 5) && i1 == 1) {
                 flag = true;
             }
 
-            if (!world.e(i + 1, j, k) && i1 == 2) {
+            if (!world.isBlockSolidOnSide(i + 1, j, k, 4) && i1 == 2) {
                 flag = true;
             }
 
-            if (!world.e(i, j, k - 1) && i1 == 3) {
+            if (!world.isBlockSolidOnSide(i, j, k - 1, 3) && i1 == 3) {
                 flag = true;
             }
 
-            if (!world.e(i, j, k + 1) && i1 == 4) {
+            if (!world.isBlockSolidOnSide(i, j, k + 1, 2) && i1 == 4) {
                 flag = true;
             }
+            // Copper end
 
             if (flag) {
                 this.g(world, i, j, k, world.getData(i, j, k));
diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index a4879897..588fc9fd 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -76,17 +76,18 @@ public class BlockChest extends BlockContainer {
     }
 
     public boolean interact(World world, int i, int j, int k, EntityHuman entityhuman) {
-        Object object = (TileEntityChest) world.getTileEntity(i, j, k);
-
-        if (world.e(i, j + 1, k)) {
+        Object object = world.getTileEntity(i, j, k);
+        // Copper start - e -> isBlockSolidOnSide
+        if (world.isBlockSolidOnSide(i, j + 1, k, 0)) {
             return true;
-        } else if (world.getTypeId(i - 1, j, k) == this.id && world.e(i - 1, j + 1, k)) {
+        } else if (world.getTypeId(i - 1, j, k) == this.id && world.isBlockSolidOnSide(i - 1, j + 1, k, 0)) {
             return true;
-        } else if (world.getTypeId(i + 1, j, k) == this.id && world.e(i + 1, j + 1, k)) {
+        } else if (world.getTypeId(i + 1, j, k) == this.id && world.isBlockSolidOnSide(i + 1, j + 1, k, 0)) {
             return true;
-        } else if (world.getTypeId(i, j, k - 1) == this.id && world.e(i, j + 1, k - 1)) {
+        } else if (world.getTypeId(i, j, k - 1) == this.id && world.isBlockSolidOnSide(i, j + 1, k - 1, 0)) {
             return true;
-        } else if (world.getTypeId(i, j, k + 1) == this.id && world.e(i, j + 1, k + 1)) {
+        } else if (world.getTypeId(i, j, k + 1) == this.id && world.isBlockSolidOnSide(i, j + 1, k + 1, 0)) {
+            // Copper end
             return true;
         } else {
             if (world.getTypeId(i - 1, j, k) == this.id) {
diff --git a/src/main/java/net/minecraft/server/BlockDispenser.java b/src/main/java/net/minecraft/server/BlockDispenser.java
index ff834842..439dea74 100644
--- a/src/main/java/net/minecraft/server/BlockDispenser.java
+++ b/src/main/java/net/minecraft/server/BlockDispenser.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import java.util.Random;
 
 // CraftBukkit start
+import modloader.ModLoader;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.block.BlockDispenseEvent;
 import org.bukkit.util.Vector;
@@ -127,6 +128,9 @@ public class BlockDispenser extends BlockContainer {
                 return;
             }
 
+            if(ModLoader.DispenseEntity(world, d0, d1, d2, b0, b1, itemstack))
+                return;
+
             // Actually remove the item
             tileentitydispenser.splitStack(dispenseSlot, 1);
 
diff --git a/src/main/java/net/minecraft/server/BlockDoor.java b/src/main/java/net/minecraft/server/BlockDoor.java
index 1308051e..adedcfec 100644
--- a/src/main/java/net/minecraft/server/BlockDoor.java
+++ b/src/main/java/net/minecraft/server/BlockDoor.java
@@ -150,7 +150,7 @@ public class BlockDoor extends Block {
                 flag = true;
             }
 
-            if (!world.e(i, j - 1, k)) {
+            if (!world.isBlockSolidOnSide(i, j - 1, k, 1)) { // Copper
                 world.setTypeId(i, j, k, 0);
                 flag = true;
                 if (world.getTypeId(i, j + 1, k) == this.id) {
@@ -198,7 +198,11 @@ public class BlockDoor extends Block {
     }
 
     public boolean canPlace(World world, int i, int j, int k) {
-        return j >= 127 ? false : world.e(i, j - 1, k) && super.canPlace(world, i, j, k) && super.canPlace(world, i, j + 1, k);
+        if (j >= 127) {
+            return false;
+        } else {
+            return world.isBlockSolidOnSide(i, j - 1, k, 1) && super.canPlace(world, i, j, k) && super.canPlace(world, i, j + 1, k); // Copper - e -> isBlockSolidOnSide
+        }
     }
 
     public static boolean e(int i) {
diff --git a/src/main/java/net/minecraft/server/BlockLadder.java b/src/main/java/net/minecraft/server/BlockLadder.java
new file mode 100644
index 00000000..8be9deed
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockLadder.java
@@ -0,0 +1,114 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockLadder extends Block {
+
+    protected BlockLadder(int i, int j) {
+        super(i, j, Material.ORIENTABLE);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        int l = world.getData(i, j, k);
+        float f = 0.125F;
+
+        if (l == 2) {
+            this.a(0.0F, 0.0F, 1.0F - f, 1.0F, 1.0F, 1.0F);
+        }
+
+        if (l == 3) {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 1.0F, f);
+        }
+
+        if (l == 4) {
+            this.a(1.0F - f, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F);
+        }
+
+        if (l == 5) {
+            this.a(0.0F, 0.0F, 0.0F, f, 1.0F, 1.0F);
+        }
+
+        return super.e(world, i, j, k);
+    }
+
+    // Copper start
+    public boolean isLadder() {
+        return true;
+    }
+    // Copper end
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    // Copper start - e -> isBlockSolidOnSide
+    public boolean canPlace(World world, int i, int j, int k) {
+        if (world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            return true;
+        } else if (world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            return true;
+        } else {
+            return world.isBlockSolidOnSide(i, j, k - 1, 3) || world.isBlockSolidOnSide(i, j, k + 1, 2);
+        }
+    }
+    // Copper end
+
+    public void postPlace(World world, int i, int j, int k, int l) {
+        int i1 = world.getData(i, j, k);
+        // Copper start - e -> isBlockSolidOnSide
+        if ((i1 == 0 || l == 2) && world.isBlockSolidOnSide(i, j, k + 1, 2)) {
+            i1 = 2;
+        }
+
+        if ((i1 == 0 || l == 3) && world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            i1 = 3;
+        }
+
+        if ((i1 == 0 || l == 4) && world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            i1 = 4;
+        }
+
+        if ((i1 == 0 || l == 5) && world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            i1 = 5;
+        }
+        // Copper end
+
+        world.setData(i, j, k, i1);
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        int i1 = world.getData(i, j, k);
+        boolean flag = false;
+        if (i1 == 2 && world.isBlockSolidOnSide(i, j, k + 1, 2)) {
+            flag = true;
+        }
+
+        if (i1 == 3 && world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            flag = true;
+        }
+
+        if (i1 == 4 && world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            flag = true;
+        }
+
+        if (i1 == 5 && world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            flag = true;
+        }
+        // Copper end
+
+        if (!flag) {
+            this.g(world, i, j, k, i1);
+            world.setTypeId(i, j, k, 0);
+        }
+
+        super.doPhysics(world, i, j, k, l);
+    }
+
+    public int a(Random random) {
+        return 1;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockLever.java b/src/main/java/net/minecraft/server/BlockLever.java
index c7e205ae..964f66bb 100644
--- a/src/main/java/net/minecraft/server/BlockLever.java
+++ b/src/main/java/net/minecraft/server/BlockLever.java
@@ -21,11 +21,33 @@ public class BlockLever extends Block {
     }
 
     public boolean canPlace(World world, int i, int j, int k, int l) {
-        return l == 1 && world.e(i, j - 1, k) ? true : (l == 2 && world.e(i, j, k + 1) ? true : (l == 3 && world.e(i, j, k - 1) ? true : (l == 4 && world.e(i + 1, j, k) ? true : l == 5 && world.e(i - 1, j, k))));
+        // Copper start - e -> isBlockSolidOnSide
+        if (l == 1 && world.isBlockSolidOnSide(i, j - 1, k, 1)) {
+            return true;
+        } else if (l == 2 && world.isBlockSolidOnSide(i, j, k + 1, 2)) {
+            return true;
+        } else if (l == 3 && world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            return true;
+        } else if (l == 4 && world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            return true;
+        } else {
+            return l == 5 && world.isBlockSolidOnSide(i - 1, j, k, 5);
+        }
+        // Copper end
     }
 
     public boolean canPlace(World world, int i, int j, int k) {
-        return world.e(i - 1, j, k) ? true : (world.e(i + 1, j, k) ? true : (world.e(i, j, k - 1) ? true : (world.e(i, j, k + 1) ? true : world.e(i, j - 1, k))));
+        // Copper start - e -> isBlockSolidOnSide
+        if (world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            return true;
+        } else if (world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            return true;
+        } else if (world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            return true;
+        } else {
+            return world.isBlockSolidOnSide(i, j, k + 1, 2) || world.isBlockSolidOnSide(i, j - 1, k, 1);
+        }
+        // Copper end
     }
 
     public void postPlace(World world, int i, int j, int k, int l) {
@@ -34,25 +56,27 @@ public class BlockLever extends Block {
 
         i1 &= 7;
         i1 = -1;
-        if (l == 1 && world.e(i, j - 1, k)) {
+        // Copper start - e -> isBlockSolidOnSide
+        if (l == 1 && world.isBlockSolidOnSide(i, j - 1, k, 1)) {
             i1 = 5 + world.random.nextInt(2);
         }
 
-        if (l == 2 && world.e(i, j, k + 1)) {
+        if (l == 2 && world.isBlockSolidOnSide(i, j, k + 1, 2)) {
             i1 = 4;
         }
 
-        if (l == 3 && world.e(i, j, k - 1)) {
+        if (l == 3 && world.isBlockSolidOnSide(i, j, k - 1, 3)) {
             i1 = 3;
         }
 
-        if (l == 4 && world.e(i + 1, j, k)) {
+        if (l == 4 && world.isBlockSolidOnSide(i + 1, j, k, 4)) {
             i1 = 2;
         }
 
-        if (l == 5 && world.e(i - 1, j, k)) {
+        if (l == 5 && world.isBlockSolidOnSide(i - 1, j, k, 5)) {
             i1 = 1;
         }
+        // Copper end
 
         if (i1 == -1) {
             this.g(world, i, j, k, world.getData(i, j, k));
@@ -66,30 +90,31 @@ public class BlockLever extends Block {
         if (this.g(world, i, j, k)) {
             int i1 = world.getData(i, j, k) & 7;
             boolean flag = false;
-
-            if (!world.e(i - 1, j, k) && i1 == 1) {
+            // Copper start
+            if (!world.isBlockSolidOnSide(i - 1, j, k, 5) && i1 == 1) {
                 flag = true;
             }
 
-            if (!world.e(i + 1, j, k) && i1 == 2) {
+            if (!world.isBlockSolidOnSide(i + 1, j, k, 4) && i1 == 2) {
                 flag = true;
             }
 
-            if (!world.e(i, j, k - 1) && i1 == 3) {
+            if (!world.isBlockSolidOnSide(i, j, k - 1, 3) && i1 == 3) {
                 flag = true;
             }
 
-            if (!world.e(i, j, k + 1) && i1 == 4) {
+            if (!world.isBlockSolidOnSide(i, j, k + 1, 2) && i1 == 4) {
                 flag = true;
             }
 
-            if (!world.e(i, j - 1, k) && i1 == 5) {
+            if (!world.isBlockSolidOnSide(i, j - 1, k, 1) && i1 == 5) {
                 flag = true;
             }
 
-            if (!world.e(i, j - 1, k) && i1 == 6) {
+            if (!world.isBlockSolidOnSide(i, j - 1, k, 1) && i1 == 6) {
                 flag = true;
             }
+            // Copper end
 
             if (flag) {
                 this.g(world, i, j, k, world.getData(i, j, k));
diff --git a/src/main/java/net/minecraft/server/BlockMinecartTrack.java b/src/main/java/net/minecraft/server/BlockMinecartTrack.java
new file mode 100644
index 00000000..d557405e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockMinecartTrack.java
@@ -0,0 +1,257 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockMinecartTrack extends Block {
+
+    private final boolean a;
+
+    public static final boolean g(World world, int i, int j, int k) {
+        int l = world.getTypeId(i, j, k);
+        return Block.byId[l] instanceof BlockMinecartTrack;  // Copper
+    }
+
+    public static final boolean c(int i) {
+        return Block.byId[i] instanceof BlockMinecartTrack;  // Copper
+    }
+
+    protected BlockMinecartTrack(int i, int j, boolean flag) {
+        super(i, j, Material.ORIENTABLE);
+        this.a = flag;
+        this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+    }
+
+    public boolean f() {
+        return this.a;
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return null;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public MovingObjectPosition a(World world, int i, int j, int k, Vec3D vec3d, Vec3D vec3d1) {
+        this.a(world, i, j, k);
+        return super.a(world, i, j, k, vec3d, vec3d1);
+    }
+
+    public void a(IBlockAccess iblockaccess, int i, int j, int k) {
+        int l = iblockaccess.getData(i, j, k);
+
+        if (l >= 2 && l <= 5) {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.625F, 1.0F);
+        } else {
+            this.a(0.0F, 0.0F, 0.0F, 1.0F, 0.125F, 1.0F);
+        }
+    }
+
+    public int a(int i, int j) {
+        if (this.a) {
+            if (this.id == Block.GOLDEN_RAIL.id && (j & 8) == 0) {
+                return this.textureId - 16;
+            }
+        } else if (j >= 6) {
+            return this.textureId - 16;
+        }
+
+        return this.textureId;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    public int a(Random random) {
+        return 1;
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        return world.isBlockSolidOnSide(i, j - 1, k, 1);  // Copper - e -> isBlockSolidOnSide
+    }
+
+    public void c(World world, int i, int j, int k) {
+        if (!world.isStatic) {
+            this.a(world, i, j, k, true);
+        }
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (!world.isStatic) {
+            int i1 = world.getData(i, j, k);
+            int j1 = i1;
+
+            if (this.a) {
+                j1 = i1 & 7;
+            }
+
+            boolean flag = false;
+            if (!world.isBlockSolidOnSide(i, j - 1, k, 1)) {
+                flag = true;
+            }
+
+            if (j1 == 2 && !world.isBlockSolidOnSide(i + 1, j, k, 1)) {
+                flag = true;
+            }
+
+            if (j1 == 3 && !world.isBlockSolidOnSide(i - 1, j, k, 1)) {
+                flag = true;
+            }
+
+            if (j1 == 4 && !world.isBlockSolidOnSide(i, j, k - 1, 1)) {
+                flag = true;
+            }
+
+            if (j1 == 5 && !world.isBlockSolidOnSide(i, j, k + 1, 1)) {
+                flag = true;
+            }
+            // Copper end
+
+            if (flag) {
+                this.g(world, i, j, k, world.getData(i, j, k));
+                world.setTypeId(i, j, k, 0);
+            } else if (this.id == Block.GOLDEN_RAIL.id) {
+                boolean flag1 = world.isBlockIndirectlyPowered(i, j, k) || world.isBlockIndirectlyPowered(i, j + 1, k);
+
+                flag1 = flag1 || this.a(world, i, j, k, i1, true, 0) || this.a(world, i, j, k, i1, false, 0);
+                boolean flag2 = false;
+
+                if (flag1 && (i1 & 8) == 0) {
+                    world.setData(i, j, k, j1 | 8);
+                    flag2 = true;
+                } else if (!flag1 && (i1 & 8) != 0) {
+                    world.setData(i, j, k, j1);
+                    flag2 = true;
+                }
+
+                if (flag2) {
+                    world.applyPhysics(i, j - 1, k, this.id);
+                    if (j1 == 2 || j1 == 3 || j1 == 4 || j1 == 5) {
+                        world.applyPhysics(i, j + 1, k, this.id);
+                    }
+                }
+            } else if (l > 0 && Block.byId[l].isPowerSource() && !this.a && MinecartTrackLogic.a(new MinecartTrackLogic(this, world, i, j, k)) == 3) {
+                this.a(world, i, j, k, false);
+            }
+        }
+    }
+
+    private void a(World world, int i, int j, int k, boolean flag) {
+        if (!world.isStatic) {
+            (new MinecartTrackLogic(this, world, i, j, k)).a(world.isBlockIndirectlyPowered(i, j, k), flag);
+        }
+    }
+
+    private boolean a(World world, int i, int j, int k, int l, boolean flag, int i1) {
+        if (i1 >= 8) {
+            return false;
+        } else {
+            int j1 = l & 7;
+            boolean flag1 = true;
+
+            switch (j1) {
+            case 0:
+                if (flag) {
+                    ++k;
+                } else {
+                    --k;
+                }
+                break;
+
+            case 1:
+                if (flag) {
+                    --i;
+                } else {
+                    ++i;
+                }
+                break;
+
+            case 2:
+                if (flag) {
+                    --i;
+                } else {
+                    ++i;
+                    ++j;
+                    flag1 = false;
+                }
+
+                j1 = 1;
+                break;
+
+            case 3:
+                if (flag) {
+                    --i;
+                    ++j;
+                    flag1 = false;
+                } else {
+                    ++i;
+                }
+
+                j1 = 1;
+                break;
+
+            case 4:
+                if (flag) {
+                    ++k;
+                } else {
+                    --k;
+                    ++j;
+                    flag1 = false;
+                }
+
+                j1 = 0;
+                break;
+
+            case 5:
+                if (flag) {
+                    ++k;
+                    ++j;
+                    flag1 = false;
+                } else {
+                    --k;
+                }
+
+                j1 = 0;
+            }
+
+            return this.a(world, i, j, k, flag, i1, j1) ? true : flag1 && this.a(world, i, j - 1, k, flag, i1, j1);
+        }
+    }
+
+    private boolean a(World world, int i, int j, int k, boolean flag, int l, int i1) {
+        int j1 = world.getTypeId(i, j, k);
+
+        if (j1 == Block.GOLDEN_RAIL.id) {
+            int k1 = world.getData(i, j, k);
+            int l1 = k1 & 7;
+
+            if (i1 == 1 && (l1 == 0 || l1 == 4 || l1 == 5)) {
+                return false;
+            }
+
+            if (i1 == 0 && (l1 == 1 || l1 == 2 || l1 == 3)) {
+                return false;
+            }
+
+            if ((k1 & 8) != 0) {
+                if (!world.isBlockIndirectlyPowered(i, j, k) && !world.isBlockIndirectlyPowered(i, j + 1, k)) {
+                    return this.a(world, i, j, k, k1, flag, l + 1);
+                }
+
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    public int e() {
+        return 0;
+    }
+
+    static boolean a(BlockMinecartTrack blockminecarttrack) {
+        return blockminecarttrack.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockPressurePlate.java b/src/main/java/net/minecraft/server/BlockPressurePlate.java
index f9daa00f..e2fb3e79 100644
--- a/src/main/java/net/minecraft/server/BlockPressurePlate.java
+++ b/src/main/java/net/minecraft/server/BlockPressurePlate.java
@@ -39,15 +39,14 @@ public class BlockPressurePlate extends Block {
     }
 
     public boolean canPlace(World world, int i, int j, int k) {
-        return world.e(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k, 1); // Copper - e -> isBlockSolidOnSide
     }
 
     public void c(World world, int i, int j, int k) {}
 
     public void doPhysics(World world, int i, int j, int k, int l) {
         boolean flag = false;
-
-        if (!world.e(i, j - 1, k)) {
+        if (!world.isBlockSolidOnSide(i, j - 1, k, 1)) { // Copper - e -> isBlockSolidOnSide
             flag = true;
         }
 
diff --git a/src/main/java/net/minecraft/server/BlockRedstoneWire.java b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
index af50818a..c51a454e 100644
--- a/src/main/java/net/minecraft/server/BlockRedstoneWire.java
+++ b/src/main/java/net/minecraft/server/BlockRedstoneWire.java
@@ -5,6 +5,7 @@ import java.util.HashSet;
 import java.util.Random;
 import java.util.Set;
 
+import forge.IConnectRedstone;
 import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class BlockRedstoneWire extends Block {
@@ -34,7 +35,7 @@ public class BlockRedstoneWire extends Block {
     }
 
     public boolean canPlace(World world, int i, int j, int k) {
-        return world.e(i, j - 1, k);
+        return world.isBlockSolidOnSide(i, j - 1, k, 1); // Copper - e -> isBlockSolidOnSide
     }
 
     private void g(World world, int i, int j, int k) {
@@ -344,6 +345,11 @@ public class BlockRedstoneWire extends Block {
             return true;
         } else if (i1 == 0) {
             return false;
+            // Copper start
+        } else if (Block.byId[i1] instanceof IConnectRedstone) {
+            IConnectRedstone icr = (IConnectRedstone)Block.byId[i1];
+            return icr.canConnectRedstone(iblockaccess, i, j, k, l);
+            // Copper end
         } else if (Block.byId[i1].isPowerSource()) {
             return true;
         } else if (i1 != Block.DIODE_OFF.id && i1 != Block.DIODE_ON.id) {
diff --git a/src/main/java/net/minecraft/server/BlockTorch.java b/src/main/java/net/minecraft/server/BlockTorch.java
new file mode 100644
index 00000000..c3a0751d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockTorch.java
@@ -0,0 +1,157 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockTorch extends Block {
+
+    protected BlockTorch(int i, int j) {
+        super(i, j, Material.ORIENTABLE);
+        this.a(true);
+    }
+
+    public AxisAlignedBB e(World world, int i, int j, int k) {
+        return null;
+    }
+
+    public boolean a() {
+        return false;
+    }
+
+    public boolean b() {
+        return false;
+    }
+
+    private boolean g(World world, int i, int j, int k) {
+        return world.isBlockSolidOnSide(i, j, k, 1) || world.getTypeId(i, j, k) == Block.FENCE.id; // Copper - e -> isBlockSolidOnSide
+    }
+
+    public boolean canPlace(World world, int i, int j, int k) {
+        // Copper start - e -> isBlockSolidOnSide
+        if (world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            return true;
+        } else if (world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            return true;
+        } else if (world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            return true;
+        } else {
+            return world.isBlockSolidOnSide(i, j, k + 1, 2) || this.g(world, i, j - 1, k);
+        }
+        // Copper end
+    }
+
+    public void postPlace(World world, int i, int j, int k, int l) {
+        int i1 = world.getData(i, j, k);
+
+        if (l == 1 && this.g(world, i, j - 1, k)) {
+            i1 = 5;
+        }
+
+        // Copper start - e -> isBlockSolidOnSide
+        if (l == 2 && world.isBlockSolidOnSide(i, j, k + 1, 2)) {
+            i1 = 4;
+        }
+
+        if (l == 3 && world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            i1 = 3;
+        }
+
+        if (l == 4 && world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            i1 = 2;
+        }
+
+        if (l == 5 && world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            i1 = 1;
+        }
+        // Copper end
+
+        world.setData(i, j, k, i1);
+    }
+
+    public void a(World world, int i, int j, int k, Random random) {
+        super.a(world, i, j, k, random);
+        if (world.getData(i, j, k) == 0) {
+            this.c(world, i, j, k);
+        }
+    }
+
+    public void c(World world, int i, int j, int k) {
+        // Copper start - e -> isBlockSolidOnSide
+        if (world.isBlockSolidOnSide(i - 1, j, k, 5)) {
+            world.setData(i, j, k, 1);
+        } else if (world.isBlockSolidOnSide(i + 1, j, k, 4)) {
+            world.setData(i, j, k, 2);
+        } else if (world.isBlockSolidOnSide(i, j, k - 1, 3)) {
+            world.setData(i, j, k, 3);
+        } else if (world.isBlockSolidOnSide(i, j, k + 1, 2)) {
+            world.setData(i, j, k, 4);
+        } else if (this.g(world, i, j - 1, k)) {
+            world.setData(i, j, k, 5);
+        }
+        // Copper end
+
+        this.h(world, i, j, k);
+    }
+
+    public void doPhysics(World world, int i, int j, int k, int l) {
+        if (this.h(world, i, j, k)) {
+            int i1 = world.getData(i, j, k);
+            boolean flag = false;
+            // Copper start - e -> isBlockSolidOnSide
+            if (!world.isBlockSolidOnSide(i - 1, j, k, 5) && i1 == 1) {
+                flag = true;
+            }
+
+            if (!world.isBlockSolidOnSide(i + 1, j, k, 4) && i1 == 2) {
+                flag = true;
+            }
+
+            if (!world.isBlockSolidOnSide(i, j, k - 1, 3) && i1 == 3) {
+                flag = true;
+            }
+
+            if (!world.isBlockSolidOnSide(i, j, k + 1, 2) && i1 == 4) {
+                flag = true;
+            }
+            // Copper end
+
+            if (!this.g(world, i, j - 1, k) && i1 == 5) {
+                flag = true;
+            }
+
+            if (flag) {
+                this.g(world, i, j, k, world.getData(i, j, k));
+                world.setTypeId(i, j, k, 0);
+            }
+        }
+    }
+
+    private boolean h(World world, int i, int j, int k) {
+        if (!this.canPlace(world, i, j, k)) {
+            this.g(world, i, j, k, world.getData(i, j, k));
+            world.setTypeId(i, j, k, 0);
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    public MovingObjectPosition a(World world, int i, int j, int k, Vec3D vec3d, Vec3D vec3d1) {
+        int l = world.getData(i, j, k) & 7;
+        float f = 0.15F;
+
+        if (l == 1) {
+            this.a(0.0F, 0.2F, 0.5F - f, f * 2.0F, 0.8F, 0.5F + f);
+        } else if (l == 2) {
+            this.a(1.0F - f * 2.0F, 0.2F, 0.5F - f, 1.0F, 0.8F, 0.5F + f);
+        } else if (l == 3) {
+            this.a(0.5F - f, 0.2F, 0.0F, 0.5F + f, 0.8F, f * 2.0F);
+        } else if (l == 4) {
+            this.a(0.5F - f, 0.2F, 1.0F - f * 2.0F, 0.5F + f, 0.8F, 1.0F);
+        } else {
+            f = 0.1F;
+            this.a(0.5F - f, 0.0F, 0.5F - f, 0.5F + f, 0.6F, 0.5F + f);
+        }
+
+        return super.a(world, i, j, k, vec3d, vec3d1);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/BlockTrapdoor.java b/src/main/java/net/minecraft/server/BlockTrapdoor.java
index c8ea976f..54aad34f 100644
--- a/src/main/java/net/minecraft/server/BlockTrapdoor.java
+++ b/src/main/java/net/minecraft/server/BlockTrapdoor.java
@@ -3,6 +3,7 @@ package net.minecraft.server;
 import org.bukkit.event.block.BlockRedstoneEvent; // CraftBukkit
 
 public class BlockTrapdoor extends Block {
+    public static boolean disableValidation = false; // Copper
 
     protected BlockTrapdoor(int i, Material material) {
         super(i, material);
@@ -105,7 +106,7 @@ public class BlockTrapdoor extends Block {
                 --j1;
             }
 
-            if (!world.e(j1, j, k1)) {
+            if (!disableValidation && !world.isBlockSolidOnSide(j1, j, k1, (i1 & 3) + 2)) { // Copper - e -> isBlockSolidOnSide
                 world.setTypeId(i, j, k, 0);
                 this.g(world, i, j, k, i1);
             }
@@ -179,7 +180,7 @@ public class BlockTrapdoor extends Block {
                 --i;
             }
 
-            return world.e(i, j, k);
+            return world.isBlockSolidOnSide(i, j, k, l); // Copper - e -> isBlockSolidOnSide
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index e44b9378..58ab0be8 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import forge.IOverrideReplace;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Iterator;
@@ -239,6 +240,14 @@ public class Chunk {
         } else {
             int l1 = this.x * 16 + i;
             int i2 = this.z * 16 + k;
+            // Copper start
+            if (Block.byId[k1] instanceof IOverrideReplace) {
+                IOverrideReplace iovr = (IOverrideReplace)Block.byId[k1];
+                if (!iovr.canReplaceBlock(this.world, l1, j, i2, l)) {
+                    return iovr.getReplacedSuccess();
+                }
+            }
+            // Copper end
 
             this.b[i << 11 | k << 7 | j] = (byte) (b0 & 255);
             if (k1 != 0 && !this.world.isStatic) {
@@ -280,6 +289,12 @@ public class Chunk {
         } else {
             int k1 = this.x * 16 + i;
             int l1 = this.z * 16 + k;
+            if (Block.byId[j1] instanceof IOverrideReplace) {
+                IOverrideReplace iovr = (IOverrideReplace)Block.byId[j1];
+                if (!iovr.canReplaceBlock(this.world, k1, j, l1, l)) {
+                    return iovr.getReplacedSuccess();
+                }
+            }
 
             this.b[i << 11 | k << 7 | j] = (byte) (b0 & 255);
             if (j1 != 0) {
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index b39098b4..eff68332 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -10,6 +10,8 @@ import java.util.Set;
 
 // CraftBukkit start
 import java.util.Random;
+
+import modloader.ModLoader;
 import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.craftbukkit.util.LongHashset;
 import org.bukkit.craftbukkit.util.LongHashtable;
@@ -241,7 +243,7 @@ public class ChunkProviderServer implements IChunkProvider {
                 BlockSand.instaFall = false;
                 this.world.getServer().getPluginManager().callEvent(new ChunkPopulateEvent(chunk.bukkitChunk));
                 // CraftBukkit end
-
+                ModLoader.PopulateChunk(this.chunkProvider, i << 4, j << 4, this.world); // Copper
                 chunk.f();
             }
         }
diff --git a/src/main/java/net/minecraft/server/ConsoleCommandHandler.java b/src/main/java/net/minecraft/server/ConsoleCommandHandler.java
index ea6338a9..994cf34d 100644
--- a/src/main/java/net/minecraft/server/ConsoleCommandHandler.java
+++ b/src/main/java/net/minecraft/server/ConsoleCommandHandler.java
@@ -5,6 +5,7 @@ import java.util.Set;
 import java.util.logging.Logger;
 
 // CraftBukkit start
+import modloader.ModLoaderMp;
 import org.bukkit.craftbukkit.command.ServerCommandListener;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 // CraftBukkit end
@@ -283,7 +284,7 @@ public class ConsoleCommandHandler {
                                         }
                                     } else if (s.toLowerCase().startsWith("whitelist ")) {
                                         this.a(s1, s, icommandlistener);
-                                    } else {
+                                    } else if (!ModLoaderMp.handleCommand(s, s1, icommandlistener, this)) { // Copper
                                         icommandlistener.sendMessage("Unknown console command. Type \"help\" for help."); // CraftBukkit
                                         return false; // CraftBukkit
                                     }
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index a57fbf77..a5b03b18 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -4,6 +4,9 @@ import java.util.Iterator;
 import java.util.List;
 
 // CraftBukkit start
+import forge.ArmorProperties;
+import forge.ForgeHooks;
+import forge.ISpecialArmor;
 import org.bukkit.craftbukkit.entity.CraftItem;
 import org.bukkit.craftbukkit.TrigMath;
 import org.bukkit.entity.Player;
@@ -322,6 +325,27 @@ public abstract class EntityHuman extends EntityLiving {
         return f;
     }
 
+    // Copper start
+    public float getCurrentPlayerStrVsBlock(Block block, int md) {
+        float f = 1.0F;
+        ItemStack ist = this.inventory.getItemInHand();
+        if (ist != null) {
+            f = ist.getItem().getStrVsBlock(ist, block, md);
+        }
+
+        if (this.a(Material.WATER)) {
+            f /= 5.0F;
+        }
+
+        if (!this.onGround) {
+            f /= 5.0F;
+        }
+
+        return f;
+    }
+    // Copper end
+
+
     public boolean b(Block block) {
         return this.inventory.b(block);
     }
@@ -487,15 +511,33 @@ public abstract class EntityHuman extends EntityLiving {
         }
     }
 
+    // Copper start
     protected void c(int i) {
-        int j = 25 - this.inventory.g();
-        int k = i * j + this.d;
+        boolean doRegularComputation = true;
+        int initialDamage = i;
+        ItemStack[] arr$ = this.inventory.armor;
+        int k = arr$.length;
+
+        for(int i$ = 0; i$ < k; ++i$) {
+            ItemStack stack = arr$[i$];
+            if (stack != null && stack.getItem() instanceof ISpecialArmor) {
+                ISpecialArmor armor = (ISpecialArmor)stack.getItem();
+                ArmorProperties props = armor.getProperties(this, initialDamage, i);
+                i -= props.damageRemove;
+                doRegularComputation = doRegularComputation && props.allowRegularComputation;
+            }
+        }
 
-        this.inventory.c(i);
-        i = k / 25;
-        this.d = k % 25;
+        if (doRegularComputation) {
+            int j = 25 - this.inventory.g();
+            k = i * j + this.d;
+            this.inventory.c(i);
+            i = k / 25;
+            this.d = k % 25;
+        }
         super.c(i);
     }
+    // Copper end
 
     public void a(TileEntityFurnace tileentityfurnace) {}
 
@@ -522,9 +564,13 @@ public abstract class EntityHuman extends EntityLiving {
         return this.inventory.getItemInHand();
     }
 
+    // Copper start
     public void H() {
-        this.inventory.setItem(this.inventory.itemInHandIndex, (ItemStack) null);
+        ItemStack orig = this.inventory.getItemInHand();
+        this.inventory.setItem(this.inventory.itemInHandIndex, null);
+        ForgeHooks.onDestroyCurrentItem(this, orig);
     }
+    // Copper end
 
     public double I() {
         return (double) (this.height - 0.5F);
@@ -601,6 +647,12 @@ public abstract class EntityHuman extends EntityLiving {
     }
 
     public EnumBedError a(int i, int j, int k) {
+        // Copper start
+        EnumBedError customSleep = ForgeHooks.sleepInBedAt(this, i, j, k);
+        if (customSleep != null) {
+            return customSleep;
+        }
+        // Copper end
         if (!this.world.isStatic) {
             if (this.isSleeping() || !this.T()) {
                 return EnumBedError.OTHER_PROBLEM;
diff --git a/src/main/java/net/minecraft/server/EntityTracker.java b/src/main/java/net/minecraft/server/EntityTracker.java
index db1bcc74..6aaae9ea 100644
--- a/src/main/java/net/minecraft/server/EntityTracker.java
+++ b/src/main/java/net/minecraft/server/EntityTracker.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import modloader.ModLoaderMp;
+
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -60,6 +62,8 @@ public class EntityTracker {
         } else if (entity instanceof EntityPainting) {
             this.a(entity, 160, Integer.MAX_VALUE, false);
         }
+
+        ModLoaderMp.HandleEntityTrackers(this, entity); // Copper
     }
 
     public void a(Entity entity, int i, int j) {
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 20198358..833169d4 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -1,5 +1,8 @@
 package net.minecraft.server;
 
+import modloader.*;
+
+import java.lang.reflect.Field;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -223,8 +226,39 @@ public class EntityTrackerEntry {
     }
 
     private Packet b() {
-        if (this.tracker instanceof EntityItem) {
-            EntityItem entityitem = (EntityItem) this.tracker;
+        // Copper start
+        EntityTrackerEntry2 entitytrackerentry2 = ModLoaderMp.HandleEntityTrackerEntries(this.tracker);
+        if (entitytrackerentry2 != null) {
+            try {
+                if (this.tracker instanceof ISpawnable) {
+                    Packet230ModLoader packet = ((ISpawnable)this.tracker).getSpawnPacket();
+                    packet.modId = "Spawn".hashCode();
+                    if (entitytrackerentry2.entityId > 127) {
+                        packet.packetType = entitytrackerentry2.entityId - 256;
+                    } else {
+                        packet.packetType = entitytrackerentry2.entityId;
+                    }
+
+                    return packet;
+                } else if (!entitytrackerentry2.entityHasOwner) {
+                    return new Packet23VehicleSpawn(this.tracker, entitytrackerentry2.entityId);
+                } else {
+                    Field field = this.tracker.getClass().getField("owner");
+                    if (Entity.class.isAssignableFrom(field.getType())) {
+                        Entity entity = (Entity)field.get(this.tracker);
+                        return new Packet23VehicleSpawn(this.tracker, entitytrackerentry2.entityId, entity == null ? this.tracker.id : entity.id);
+                    } else {
+                        throw new Exception(String.format("Entity's owner field must be of type Entity, but it is of type %s.", field.getType()));
+                    }
+                }
+            } catch (Exception var4) {
+                ModLoader.getLogger().throwing("EntityTrackerEntry", "getSpawnPacket", var4);
+                ModLoader.ThrowException(String.format("Error sending spawn packet for entity of type %s.", this.tracker.getClass()), var4);
+                return null;
+            }
+            // Copper end
+        } else if (this.tracker instanceof EntityItem) {
+            EntityItem entityitem = (EntityItem)this.tracker;
             Packet21PickupSpawn packet21pickupspawn = new Packet21PickupSpawn(entityitem);
 
             entityitem.locX = (double) packet21pickupspawn.b / 32.0D;
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index 0903af4a..aa1fbc73 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -1,5 +1,6 @@
 package net.minecraft.server;
 
+import forge.ISpecialResistance;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
@@ -74,7 +75,14 @@ public class Explosion {
                             int k1 = this.world.getTypeId(l, i1, j1);
 
                             if (k1 > 0) {
-                                f1 -= (Block.byId[k1].a(this.source) + 0.3F) * f2;
+                                // Copper start
+                                if (Block.byId[k1] instanceof ISpecialResistance) {
+                                    ISpecialResistance isr = (ISpecialResistance)Block.byId[k1];
+                                    f1 -= (isr.getSpecialExplosionResistance(this.world, l, i1, j1, this.posX, this.posY, this.posZ, this.source) + 0.3F) * f2;
+                                } else {
+                                    f1 -= (Block.byId[k1].a(this.source) + 0.3F) * f2;
+                                }
+                                // Copper end
                             }
 
                             if (f1 > 0.0F) {
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
new file mode 100644
index 00000000..694c53ff
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -0,0 +1,273 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class Item {
+
+    protected static Random b = new Random();
+    public static Item[] byId = new Item[32000];
+    public static Item IRON_SPADE = (new ItemSpade(0, EnumToolMaterial.IRON)).a(2, 5).a("shovelIron");
+    public static Item IRON_PICKAXE = (new ItemPickaxe(1, EnumToolMaterial.IRON)).a(2, 6).a("pickaxeIron");
+    public static Item IRON_AXE = (new ItemAxe(2, EnumToolMaterial.IRON)).a(2, 7).a("hatchetIron");
+    public static Item FLINT_AND_STEEL = (new ItemFlintAndSteel(3)).a(5, 0).a("flintAndSteel");
+    public static Item APPLE = (new ItemFood(4, 4, false)).a(10, 0).a("apple");
+    public static Item BOW = (new ItemBow(5)).a(5, 1).a("bow");
+    public static Item ARROW = (new Item(6)).a(5, 2).a("arrow");
+    public static Item COAL = (new ItemCoal(7)).a(7, 0).a("coal");
+    public static Item DIAMOND = (new Item(8)).a(7, 3).a("emerald");
+    public static Item IRON_INGOT = (new Item(9)).a(7, 1).a("ingotIron");
+    public static Item GOLD_INGOT = (new Item(10)).a(7, 2).a("ingotGold");
+    public static Item IRON_SWORD = (new ItemSword(11, EnumToolMaterial.IRON)).a(2, 4).a("swordIron");
+    public static Item WOOD_SWORD = (new ItemSword(12, EnumToolMaterial.WOOD)).a(0, 4).a("swordWood");
+    public static Item WOOD_SPADE = (new ItemSpade(13, EnumToolMaterial.WOOD)).a(0, 5).a("shovelWood");
+    public static Item WOOD_PICKAXE = (new ItemPickaxe(14, EnumToolMaterial.WOOD)).a(0, 6).a("pickaxeWood");
+    public static Item WOOD_AXE = (new ItemAxe(15, EnumToolMaterial.WOOD)).a(0, 7).a("hatchetWood");
+    public static Item STONE_SWORD = (new ItemSword(16, EnumToolMaterial.STONE)).a(1, 4).a("swordStone");
+    public static Item STONE_SPADE = (new ItemSpade(17, EnumToolMaterial.STONE)).a(1, 5).a("shovelStone");
+    public static Item STONE_PICKAXE = (new ItemPickaxe(18, EnumToolMaterial.STONE)).a(1, 6).a("pickaxeStone");
+    public static Item STONE_AXE = (new ItemAxe(19, EnumToolMaterial.STONE)).a(1, 7).a("hatchetStone");
+    public static Item DIAMOND_SWORD = (new ItemSword(20, EnumToolMaterial.DIAMOND)).a(3, 4).a("swordDiamond");
+    public static Item DIAMOND_SPADE = (new ItemSpade(21, EnumToolMaterial.DIAMOND)).a(3, 5).a("shovelDiamond");
+    public static Item DIAMOND_PICKAXE = (new ItemPickaxe(22, EnumToolMaterial.DIAMOND)).a(3, 6).a("pickaxeDiamond");
+    public static Item DIAMOND_AXE = (new ItemAxe(23, EnumToolMaterial.DIAMOND)).a(3, 7).a("hatchetDiamond");
+    public static Item STICK = (new Item(24)).a(5, 3).g().a("stick");
+    public static Item BOWL = (new Item(25)).a(7, 4).a("bowl");
+    public static Item MUSHROOM_SOUP = (new ItemSoup(26, 10)).a(8, 4).a("mushroomStew");
+    public static Item GOLD_SWORD = (new ItemSword(27, EnumToolMaterial.GOLD)).a(4, 4).a("swordGold");
+    public static Item GOLD_SPADE = (new ItemSpade(28, EnumToolMaterial.GOLD)).a(4, 5).a("shovelGold");
+    public static Item GOLD_PICKAXE = (new ItemPickaxe(29, EnumToolMaterial.GOLD)).a(4, 6).a("pickaxeGold");
+    public static Item GOLD_AXE = (new ItemAxe(30, EnumToolMaterial.GOLD)).a(4, 7).a("hatchetGold");
+    public static Item STRING = (new Item(31)).a(8, 0).a("string");
+    public static Item FEATHER = (new Item(32)).a(8, 1).a("feather");
+    public static Item SULPHUR = (new Item(33)).a(8, 2).a("sulphur");
+    public static Item WOOD_HOE = (new ItemHoe(34, EnumToolMaterial.WOOD)).a(0, 8).a("hoeWood");
+    public static Item STONE_HOE = (new ItemHoe(35, EnumToolMaterial.STONE)).a(1, 8).a("hoeStone");
+    public static Item IRON_HOE = (new ItemHoe(36, EnumToolMaterial.IRON)).a(2, 8).a("hoeIron");
+    public static Item DIAMOND_HOE = (new ItemHoe(37, EnumToolMaterial.DIAMOND)).a(3, 8).a("hoeDiamond");
+    public static Item GOLD_HOE = (new ItemHoe(38, EnumToolMaterial.GOLD)).a(4, 8).a("hoeGold");
+    public static Item SEEDS = (new ItemSeeds(39, Block.CROPS.id)).a(9, 0).a("seeds");
+    public static Item WHEAT = (new Item(40)).a(9, 1).a("wheat");
+    public static Item BREAD = (new ItemFood(41, 5, false)).a(9, 2).a("bread");
+    public static Item LEATHER_HELMET = (new ItemArmor(42, 0, 0, 0)).a(0, 0).a("helmetCloth");
+    public static Item LEATHER_CHESTPLATE = (new ItemArmor(43, 0, 0, 1)).a(0, 1).a("chestplateCloth");
+    public static Item LEATHER_LEGGINGS = (new ItemArmor(44, 0, 0, 2)).a(0, 2).a("leggingsCloth");
+    public static Item LEATHER_BOOTS = (new ItemArmor(45, 0, 0, 3)).a(0, 3).a("bootsCloth");
+    public static Item CHAINMAIL_HELMET = (new ItemArmor(46, 1, 1, 0)).a(1, 0).a("helmetChain");
+    public static Item CHAINMAIL_CHESTPLATE = (new ItemArmor(47, 1, 1, 1)).a(1, 1).a("chestplateChain");
+    public static Item CHAINMAIL_LEGGINGS = (new ItemArmor(48, 1, 1, 2)).a(1, 2).a("leggingsChain");
+    public static Item CHAINMAIL_BOOTS = (new ItemArmor(49, 1, 1, 3)).a(1, 3).a("bootsChain");
+    public static Item IRON_HELMET = (new ItemArmor(50, 2, 2, 0)).a(2, 0).a("helmetIron");
+    public static Item IRON_CHESTPLATE = (new ItemArmor(51, 2, 2, 1)).a(2, 1).a("chestplateIron");
+    public static Item IRON_LEGGINGS = (new ItemArmor(52, 2, 2, 2)).a(2, 2).a("leggingsIron");
+    public static Item IRON_BOOTS = (new ItemArmor(53, 2, 2, 3)).a(2, 3).a("bootsIron");
+    public static Item DIAMOND_HELMET = (new ItemArmor(54, 3, 3, 0)).a(3, 0).a("helmetDiamond");
+    public static Item DIAMOND_CHESTPLATE = (new ItemArmor(55, 3, 3, 1)).a(3, 1).a("chestplateDiamond");
+    public static Item DIAMOND_LEGGINGS = (new ItemArmor(56, 3, 3, 2)).a(3, 2).a("leggingsDiamond");
+    public static Item DIAMOND_BOOTS = (new ItemArmor(57, 3, 3, 3)).a(3, 3).a("bootsDiamond");
+    public static Item GOLD_HELMET = (new ItemArmor(58, 1, 4, 0)).a(4, 0).a("helmetGold");
+    public static Item GOLD_CHESTPLATE = (new ItemArmor(59, 1, 4, 1)).a(4, 1).a("chestplateGold");
+    public static Item GOLD_LEGGINGS = (new ItemArmor(60, 1, 4, 2)).a(4, 2).a("leggingsGold");
+    public static Item GOLD_BOOTS = (new ItemArmor(61, 1, 4, 3)).a(4, 3).a("bootsGold");
+    public static Item FLINT = (new Item(62)).a(6, 0).a("flint");
+    public static Item PORK = (new ItemFood(63, 3, true)).a(7, 5).a("porkchopRaw");
+    public static Item GRILLED_PORK = (new ItemFood(64, 8, true)).a(8, 5).a("porkchopCooked");
+    public static Item PAINTING = (new ItemPainting(65)).a(10, 1).a("painting");
+    public static Item GOLDEN_APPLE = (new ItemFood(66, 42, false)).a(11, 0).a("appleGold");
+    public static Item SIGN = (new ItemSign(67)).a(10, 2).a("sign");
+    public static Item WOOD_DOOR = (new ItemDoor(68, Material.WOOD)).a(11, 2).a("doorWood");
+    public static Item BUCKET = (new ItemBucket(69, 0)).a(10, 4).a("bucket");
+    public static Item WATER_BUCKET = (new ItemBucket(70, Block.WATER.id)).a(11, 4).a("bucketWater").a(BUCKET);
+    public static Item LAVA_BUCKET = (new ItemBucket(71, Block.LAVA.id)).a(12, 4).a("bucketLava").a(BUCKET);
+    public static Item MINECART = (new ItemMinecart(72, 0)).a(7, 8).a("minecart");
+    public static Item SADDLE = (new ItemSaddle(73)).a(8, 6).a("saddle");
+    public static Item IRON_DOOR = (new ItemDoor(74, Material.ORE)).a(12, 2).a("doorIron");
+    public static Item REDSTONE = (new ItemRedstone(75)).a(8, 3).a("redstone");
+    public static Item SNOW_BALL = (new ItemSnowball(76)).a(14, 0).a("snowball");
+    public static Item BOAT = (new ItemBoat(77)).a(8, 8).a("boat");
+    public static Item LEATHER = (new Item(78)).a(7, 6).a("leather");
+    public static Item MILK_BUCKET = (new ItemBucket(79, -1)).a(13, 4).a("milk").a(BUCKET);
+    public static Item CLAY_BRICK = (new Item(80)).a(6, 1).a("brick");
+    public static Item CLAY_BALL = (new Item(81)).a(9, 3).a("clay");
+    public static Item SUGAR_CANE = (new ItemReed(82, Block.SUGAR_CANE_BLOCK)).a(11, 1).a("reeds");
+    public static Item PAPER = (new Item(83)).a(10, 3).a("paper");
+    public static Item BOOK = (new Item(84)).a(11, 3).a("book");
+    public static Item SLIME_BALL = (new Item(85)).a(14, 1).a("slimeball");
+    public static Item STORAGE_MINECART = (new ItemMinecart(86, 1)).a(7, 9).a("minecartChest");
+    public static Item POWERED_MINECART = (new ItemMinecart(87, 2)).a(7, 10).a("minecartFurnace");
+    public static Item EGG = (new ItemEgg(88)).a(12, 0).a("egg");
+    public static Item COMPASS = (new Item(89)).a(6, 3).a("compass");
+    public static Item FISHING_ROD = (new ItemFishingRod(90)).a(5, 4).a("fishingRod");
+    public static Item WATCH = (new Item(91)).a(6, 4).a("clock");
+    public static Item GLOWSTONE_DUST = (new Item(92)).a(9, 4).a("yellowDust");
+    public static Item RAW_FISH = (new ItemFood(93, 2, false)).a(9, 5).a("fishRaw");
+    public static Item COOKED_FISH = (new ItemFood(94, 5, false)).a(10, 5).a("fishCooked");
+    public static Item INK_SACK = (new ItemDye(95)).a(14, 4).a("dyePowder");
+    public static Item BONE = (new Item(96)).a(12, 1).a("bone").g();
+    public static Item SUGAR = (new Item(97)).a(13, 0).a("sugar").g();
+    public static Item CAKE = (new ItemReed(98, Block.CAKE_BLOCK)).c(1).a(13, 1).a("cake");
+    public static Item BED = (new ItemBed(99)).c(1).a(13, 2).a("bed");
+    public static Item DIODE = (new ItemReed(100, Block.DIODE_OFF)).a(6, 5).a("diode");
+    public static Item COOKIE = (new ItemCookie(101, 1, false, 8)).a(12, 5).a("cookie");
+    public static ItemWorldMap MAP = (ItemWorldMap) (new ItemWorldMap(102)).a(12, 3).a("map");
+    public static ItemShears SHEARS = (ItemShears) (new ItemShears(103)).a(13, 5).a("shears");
+    public static Item GOLD_RECORD = (new ItemRecord(2000, "13")).a(0, 15).a("record");
+    public static Item GREEN_RECORD = (new ItemRecord(2001, "cat")).a(1, 15).a("record");
+    public final int id;
+    protected int maxStackSize = 64;
+    private int durability = 0;
+    protected int textureId;
+    protected boolean bi = false;
+    protected boolean bj = false;
+    private Item craftingResult = null;
+    private String name;
+    private org.bukkit.Material bukkitMaterial; // Copper
+
+    protected Item(int i) {
+        this.id = 256 + i;
+        if (byId[256 + i] != null) {
+            System.out.println("CONFLICT @ " + i);
+        }
+
+        byId[256 + i] = this;
+
+       bukkitMaterial = org.bukkit.Material.addMaterial(this.id, getMaxStackSize(), e()); // Copper
+    }
+
+    public Item b(int i) {
+        this.textureId = i;
+        return this;
+    }
+
+    public Item c(int i) {
+        // Copper start
+        if (bukkitMaterial.isModded()) {
+            bukkitMaterial.setMaxStack(i);
+        }
+        // Copper end
+        this.maxStackSize = i;
+        return this;
+    }
+
+    public Item a(int i, int j) {
+        this.textureId = i + j * 16;
+        return this;
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, World world, int i, int j, int k, int l) {
+        return false;
+    }
+
+    public float a(ItemStack itemstack, Block block) {
+        return 1.0F;
+    }
+
+    // Copper start
+    public float getStrVsBlock(ItemStack itemstack, Block block, int md) {
+        return this.a(itemstack, block);
+    }
+    // Copper end
+
+    public ItemStack a(ItemStack itemstack, World world, EntityHuman entityhuman) {
+        return itemstack;
+    }
+
+    public int getMaxStackSize() {
+        return this.maxStackSize;
+    }
+
+    public int filterData(int i) {
+        return 0;
+    }
+
+    public boolean d() {
+        return this.bj;
+    }
+
+    protected Item a(boolean flag) {
+        this.bj = flag;
+        return this;
+    }
+
+    public int e() {
+        return this.durability;
+    }
+
+    protected Item d(int i) {
+        this.durability = i;
+        return this;
+    }
+
+    public boolean f() {
+        return this.durability > 0 && !this.bj;
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, int i, int j, int k, int l, EntityLiving entityliving) {
+        return false;
+    }
+
+    public int a(Entity entity) {
+        return 1;
+    }
+
+    public boolean a(Block block) {
+        return false;
+    }
+
+    public void a(ItemStack itemstack, EntityLiving entityliving) {}
+
+    public Item g() {
+        this.bi = true;
+        return this;
+    }
+
+    public Item a(String s) {
+        // Copper start
+        if (bukkitMaterial.isModded()) {
+            bukkitMaterial.setName(s);
+        }
+        // Copper end
+        this.name = "item." + s;
+        return this;
+    }
+
+    public String a() {
+        return this.name;
+    }
+
+    public Item a(Item item) {
+        if (this.maxStackSize > 1) {
+            throw new IllegalArgumentException("Max stack size must be 1 for items with crafting results");
+        } else {
+            this.craftingResult = item;
+            return this;
+        }
+    }
+
+    public Item h() {
+        return this.craftingResult;
+    }
+
+    public boolean i() {
+        return this.craftingResult != null;
+    }
+
+    public String j() {
+        return StatisticCollector.a(this.a() + ".name");
+    }
+
+    public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {}
+
+    public void c(ItemStack itemstack, World world, EntityHuman entityhuman) {}
+
+    public boolean b() {
+        return false;
+    }
+
+    static {
+        StatisticList.c();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ItemBucket.java b/src/main/java/net/minecraft/server/ItemBucket.java
index e1c2866a..3c586618 100644
--- a/src/main/java/net/minecraft/server/ItemBucket.java
+++ b/src/main/java/net/minecraft/server/ItemBucket.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import forge.MinecraftForge;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -49,6 +50,13 @@ public class ItemBucket extends Item {
                 }
 
                 if (this.a == 0) {
+                    // Copper start
+                    ItemStack customBucket = MinecraftForge.fillCustomBucket(world, i, j, k);
+                    if (customBucket != null) {
+                        return customBucket;
+                    }
+                    // Copper end
+
                     if (world.getMaterial(i, j, k) == Material.WATER && world.getData(i, j, k) == 0) {
                         // CraftBukkit start
                         PlayerBucketFillEvent event = CraftEventFactory.callPlayerBucketFillEvent(entityhuman, i, j, k, -1, itemstack, Item.WATER_BUCKET);
diff --git a/src/main/java/net/minecraft/server/ItemInWorldManager.java b/src/main/java/net/minecraft/server/ItemInWorldManager.java
index 7e5df214..cd71c638 100644
--- a/src/main/java/net/minecraft/server/ItemInWorldManager.java
+++ b/src/main/java/net/minecraft/server/ItemInWorldManager.java
@@ -1,6 +1,8 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import forge.ForgeHooks;
+import forge.IUseItemFirst;
 import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.block.BlockDamageEvent;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
@@ -37,8 +39,7 @@ public class ItemInWorldManager {
 
             if (j != 0) {
                 Block block = Block.byId[j];
-                float f = block.getDamage(this.player) * (float) (i + 1);
-
+                float f = block.blockStrength(this.world, this.player, this.j, this.k, this.l) * (float)(i + 1); // Copper
                 if (f >= 1.0F) {
                     this.i = false;
                     this.c(this.j, this.k, this.l);
@@ -79,7 +80,7 @@ public class ItemInWorldManager {
         }
 
         // Handle hitting a block
-        float toolDamage = Block.byId[i1].getDamage(this.player);
+        float toolDamage = Block.byId[i1].blockStrength(this.world, this.player, i, j, k); // Copper
         if (event.useItemInHand() == Event.Result.DENY) {
             // If we 'insta destroyed' then the client needs to be informed.
             if (toolDamage > 1.0f) {
@@ -115,8 +116,7 @@ public class ItemInWorldManager {
 
             if (i1 != 0) {
                 Block block = Block.byId[i1];
-                float f = block.getDamage(this.player) * (float) (l + 1);
-
+                float f = block.blockStrength(this.world, this.player, i, j, k) * (float)(l + 1); // Copper
                 if (f >= 0.7F) {
                     this.c(i, j, k);
                 } else if (!this.i) {
@@ -177,7 +177,7 @@ public class ItemInWorldManager {
             }
         }
 
-        if (flag && this.player.b(Block.byId[l])) {
+        if (flag && Block.byId[l].canHarvestBlock(this.player, i1)) {  // Copper
             Block.byId[l].a(this.world, this.player, i, j, k, i1);
             ((EntityPlayer) this.player).netServerHandler.sendPacket(new Packet53BlockChange(i, j, k, this.world));
         }
@@ -186,22 +186,31 @@ public class ItemInWorldManager {
     }
 
     public boolean useItem(EntityHuman entityhuman, World world, ItemStack itemstack) {
+        // Copper start
         int i = itemstack.count;
         ItemStack itemstack1 = itemstack.a(world, entityhuman);
-
-        if (itemstack1 == itemstack && (itemstack1 == null || itemstack1.count == i)) {
-            return false;
-        } else {
+        if (itemstack1 != itemstack || itemstack1.count != i) {
             entityhuman.inventory.items[entityhuman.inventory.itemInHandIndex] = itemstack1;
             if (itemstack1.count == 0) {
                 entityhuman.inventory.items[entityhuman.inventory.itemInHandIndex] = null;
+                ForgeHooks.onDestroyCurrentItem(entityhuman, itemstack1);
             }
 
             return true;
+        } else {
+            return false;
         }
+        // Copper end
     }
 
     public boolean interact(EntityHuman entityhuman, World world, ItemStack itemstack, int i, int j, int k, int l) {
+        if (itemstack != null && itemstack.getItem() instanceof IUseItemFirst) {
+            IUseItemFirst iuif = (IUseItemFirst)itemstack.getItem();
+            if (iuif.onItemUseFirst(itemstack, entityhuman, world, i, j, k, l)) {
+                return true;
+            }
+        }
+
         int i1 = world.getTypeId(i, j, k);
 
         // CraftBukkit start - Interact
diff --git a/src/main/java/net/minecraft/server/ItemTool.java b/src/main/java/net/minecraft/server/ItemTool.java
new file mode 100644
index 00000000..6f203a6c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ItemTool.java
@@ -0,0 +1,51 @@
+package net.minecraft.server;
+
+import forge.ForgeHooks;
+
+public class ItemTool extends Item {
+
+    private Block[] bk;
+    private float bl = 4.0F;
+    private int bm;
+    protected EnumToolMaterial a;
+
+    protected ItemTool(int i, int j, EnumToolMaterial enumtoolmaterial, Block[] ablock) {
+        super(i);
+        this.a = enumtoolmaterial;
+        this.bk = ablock;
+        this.maxStackSize = 1;
+        this.d(enumtoolmaterial.a());
+        this.bl = enumtoolmaterial.b();
+        this.bm = j + enumtoolmaterial.c();
+    }
+
+    public float a(ItemStack itemstack, Block block) {
+        for (int i = 0; i < this.bk.length; ++i) {
+            if (this.bk[i] == block) {
+                return this.bl;
+            }
+        }
+
+        return 1.0F;
+    }
+
+    // Copper start
+    public float getStrVsBlock(ItemStack itemstack, Block block, int md) {
+        return ForgeHooks.isToolEffective(itemstack, block, md) ? this.bl : this.a(itemstack, block);
+    }
+    // Copper end
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        itemstack.damage(2, entityliving1);
+        return true;
+    }
+
+    public boolean a(ItemStack itemstack, int i, int j, int k, int l, EntityLiving entityliving) {
+        itemstack.damage(1, entityliving);
+        return true;
+    }
+
+    public int a(Entity entity) {
+        return this.bm;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 380a3374..cc55c669 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -16,6 +16,9 @@ import java.net.UnknownHostException;
 import com.canyonmodded.network.NettyBootstrap;
 import io.netty.util.concurrent.FastThreadLocalThread;
 import com.canyonmodded.scheduler.CanyonScheduler;
+import javafx.collections.FXCollections;
+import javafx.collections.ListChangeListener;
+import javafx.collections.ObservableList;
 import jline.ConsoleReader;
 import joptsimple.OptionSet;
 import org.bukkit.World.Environment;
@@ -32,6 +35,8 @@ import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.PluginLoadOrder;
 // CraftBukkit end
 
+import modloader.ModLoader;
+
 public class MinecraftServer implements Runnable, ICommandListener {
 
     public static Logger log = Logger.getLogger("Minecraft");
@@ -39,7 +44,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
     public NetworkListenThread networkListenThread;
     private NettyBootstrap nettyBootstrap; // Canyon
     public PropertyManager propertyManager;
-    // public WorldServer[] worldServer; // CraftBukkit - removed!
+    public WorldServer[] worldServer; // CraftBukkit - removed! // Copper - unremoved!
     public ServerConfigurationManager serverConfigurationManager;
     public ConsoleCommandHandler consoleCommandHandler; // CraftBukkit - made public
     private boolean isRunning = true;
@@ -136,6 +141,13 @@ public class MinecraftServer implements Runnable, ICommandListener {
         }
         Runtime.getRuntime().addShutdownHook(new ServerShutdownThread(this));
         // CraftBukkit end
+
+        // Copper start
+        worlds = FXCollections.observableList(worlds);
+        ((ObservableList<WorldServer>) worlds).addListener((ListChangeListener<WorldServer>) change -> {
+            worldServer = worlds.toArray(new WorldServer[0]);
+        });
+        // Copper end
     }
 
     private boolean init() throws UnknownHostException { // CraftBukkit - added throws UnknownHostException
@@ -145,6 +157,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
         threadcommandreader.setDaemon(true);
         threadcommandreader.start();
         ConsoleLogManager.init(this); // CraftBukkit
+        ModLoader.Init(this); // Copper
 
         // CraftBukkit start
         System.setOut(new PrintStream(new LoggerOutputStream(log, Level.INFO), true));
@@ -433,6 +446,7 @@ public class MinecraftServer implements Runnable, ICommandListener {
                 lastTick = start - TICK_TIME; // Paper
 
                 while (this.isRunning) {
+                    ModLoader.OnTick(this); // Copper
                     curTime = System.nanoTime();
                     // Paper start - Further improve server tick loop
                     wait = TICK_TIME - (curTime - lastTick);
@@ -686,6 +700,12 @@ public class MinecraftServer implements Runnable, ICommandListener {
         // CraftBukkit end
     }
 
+    // Copper start
+    public WorldServer getWorldManager(int i) {
+        return getWorldServer(i);
+    }
+    // Copper end
+
     public EntityTracker getTracker(int i) {
         return this.getWorldServer(i).tracker; // CraftBukkit
     }
diff --git a/src/main/java/net/minecraft/server/MovingObjectPosition.java b/src/main/java/net/minecraft/server/MovingObjectPosition.java
new file mode 100644
index 00000000..65cb56f1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/MovingObjectPosition.java
@@ -0,0 +1,28 @@
+package net.minecraft.server;
+
+public class MovingObjectPosition {
+
+    public EnumMovingObjectType type;
+    public int b;
+    public int c;
+    public int d;
+    public int face;
+    public Vec3D f;
+    public Entity entity;
+    public int subHit = -1; // Copper
+
+    public MovingObjectPosition(int i, int j, int k, int l, Vec3D vec3d) {
+        this.type = EnumMovingObjectType.TILE;
+        this.b = i;
+        this.c = j;
+        this.d = k;
+        this.face = l;
+        this.f = Vec3D.create(vec3d.a, vec3d.b, vec3d.c);
+    }
+
+    public MovingObjectPosition(Entity entity) {
+        this.type = EnumMovingObjectType.ENTITY;
+        this.entity = entity;
+        this.f = Vec3D.create(entity.locX, entity.locY, entity.locZ);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NetLoginHandler.java b/src/main/java/net/minecraft/server/NetLoginHandler.java
index 0a81ce3f..528161eb 100644
--- a/src/main/java/net/minecraft/server/NetLoginHandler.java
+++ b/src/main/java/net/minecraft/server/NetLoginHandler.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 import com.canyonmodded.network.NettyNetworkManager;
+import modloader.ModLoaderMp;
 
 import java.net.Socket;
 import java.util.Random;
@@ -128,6 +129,7 @@ public class NetLoginHandler extends NetHandler implements com.canyonmodded.netw
             if (this.server.networkListenThread != null) this.server.networkListenThread.a(netserverhandler); // Canyon
             netserverhandler.sendPacket(new Packet4UpdateTime(entityplayer.getPlayerTime())); // CraftBukkit - add support for player specific time
             entityplayer.syncInventory();
+            ModLoaderMp.HandleAllLogins(entityplayer); // Copper
             entityplayer.a(true); // Canyon - begin sending chunk packets immediately
             });
             // Canyon End
diff --git a/src/main/java/net/minecraft/server/TileEntityFurnace.java b/src/main/java/net/minecraft/server/TileEntityFurnace.java
index 1503cbdf..72a0c3e1 100644
--- a/src/main/java/net/minecraft/server/TileEntityFurnace.java
+++ b/src/main/java/net/minecraft/server/TileEntityFurnace.java
@@ -1,6 +1,7 @@
 package net.minecraft.server;
 
 // CraftBukkit start
+import modloader.ModLoader;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.event.inventory.FurnaceBurnEvent;
 import org.bukkit.event.inventory.FurnaceSmeltEvent;
@@ -237,8 +238,17 @@ public class TileEntityFurnace extends TileEntity implements IInventory {
             return 0;
         } else {
             int i = itemstack.getItem().id;
-
-            return i < 256 && Block.byId[i].material == Material.WOOD ? 300 : (i == Item.STICK.id ? 100 : (i == Item.COAL.id ? 1600 : (i == Item.LAVA_BUCKET.id ? 20000 : (i == Block.SAPLING.id ? 100 : 0))));
+            if (i < 256 && Block.byId[i].material == Material.WOOD) {
+                return 300;
+            } else if (i == Item.STICK.id) {
+                return 100;
+            } else if (i == Item.COAL.id) {
+                return 1600;
+            } else if (i == Item.LAVA_BUCKET.id) {
+                return 20000;
+            } else {
+                return i != Block.SAPLING.id ? ModLoader.AddAllFuel(i) : 100; // Copper
+            }
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 1d4ad166..46ad9971 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -228,7 +228,10 @@ public class World implements IBlockAccess {
     }
 
     public boolean isEmpty(int i, int j, int k) {
-        return this.getTypeId(i, j, k) == 0;
+        // Copper start
+        int blockId = this.getTypeId(i, j, k);
+        return blockId == 0 || Block.byId[blockId].isAirBlock(this, i, j, k);
+        // Copper end
     }
 
     public boolean isLoaded(int i, int j, int k) {
@@ -1589,11 +1592,17 @@ public class World implements IBlockAccess {
         return block == null ? false : block.a();
     }
 
+    // Copper start
     public boolean e(int i, int j, int k) {
         Block block = Block.byId[this.getTypeId(i, j, k)];
+        return block != null && block.isBlockNormalCube(this, i, j, k);
+    }
 
-        return block == null ? false : block.material.h() && block.b();
+    public boolean isBlockSolidOnSide(int i, int j, int k, int side) {
+        Block block = Block.byId[this.getTypeId(i, j, k)];
+        return block != null && block.isBlockSolidOnSide(this, i, j, k, side);
     }
+    // Copper end
 
     public boolean doLighting() {
         if (this.M >= 50) {
diff --git a/src/main/resources/mappings.tiny b/src/main/resources/mappings.tiny
new file mode 100644
index 00000000..43562901
--- /dev/null
+++ b/src/main/resources/mappings.tiny
@@ -0,0 +1,3585 @@
+v1	official	intermediary	named
+CLASS	aa	net/minecraft/server/StepSoundStone	net/minecraft/server/StepSoundStone
+CLASS	ab	net/minecraft/server/NoiseGeneratorPerlin	net/minecraft/server/NoiseGeneratorPerlin
+FIELD	ab	[I	d	field_936_d	d
+FIELD	ab	D	a	field_935_a	a
+FIELD	ab	D	b	field_934_b	b
+FIELD	ab	D	c	field_937_c	c
+METHOD	ab	(DDD)D	a	func_643_a	a
+METHOD	ab	(DDD)D	b	func_645_b	b
+METHOD	ab	(IDD)D	a	func_4102_a	a
+METHOD	ab	(IDDD)D	a	func_644_a	a
+METHOD	ab	(DD)D	a	func_642_a	a
+METHOD	ab	([DDDDIIIDDDD)V	a	func_646_a	a
+CLASS	ac	net/minecraft/server/MaterialLogic	net/minecraft/server/MaterialLogic
+CLASS	ad	net/minecraft/server/WorldGenGrass	net/minecraft/server/WorldGenGrass
+FIELD	ad	I	a	field_28057_a	a
+FIELD	ad	I	b	field_28056_b	b
+CLASS	ae	net/minecraft/server/EntityWaterAnimal	net/minecraft/server/EntityWaterAnimal
+CLASS	af	net/minecraft/server/ServerCommand	net/minecraft/server/ServerCommand
+FIELD	af	Ljava/lang/String;	a	field_1060_a	command
+FIELD	af	Lmb;	b	field_1059_b	b
+CLASS	ag	net/minecraft/server/CompressedStreamTools	net/minecraft/server/CompressedStreamTools
+METHOD	ag	(Ljava/io/InputStream;)Liq;	a	func_770_a	a
+METHOD	ag	(Liq;Ljava/io/OutputStream;)V	a	func_769_a	a
+METHOD	ag	(Ljava/io/DataInput;)Liq;	a	func_774_a	a
+METHOD	ag	(Liq;Ljava/io/DataOutput;)V	a	func_771_a	a
+CLASS	ah	net/minecraft/server/ItemPickaxe	net/minecraft/server/ItemPickaxe
+FIELD	ah	[Lna;	bk	field_4209_bb	bk
+CLASS	ai	net/minecraft/server/WorldMapOrienter	net/minecraft/server/WorldMapOrienter
+FIELD	ai	B	a	field_28202_a	a
+FIELD	ai	B	b	field_28201_b	b
+FIELD	ai	B	c	field_28205_c	c
+FIELD	ai	B	d	field_28204_d	d
+FIELD	ai	Lfv;	e	field_28203_e	field_28203_e
+CLASS	aj	net/minecraft/server/WorldProviderSky	net/minecraft/server/WorldProviderSky
+CLASS	ak	net/minecraft/server/TileEntityDispenser	net/minecraft/server/TileEntityDispenser
+FIELD	ak	[Lfy;	a	field_21081_e	items
+FIELD	ak	Ljava/util/Random;	b	field_21080_f	b
+METHOD	ak	()Lfy;	b	func_21079_e	b
+CLASS	al	net/minecraft/server/ItemBucket	net/minecraft/server/ItemBucket
+FIELD	al	I	a	field_274_a	a
+CLASS	am	net/minecraft/server/WorldGenFlowers	net/minecraft/server/WorldGenFlowers
+FIELD	am	I	a	field_765_a	a
+CLASS	an	net/minecraft/server/IChunkLoader	net/minecraft/server/IChunkLoader
+METHOD	an	(Ldj;II)Lhi;	a	func_659_a	a
+METHOD	an	(Ldj;Lhi;)V	a	func_662_a	a
+METHOD	an	(Ldj;Lhi;)V	b	func_4104_b	b
+METHOD	an	()V	a	func_661_a	a
+METHOD	an	()V	b	func_660_b	b
+CLASS	ao	net/minecraft/server/EntityAnimal	net/minecraft/server/EntityAnimal
+CLASS	ap	net/minecraft/server/ItemCloth	net/minecraft/server/ItemCloth
+CLASS	aq	net/minecraft/server/BiomeMeta	net/minecraft/server/BiomeMeta
+FIELD	aq	Ljava/lang/Class;	a	field_25145_a	a
+FIELD	aq	I	b	field_25144_b	b
+CLASS	ar	net/minecraft/server/BlockLeaves	net/minecraft/server/BlockLeaves
+FIELD	ar	I	c	field_663_c	c
+FIELD	ar	[I	a	field_20041_b	adjacentTreeBlocks
+METHOD	ar	(Ldj;III)V	g	func_6091_h	g
+CLASS	as	net/minecraft/server/ItemShears	net/minecraft/server/ItemShears
+CLASS	at	net/minecraft/server/DistancesCounter	net/minecraft/server/DistancesCounter
+CLASS	au	net/minecraft/server/ContainerFurnace	net/minecraft/server/ContainerFurnace
+FIELD	au	Lln;	a	field_20139_a	a
+FIELD	au	I	b	field_20138_b	b
+FIELD	au	I	c	field_20141_c	c
+FIELD	au	I	h	field_20140_h	h
+CLASS	av	net/minecraft/server/TimeCounter	net/minecraft/server/TimeCounter
+CLASS	aw	net/minecraft/server/EntityGhast	net/minecraft/server/EntityGhast
+FIELD	aw	I	a	field_20903_a	a
+FIELD	aw	D	b	field_20902_b	b
+FIELD	aw	D	c	field_20904_c	c
+FIELD	aw	D	d	field_4102_d	d
+FIELD	aw	Llq;	g	field_4097_ai	target
+FIELD	aw	I	h	field_4103_aj	h
+FIELD	aw	I	e	field_4101_e	e
+FIELD	aw	I	f	field_4100_f	f
+METHOD	aw	(DDDD)Z	a	func_4046_a	a
+CLASS	ax	net/minecraft/server/UnknownCounter	net/minecraft/server/UnknownCounter
+CLASS	ay	net/minecraft/server/ChunkCoordinates	net/minecraft/server/ChunkCoordinates
+FIELD	ay	I	a	field_22216_a	x
+FIELD	ay	I	b	field_529_a	y
+FIELD	ay	I	c	field_528_b	z
+METHOD	ay	(Ljava/lang/Object;)Z	equals	equals	equals
+METHOD	ay	()I	hashCode	hashCode	hashCode
+METHOD	ay	(Ljava/lang/Object;)I	compareTo	compareTo	compareTo
+METHOD	ay	(Lay;)I	a	func_22215_a	compareTo
+METHOD	ay	(III)D	a	func_27127_a	a
+CLASS	az	net/minecraft/server/BlockRedstoneOre	net/minecraft/server/BlockRedstoneOre
+FIELD	az	Z	a	field_665_a	a
+METHOD	az	(Ldj;III)V	g	func_321_g	g
+METHOD	az	(Ldj;III)V	h	func_320_h	h
+CLASS	ba	net/minecraft/server/Vec3D	net/minecraft/server/Vec3D
+FIELD	ba	Ljava/util/List;	d	field_1057_d	d
+FIELD	ba	I	e	field_1056_e	e
+FIELD	ba	D	a	field_1055_a	a
+FIELD	ba	D	b	field_1054_b	b
+FIELD	ba	D	c	field_1058_c	c
+METHOD	ba	(DDD)Lba;	a	func_760_a	a
+METHOD	ba	()V	a	func_761_a	a
+METHOD	ba	(DDD)Lba;	b	func_768_b	create
+METHOD	ba	(DDD)Lba;	e	func_756_e	e
+METHOD	ba	()Lba;	b	func_758_b	b
+METHOD	ba	(DDD)Lba;	c	func_757_c	add
+METHOD	ba	(Lba;)D	a	func_767_a	a
+METHOD	ba	(Lba;)D	b	func_764_b	b
+METHOD	ba	(DDD)D	d	func_759_d	b
+METHOD	ba	()D	c	func_765_c	c
+METHOD	ba	(Lba;D)Lba;	a	func_766_a	a
+METHOD	ba	(Lba;D)Lba;	b	func_763_b	b
+METHOD	ba	(Lba;D)Lba;	c	func_762_c	c
+CLASS	bb	net/minecraft/server/EnumToolMaterial	net/minecraft/server/EnumToolMaterial
+FIELD	bb	Lbb;	a	WOOD	WOOD
+FIELD	bb	Lbb;	b	STONE	STONE
+FIELD	bb	Lbb;	c	IRON	IRON
+FIELD	bb	Lbb;	d	EMERALD	EMERALD
+FIELD	bb	Lbb;	e	GOLD	GOLD
+FIELD	bb	I	f	field_21186_f	f
+FIELD	bb	I	g	field_21185_g	g
+FIELD	bb	F	h	field_21184_h	h
+FIELD	bb	I	i	field_21183_i	i
+FIELD	bb	[Lbb;	j	field_21182_j	j
+FIELD	bb	[Lbb;	$VALUES	$VALUES	$VALUES
+METHOD	bb	()[Lbb;	values	values	values
+METHOD	bb	(Ljava/lang/String;)Lbb;	valueOf	valueOf	valueOf
+METHOD	bb	()I	a	func_21180_a	a
+METHOD	bb	()F	b	func_21179_b	b
+METHOD	bb	()I	c	func_21178_c	c
+METHOD	bb	()I	d	func_21181_d	d
+CLASS	bc	net/minecraft/server/BlockPressurePlate	net/minecraft/server/BlockPressurePlate
+FIELD	bc	Lkx;	a	field_664_a	a
+METHOD	bc	(Ldj;III)V	g	func_318_g	g
+CLASS	bd	net/minecraft/server/EntityCow	net/minecraft/server/EntityCow
+CLASS	be	net/minecraft/server/EntitySnowball	net/minecraft/server/EntitySnowball
+FIELD	be	I	b	field_456_b	b
+FIELD	be	I	c	field_461_ad	c
+FIELD	be	I	d	field_460_ae	d
+FIELD	be	I	e	field_459_af	e
+FIELD	be	Z	f	field_457_ag	f
+FIELD	be	I	a	field_458_a	a
+FIELD	be	Lhl;	g	field_455_ah	shooter
+FIELD	be	I	h	field_454_ai	h
+FIELD	be	I	i	field_453_aj	i
+METHOD	be	(DDDFF)V	a	func_6141_a	a
+CLASS	bf	net/minecraft/server/ItemSoup	net/minecraft/server/ItemSoup
+CLASS	bg	net/minecraft/server/Packet70Bed	net/minecraft/server/Packet70Bed
+FIELD	bg	[Ljava/lang/String;	a	field_25016_a	a
+FIELD	bg	I	b	field_25015_b	b
+CLASS	bh	net/minecraft/server/ContainerChest	net/minecraft/server/ContainerChest
+FIELD	bh	Lhp;	a	field_20137_a	a
+FIELD	bh	I	b	field_27088_b	b
+CLASS	bi	net/minecraft/server/NoiseGenerator2	net/minecraft/server/NoiseGenerator2
+FIELD	bi	[[I	d	field_4317_d	d
+FIELD	bi	[I	e	field_4316_e	e
+FIELD	bi	D	a	field_4313_a	a
+FIELD	bi	D	b	field_4312_b	b
+FIELD	bi	D	c	field_4318_c	c
+FIELD	bi	D	f	field_4315_f	f
+FIELD	bi	D	g	field_4314_g	g
+METHOD	bi	(D)I	a	func_4113_a	a
+METHOD	bi	([IDD)D	a	func_4114_a	a
+METHOD	bi	([DDDIIDDD)V	a	func_4115_a	a
+CLASS	bj	net/minecraft/server/EntityFireball	net/minecraft/server/EntityFireball
+FIELD	bj	I	f	field_9195_e	f
+FIELD	bj	I	g	field_9193_f	g
+FIELD	bj	I	h	field_9197_aj	h
+FIELD	bj	I	i	field_9194_ak	i
+FIELD	bj	Z	j	field_9192_al	j
+FIELD	bj	I	a	field_9200_a	a
+FIELD	bj	Lhl;	b	field_9191_am	shooter
+FIELD	bj	I	k	field_9190_an	k
+FIELD	bj	I	l	field_9189_ao	l
+FIELD	bj	D	c	field_9199_b	c
+FIELD	bj	D	d	field_9198_c	d
+FIELD	bj	D	e	field_9196_d	e
+CLASS	bk	net/minecraft/server/ItemBlock	net/minecraft/server/ItemBlock
+FIELD	bk	I	a	field_272_a	id
+CLASS	bl	net/minecraft/server/IChunkProvider	net/minecraft/server/IChunkProvider
+METHOD	bl	(II)Z	a	func_365_a	isChunkLoaded
+METHOD	bl	(II)Lhi;	b	func_363_b	getOrCreateChunk
+METHOD	bl	(II)Lhi;	c	func_376_d	getChunkAt
+METHOD	bl	(Lbl;II)V	a	func_4055_a	getChunkAt
+METHOD	bl	(ZLpj;)Z	a	func_360_a	saveChunks
+METHOD	bl	()Z	a	func_361_a	unloadChunks
+METHOD	bl	()Z	b	func_364_b	canSave
+CLASS	bm	net/minecraft/server/ChunkFileFilter	net/minecraft/server/ChunkFileFilter
+FIELD	bm	Ljava/util/regex/Pattern;	a	field_22214_a	a
+METHOD	bm	(Ljava/io/File;Ljava/lang/String;)Z	accept	accept	accept
+CLASS	bn	net/minecraft/server/EntitySpider	net/minecraft/server/EntitySpider
+CLASS	bo	net/minecraft/server/ItemWorldMapBase	net/minecraft/server/ItemWorldMapBase
+METHOD	bo	(Lfy;Ldj;Lem;)Lgt;	b	func_28022_b	b
+CLASS	bp	net/minecraft/server/SpawnerCreature	net/minecraft/server/SpawnerCreature
+FIELD	bp	Ljava/util/Set;	b	field_4311_a	b
+FIELD	bp	[Ljava/lang/Class;	a	field_22213_a	a
+METHOD	bp	(Ldj;II)Loa;	a	func_4112_a	a
+METHOD	bp	(Ldj;ZZ)I	a	func_4111_a	spawnEntities
+METHOD	bp	(Lhh;Ldj;III)Z	a	func_21167_a	a
+METHOD	bp	(Lhl;Ldj;FFF)V	a	func_21166_a	func_21166_a
+METHOD	bp	(Ldj;Ljava/util/List;)Z	a	func_22212_a	a
+CLASS	bq	net/minecraft/server/ThreadServerApplication	net/minecraft/server/ThreadServerApplication
+FIELD	bq	Lnet/minecraft/server/MinecraftServer;	a	field_1033_a	mcServer
+CLASS	br	net/minecraft/server/ConvertProgressUpdater	net/minecraft/server/ConvertProgressUpdater
+FIELD	br	J	b	field_22071_b	b
+FIELD	br	Lnet/minecraft/server/MinecraftServer;	a	field_22072_a	mcServer
+CLASS	bs	net/minecraft/server/ThreadCommandReader	net/minecraft/server/ThreadCommandReader
+FIELD	bs	Lnet/minecraft/server/MinecraftServer;	a	field_1032_a	mcServer
+CLASS	bt	net/minecraft/server/ThreadSleepForever	net/minecraft/server/ThreadSleepForever
+FIELD	bt	Lnet/minecraft/server/MinecraftServer;	a	field_1031_a	mc
+CLASS	bu	net/minecraft/server/StepSound	net/minecraft/server/StepSound
+FIELD	bu	Ljava/lang/String;	a	field_1029_a	a
+FIELD	bu	F	b	field_1028_b	b
+FIELD	bu	F	c	field_1030_c	c
+METHOD	bu	()F	a	func_738_a	getVolume1
+METHOD	bu	()F	b	func_739_b	getVolume2
+METHOD	bu	()Ljava/lang/String;	c	func_737_c	getName
+CLASS	bv	net/minecraft/server/ItemFishingRod	net/minecraft/server/ItemFishingRod
+CLASS	bw	net/minecraft/server/EnumBedError	net/minecraft/server/EnumBedError
+FIELD	bw	Lbw;	a	OK	OK
+FIELD	bw	Lbw;	b	NOT_POSSIBLE_HERE	NOT_POSSIBLE_HERE
+FIELD	bw	Lbw;	c	NOT_POSSIBLE_NOW	NOT_POSSIBLE_NOW
+FIELD	bw	Lbw;	d	TOO_FAR_AWAY	TOO_FAR_AWAY
+FIELD	bw	Lbw;	e	OTHER_PROBLEM	OTHER_PROBLEM
+FIELD	bw	[Lbw;	f	field_25140_f	f
+FIELD	bw	[Lbw;	$VALUES	$VALUES	$VALUES
+METHOD	bw	()[Lbw;	values	values	values
+METHOD	bw	(Ljava/lang/String;)Lbw;	valueOf	valueOf	valueOf
+CLASS	bx	net/minecraft/server/TileEntityMobSpawner	net/minecraft/server/TileEntityMobSpawner
+FIELD	bx	I	a	field_493_e	spawnDelay
+FIELD	bx	Ljava/lang/String;	i	field_492_f	mobName
+FIELD	bx	D	b	field_491_g	b
+FIELD	bx	D	c	field_490_h	c
+METHOD	bx	(Ljava/lang/String;)V	a	func_21078_a	a
+METHOD	bx	()Z	a	func_195_a	a
+METHOD	bx	()V	c	func_196_d	c
+CLASS	by	net/minecraft/server/BlockRedstoneTorch	net/minecraft/server/BlockRedstoneTorch
+FIELD	by	Z	a	field_649_a	isOn
+FIELD	by	Ljava/util/List;	b	field_648_b	b
+METHOD	by	(Ldj;IIIZ)Z	a	func_280_a	a
+METHOD	by	(Ldj;III)Z	g	func_30003_g	g
+CLASS	bz	net/minecraft/server/BlockMobSpawner	net/minecraft/server/BlockMobSpawner
+CLASS	ca	net/minecraft/server/NoiseGenerator	net/minecraft/server/NoiseGenerator
+CLASS	cb	net/minecraft/server/PathEntity	net/minecraft/server/PathEntity
+FIELD	cb	[Ld;	b	field_1004_b	b
+FIELD	cb	I	a	field_1005_a	a
+FIELD	cb	I	c	field_1006_c	c
+METHOD	cb	()V	a	func_728_a	a
+METHOD	cb	()Z	b	func_729_b	b
+METHOD	cb	()Ld;	c	func_22211_c	c
+METHOD	cb	(Llq;)Lba;	a	func_727_a	a
+CLASS	cc	net/minecraft/server/Packet22Collect	net/minecraft/server/Packet22Collect
+FIELD	cc	I	a	field_137_a	a
+FIELD	cc	I	b	field_136_b	b
+CLASS	cd	net/minecraft/server/WorldGenLakes	net/minecraft/server/WorldGenLakes
+FIELD	cd	I	a	field_15005_a	a
+CLASS	a	net/minecraft/server/Packet7UseEntity	net/minecraft/server/Packet7UseEntity
+FIELD	a	I	a	field_9019_a	a
+FIELD	a	I	b	field_9018_b	target
+FIELD	a	I	c	field_9020_c	c
+CLASS	b	net/minecraft/server/AchievementMap	net/minecraft/server/AchievementMap
+FIELD	b	Lb;	a	field_25134_a	a
+FIELD	b	Ljava/util/Map;	b	field_25133_b	b
+METHOD	b	(I)Ljava/lang/String;	a	func_25132_a	a
+CLASS	ce	net/minecraft/server/EntitySheep	net/minecraft/server/EntitySheep
+FIELD	ce	[[F	a	field_21071_a	a
+METHOD	ce	()I	r	func_21068_e_	getColor
+METHOD	ce	(I)V	b_	func_21070_a	setColor
+METHOD	ce	()Z	s	func_21069_f_	func_21069_f_
+METHOD	ce	(Z)V	a	func_21067_a	setSheared
+METHOD	ce	(Ljava/util/Random;)I	a	func_21066_a	a
+CLASS	cf	net/minecraft/server/ItemSnowball	net/minecraft/server/ItemSnowball
+CLASS	c	net/minecraft/server/EntityWeatherStorm	net/minecraft/server/EntityWeatherStorm
+FIELD	c	I	b	field_27018_b	lifeTicks
+FIELD	c	J	a	field_27019_a	a
+FIELD	c	I	c	field_27020_c	c
+CLASS	d	net/minecraft/server/PathPoint	net/minecraft/server/PathPoint
+FIELD	d	I	a	field_1016_a	a
+FIELD	d	I	b	field_1015_b	b
+FIELD	d	I	c	field_1014_c	c
+FIELD	d	I	j	field_1013_d	j
+FIELD	d	I	d	field_1012_e	index
+FIELD	d	F	e	field_1011_f	totalPathDistance
+FIELD	d	F	f	field_1010_g	distanceToNext
+FIELD	d	F	g	field_1009_h	distanceToTarget
+FIELD	d	Ld;	h	field_1008_i	previous
+FIELD	d	Z	i	field_1007_j	i
+METHOD	d	(III)I	a	func_22203_a	a
+METHOD	d	(Ld;)F	a	func_731_a	a
+METHOD	d	()Z	a	func_730_a	a
+CLASS	cg	net/minecraft/server/BlockLadder	net/minecraft/server/BlockLadder
+CLASS	ch	net/minecraft/server/StatisticCollector	net/minecraft/server/StatisticCollector
+FIELD	ch	Lii;	a	field_25137_a	a
+METHOD	ch	(Ljava/lang/String;)Ljava/lang/String;	a	func_25136_a	a
+METHOD	ch	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;	a	func_25135_a	a
+CLASS	e	net/minecraft/server/BlockChest	net/minecraft/server/BlockChest
+FIELD	e	Ljava/util/Random;	a	field_656_a	a
+METHOD	e	(Ldj;III)Z	g	func_297_g	g
+CLASS	ci	net/minecraft/server/GuiLogOutputHandler	net/minecraft/server/GuiLogOutputHandler
+FIELD	ci	[I	b	field_998_b	b
+FIELD	ci	I	c	field_1001_c	c
+FIELD	ci	Ljava/util/logging/Formatter;	a	field_999_a	field_999_a
+FIELD	ci	Ljavax/swing/JTextArea;	d	field_1000_d	d
+METHOD	ci	()V	close	close	close
+METHOD	ci	()V	flush	flush	flush
+METHOD	ci	(Ljava/util/logging/LogRecord;)V	publish	publish	publish
+CLASS	f	net/minecraft/server/BiomeTaiga	net/minecraft/server/BiomeTaiga
+CLASS	cj	net/minecraft/server/ItemTool	net/minecraft/server/ItemTool
+FIELD	cj	[Lna;	bk	field_265_aX	bk
+FIELD	cj	F	bl	field_264_aY	bl
+FIELD	cj	I	bm	field_263_aZ	bm
+FIELD	cj	Lbb;	a	field_20913_a	a
+CLASS	g	net/minecraft/server/BlockPistonExtension	net/minecraft/server/BlockPistonExtension
+FIELD	g	I	a	field_31046_a	a
+METHOD	g	(I)I	b	func_31045_b	b
+CLASS	h	net/minecraft/server/WorldGenForest	net/minecraft/server/WorldGenForest
+CLASS	ck	net/minecraft/server/CraftingRecipe	net/minecraft/server/CraftingRecipe
+METHOD	ck	()Lfy;	b	func_25077_b	b
+METHOD	ck	(Lhz;)Z	a	func_21134_a	a
+METHOD	ck	(Lhz;)Lfy;	b	func_21136_b	b
+METHOD	ck	()I	a	func_20165_a	a
+CLASS	cl	net/minecraft/server/Container	net/minecraft/server/Container
+FIELD	cl	Ljava/util/List;	d	field_20136_d	d
+FIELD	cl	Ljava/util/List;	e	field_20135_e	e
+FIELD	cl	I	f	field_20134_f	windowId
+FIELD	cl	S	a	field_20132_a	a
+FIELD	cl	Ljava/util/List;	g	field_20133_g	listeners
+FIELD	cl	Ljava/util/Set;	b	field_20131_b	b
+METHOD	cl	(Lel;)V	a	func_20122_a	a
+METHOD	cl	(Lcp;)V	a	func_20128_a	a
+METHOD	cl	()Ljava/util/List;	b	func_28127_b	b
+METHOD	cl	()V	a	func_20125_a	a
+METHOD	cl	(Lhp;I)Lel;	a	func_20127_a	a
+METHOD	cl	(I)Lel;	b	func_20120_a	b
+METHOD	cl	(I)Lfy;	a	func_27086_a	a
+METHOD	cl	(IIZLem;)Lfy;	a	func_27085_a	a
+METHOD	cl	(Lem;)V	a	func_20130_a	a
+METHOD	cl	(Lhp;)V	a	func_20121_a	a
+METHOD	cl	(Lem;)Z	c	func_20124_c	c
+METHOD	cl	(Lem;Z)V	a	func_20129_a	a
+METHOD	cl	(Lem;)Z	b	func_20126_b	b
+METHOD	cl	(Lfy;IIZ)V	a	func_28126_a	a
+CLASS	i	net/minecraft/server/PlayerListBox	net/minecraft/server/PlayerListBox
+FIELD	i	Lnet/minecraft/server/MinecraftServer;	a	field_955_a	a
+FIELD	i	I	b	field_954_b	b
+CLASS	cm	net/minecraft/server/MaterialMapColor	net/minecraft/server/MaterialMapColor
+FIELD	cm	[Lcm;	a	field_28200_a	a
+FIELD	cm	Lcm;	b	field_28199_b	b
+FIELD	cm	Lcm;	c	field_28198_c	c
+FIELD	cm	Lcm;	d	field_28197_d	d
+FIELD	cm	Lcm;	e	field_28196_e	e
+FIELD	cm	Lcm;	f	field_28195_f	f
+FIELD	cm	Lcm;	g	field_28194_g	g
+FIELD	cm	Lcm;	h	field_28193_h	h
+FIELD	cm	Lcm;	i	field_28192_i	i
+FIELD	cm	Lcm;	j	field_28191_j	j
+FIELD	cm	Lcm;	k	field_28190_k	k
+FIELD	cm	Lcm;	l	field_28189_l	l
+FIELD	cm	Lcm;	m	field_28188_m	m
+FIELD	cm	Lcm;	n	field_28187_n	n
+FIELD	cm	Lcm;	o	field_28186_o	o
+FIELD	cm	I	p	field_28185_p	p
+FIELD	cm	I	q	field_28184_q	q
+CLASS	j	net/minecraft/server/BlockOreBlock	net/minecraft/server/BlockOreBlock
+CLASS	k	net/minecraft/server/NBTTagFloat	net/minecraft/server/NBTTagFloat
+FIELD	k	F	a	field_739_a	a
+CLASS	cn	net/minecraft/server/ChunkFile	net/minecraft/server/ChunkFile
+FIELD	cn	Ljava/io/File;	a	field_22209_a	a
+FIELD	cn	I	b	field_22208_b	b
+FIELD	cn	I	c	field_22210_c	c
+METHOD	cn	(Lcn;)I	a	func_22206_a	compareTo
+METHOD	cn	()Ljava/io/File;	a	func_22207_a	a
+METHOD	cn	()I	b	func_22205_b	b
+METHOD	cn	()I	c	func_22204_c	c
+CLASS	co	net/minecraft/server/EnumSkyBlock	net/minecraft/server/EnumSkyBlock
+FIELD	co	Lco;	a	Sky	Sky
+FIELD	co	Lco;	b	Block	Block
+FIELD	co	I	c	field_984_c	c
+FIELD	co	[Lco;	d	field_983_d	d
+FIELD	co	[Lco;	$VALUES	$VALUES	$VALUES
+METHOD	co	()[Lco;	values	values	values
+METHOD	co	(Ljava/lang/String;)Lco;	valueOf	valueOf	valueOf
+CLASS	l	net/minecraft/server/Packet5EntityEquipment	net/minecraft/server/Packet5EntityEquipment
+FIELD	l	I	a	field_118_a	a
+FIELD	l	I	b	field_117_b	b
+FIELD	l	I	c	field_20028_c	c
+FIELD	l	I	d	field_21022_d	d
+CLASS	cp	net/minecraft/server/ICrafting	net/minecraft/server/ICrafting
+METHOD	cp	(Lcl;Ljava/util/List;)V	a	func_20054_a	a
+METHOD	cp	(Lcl;ILfy;)V	a	func_20055_a	a
+METHOD	cp	(Lcl;II)V	a	func_20056_a	a
+CLASS	m	net/minecraft/server/BiomeHell	net/minecraft/server/BiomeHell
+CLASS	n	net/minecraft/server/RecipesArmor	net/minecraft/server/RecipesArmor
+FIELD	n	[[Ljava/lang/String;	a	field_20174_a	a
+FIELD	n	[[Ljava/lang/Object;	b	field_20173_b	b
+METHOD	n	(Ley;)V	a	func_20172_a	a
+CLASS	cq	net/minecraft/server/BlockCloth	net/minecraft/server/BlockCloth
+METHOD	cq	(I)I	c	func_21033_c	c
+METHOD	cq	(I)I	d	func_21034_d	d
+CLASS	cr	net/minecraft/server/TileEntityRecordPlayer	net/minecraft/server/TileEntityRecordPlayer
+FIELD	cr	I	a	field_28009_a	a
+CLASS	o	net/minecraft/server/ContainerPlayer	net/minecraft/server/ContainerPlayer
+FIELD	o	Lhz;	a	field_20143_a	craftInventory
+FIELD	o	Lhp;	b	field_20142_b	resultInventory
+FIELD	o	Z	c	field_20144_c	c
+CLASS	p	net/minecraft/server/BlockSnowBlock	net/minecraft/server/BlockSnowBlock
+CLASS	cs	net/minecraft/server/Packet51MapChunk	net/minecraft/server/Packet51MapChunk
+FIELD	cs	I	a	field_106_a	a
+FIELD	cs	I	b	field_105_b	b
+FIELD	cs	I	c	field_112_c	c
+FIELD	cs	I	d	field_111_d	d
+FIELD	cs	I	e	field_110_e	e
+FIELD	cs	I	f	field_109_f	f
+FIELD	cs	[B	g	field_108_g	g
+FIELD	cs	I	h	field_107_h	h
+CLASS	q	net/minecraft/server/ServerWindowAdapter	net/minecraft/server/ServerWindowAdapter
+FIELD	q	Lnet/minecraft/server/MinecraftServer;	a	field_997_a	mcServer
+METHOD	q	(Ljava/awt/event/WindowEvent;)V	windowClosing	windowClosing	windowClosing
+CLASS	ct	net/minecraft/server/WorldData	net/minecraft/server/WorldData
+FIELD	ct	J	a	field_22202_a	a
+FIELD	ct	I	b	field_22201_b	b
+FIELD	ct	I	c	field_22200_c	c
+FIELD	ct	I	d	field_22199_d	d
+FIELD	ct	J	e	field_22198_e	e
+FIELD	ct	J	f	field_22197_f	f
+FIELD	ct	J	g	field_22196_g	g
+FIELD	ct	Liq;	h	field_22195_h	h
+FIELD	ct	I	i	field_22194_i	i
+FIELD	ct	Ljava/lang/String;	j	field_22193_j	name
+FIELD	ct	I	k	field_22192_k	k
+FIELD	ct	Z	l	field_27126_l	l
+FIELD	ct	I	m	field_27125_m	m
+FIELD	ct	Z	n	field_27124_n	n
+FIELD	ct	I	o	field_27123_o	o
+METHOD	ct	()Liq;	a	func_22185_a	a
+METHOD	ct	(Ljava/util/List;)Liq;	a	func_22183_a	func_22183_a
+METHOD	ct	(Liq;Liq;)V	a	func_22176_a	a
+METHOD	ct	()J	b	func_22187_b	getSeed
+METHOD	ct	()I	c	func_22184_c	c
+METHOD	ct	()I	d	func_22179_d	d
+METHOD	ct	()I	e	func_22189_e	e
+METHOD	ct	()J	f	func_22186_f	f
+METHOD	ct	()J	g	func_22182_g	g
+METHOD	ct	()I	h	func_22178_h	h
+METHOD	ct	(J)V	a	func_22180_a	a
+METHOD	ct	(J)V	b	func_22177_b	b
+METHOD	ct	(III)V	a	func_22181_a	setSpawn
+METHOD	ct	(Ljava/lang/String;)V	a	func_22190_a	a
+METHOD	ct	()I	i	func_22188_i	i
+METHOD	ct	(I)V	a	func_22191_a	a
+METHOD	ct	()Z	j	func_27122_j	isThundering
+METHOD	ct	(Z)V	a	func_27119_a	setThundering
+METHOD	ct	()I	k	func_27117_k	getThunderDuration
+METHOD	ct	(I)V	b	func_27121_b	setThunderDuration
+METHOD	ct	()Z	l	func_27115_l	hasStorm
+METHOD	ct	(Z)V	b	func_27116_b	setStorm
+METHOD	ct	()I	m	func_27120_m	getWeatherDuration
+METHOD	ct	(I)V	c	func_27118_c	setWeatherDuration
+CLASS	r	net/minecraft/server/ServerGuiCommandListener	net/minecraft/server/ServerGuiCommandListener
+FIELD	r	Ljavax/swing/JTextField;	a	field_993_a	textField
+FIELD	r	Lnf;	b	field_992_b	mcServerGui
+CLASS	cu	net/minecraft/server/NetworkListenThread	net/minecraft/server/NetworkListenThread
+FIELD	cu	Ljava/util/logging/Logger;	a	field_974_a	a
+FIELD	cu	Ljava/net/ServerSocket;	d	field_979_d	d
+FIELD	cu	Ljava/lang/Thread;	e	field_978_e	e
+FIELD	cu	Z	b	field_973_b	b
+FIELD	cu	I	f	field_977_f	f
+FIELD	cu	Ljava/util/ArrayList;	g	field_976_g	g
+FIELD	cu	Ljava/util/ArrayList;	h	field_975_h	h
+FIELD	cu	Lnet/minecraft/server/MinecraftServer;	c	field_980_c	c
+METHOD	cu	(Lha;)V	a	func_4108_a	a
+METHOD	cu	(Lee;)V	a	func_717_a	a
+METHOD	cu	()V	a	func_715_a	a
+METHOD	cu	(Lcu;)Ljava/net/ServerSocket;	a	func_713_a	a
+METHOD	cu	(Lcu;)I	b	func_712_b	b
+METHOD	cu	(Lcu;Lee;)V	a	func_716_a	a
+CLASS	cv	net/minecraft/server/ThreadLoginVerifier	net/minecraft/server/ThreadLoginVerifier
+FIELD	cv	Liv;	a	field_972_a	loginPacket
+FIELD	cv	Lee;	b	field_971_b	loginHandler
+CLASS	s	net/minecraft/server/ServerGuiFocusAdapter	net/minecraft/server/ServerGuiFocusAdapter
+FIELD	s	Lnf;	a	field_987_a	mcServerGui
+METHOD	s	(Ljava/awt/event/FocusEvent;)V	focusGained	focusGained	focusGained
+CLASS	t	net/minecraft/server/BlockTNT	net/minecraft/server/BlockTNT
+CLASS	cw	net/minecraft/server/ItemStep	net/minecraft/server/ItemStep
+CLASS	cx	net/minecraft/server/BlockStone	net/minecraft/server/BlockStone
+CLASS	u	net/minecraft/server/IAnimal	net/minecraft/server/IAnimal
+CLASS	v	net/minecraft/server/Packet11PlayerPosition	net/minecraft/server/Packet11PlayerPosition
+CLASS	cy	net/minecraft/server/AchievementList	net/minecraft/server/AchievementList
+FIELD	cy	I	a	field_27114_a	a
+FIELD	cy	I	b	field_27113_b	b
+FIELD	cy	I	c	field_27112_c	c
+FIELD	cy	I	d	field_27111_d	d
+FIELD	cy	Ljava/util/List;	e	field_25129_a	field_25129_a
+FIELD	cy	Lit;	f	field_25128_b	field_25128_b
+FIELD	cy	Lit;	g	field_25131_c	field_25131_c
+FIELD	cy	Lit;	h	field_25130_d	h
+FIELD	cy	Lit;	i	field_27110_i	i
+FIELD	cy	Lit;	j	field_27109_j	j
+FIELD	cy	Lit;	k	field_27108_k	k
+FIELD	cy	Lit;	l	field_27107_l	l
+FIELD	cy	Lit;	m	field_27106_m	m
+FIELD	cy	Lit;	n	field_27105_n	n
+FIELD	cy	Lit;	o	field_27104_o	o
+FIELD	cy	Lit;	p	field_27103_p	p
+FIELD	cy	Lit;	q	field_27102_q	q
+FIELD	cy	Lit;	r	field_27101_r	r
+FIELD	cy	Lit;	s	field_27100_s	s
+FIELD	cy	Lit;	t	field_27099_t	t
+FIELD	cy	Lit;	u	field_27098_u	u
+METHOD	cy	()V	a	func_27097_a	a
+CLASS	cz	net/minecraft/server/AxisAlignedBB	net/minecraft/server/AxisAlignedBB
+FIELD	cz	Ljava/util/List;	g	field_966_g	g
+FIELD	cz	I	h	field_965_h	h
+FIELD	cz	D	a	field_964_a	a
+FIELD	cz	D	b	field_963_b	b
+FIELD	cz	D	c	field_970_c	c
+FIELD	cz	D	d	field_969_d	d
+FIELD	cz	D	e	field_968_e	e
+FIELD	cz	D	f	field_967_f	f
+METHOD	cz	(DDDDDD)Lcz;	a	func_698_a	a
+METHOD	cz	()V	a	func_703_a	a
+METHOD	cz	(DDDDDD)Lcz;	b	func_693_b	b
+METHOD	cz	(DDDDDD)Lcz;	c	func_695_c	c
+METHOD	cz	(DDD)Lcz;	a	func_700_a	a
+METHOD	cz	(DDD)Lcz;	b	func_708_b	b
+METHOD	cz	(DDD)Lcz;	c	func_696_c	c
+METHOD	cz	(Lcz;D)D	a	func_710_a	a
+METHOD	cz	(Lcz;D)D	b	func_701_b	b
+METHOD	cz	(Lcz;D)D	c	func_709_c	c
+METHOD	cz	(Lcz;)Z	a	func_704_a	a
+METHOD	cz	(DDD)Lcz;	d	func_702_d	d
+METHOD	cz	(Lba;)Z	a	func_28183_a	a
+METHOD	cz	(DDD)Lcz;	e	func_694_e	shrink
+METHOD	cz	()Lcz;	b	func_711_b	clone
+METHOD	cz	(Lba;Lba;)Lnh;	a	func_706_a	a
+METHOD	cz	(Lba;)Z	b	func_697_a	b
+METHOD	cz	(Lba;)Z	c	func_705_b	c
+METHOD	cz	(Lba;)Z	d	func_707_c	d
+METHOD	cz	(Lcz;)V	b	func_699_b	b
+CLASS	w	net/minecraft/server/Packet131	net/minecraft/server/Packet131
+FIELD	w	S	a	field_28052_a	a
+FIELD	w	S	b	field_28051_b	b
+FIELD	w	[B	c	field_28053_c	c
+CLASS	x	net/minecraft/server/StepSoundSand	net/minecraft/server/StepSoundSand
+CLASS	y	net/minecraft/server/PlayerInstance	net/minecraft/server/PlayerInstance
+FIELD	y	Ljava/util/List;	b	field_1072_b	b
+FIELD	y	I	c	field_1071_c	chunkX
+FIELD	y	I	d	field_1070_d	chunkZ
+FIELD	y	Lqa;	e	field_1069_e	location
+FIELD	y	[S	f	field_1068_f	dirtyBlocks
+FIELD	y	I	g	field_1067_g	dirtyCount
+FIELD	y	I	h	field_1066_h	h
+FIELD	y	I	i	field_1065_i	i
+FIELD	y	I	j	field_1064_j	j
+FIELD	y	I	k	field_1063_k	k
+FIELD	y	I	l	field_1062_l	l
+FIELD	y	I	m	field_1061_m	m
+FIELD	y	Loo;	a	field_1073_a	playerManager
+METHOD	y	(Ldl;)V	a	func_779_a	a
+METHOD	y	(Ldl;)V	b	func_778_b	b
+METHOD	y	(III)V	a	func_775_a	a
+METHOD	y	(Lgt;)V	a	func_776_a	sendAll
+METHOD	y	()V	a	func_777_a	a
+METHOD	y	(Ljh;)V	a	func_20178_a	sendTileEntity
+CLASS	z	net/minecraft/server/BlockPortal	net/minecraft/server/BlockPortal
+METHOD	z	(Ldj;III)Z	a_	func_4030_a_	a_
+CLASS	da	net/minecraft/server/WorldGenDungeons	net/minecraft/server/WorldGenDungeons
+METHOD	da	(Ljava/util/Random;)Lfy;	a	func_434_a	a
+METHOD	da	(Ljava/util/Random;)Ljava/lang/String;	b	func_433_b	b
+CLASS	db	net/minecraft/server/Packet8UpdateHealth	net/minecraft/server/Packet8UpdateHealth
+FIELD	db	I	a	field_9017_a	a
+CLASS	dc	net/minecraft/server/Packet13PlayerLookMove	net/minecraft/server/Packet13PlayerLookMove
+CLASS	dd	net/minecraft/server/ChunkCache	net/minecraft/server/ChunkCache
+FIELD	dd	I	a	field_823_a	a
+FIELD	dd	I	b	field_822_b	b
+FIELD	dd	[[Lhi;	c	field_825_c	c
+FIELD	dd	Ldj;	d	field_824_d	d
+CLASS	de	net/minecraft/server/FurnaceRecipes	net/minecraft/server/FurnaceRecipes
+FIELD	de	Lde;	a	field_21164_a	a
+FIELD	de	Ljava/util/Map;	b	field_21163_b	b
+METHOD	de	()Lde;	a	func_21162_a	getInstance
+METHOD	de	(ILfy;)V	a	func_21160_a	registerRecipe
+METHOD	de	(I)Lfy;	a	func_21161_a	a
+METHOD	de	()Ljava/util/Map;	b	func_25127_b	b
+CLASS	df	net/minecraft/server/Packet71Weather	net/minecraft/server/Packet71Weather
+FIELD	df	I	a	field_27043_a	a
+FIELD	df	I	b	field_27042_b	b
+FIELD	df	I	c	field_27046_c	c
+FIELD	df	I	d	field_27045_d	d
+FIELD	df	I	e	field_27044_e	e
+CLASS	dg	net/minecraft/server/IUpdatePlayerListBox	net/minecraft/server/IUpdatePlayerListBox
+METHOD	dg	()V	a	func_690_a	a
+CLASS	dh	net/minecraft/server/BlockObsidian	net/minecraft/server/BlockObsidian
+CLASS	di	net/minecraft/server/BlockPumpkin	net/minecraft/server/BlockPumpkin
+FIELD	di	Z	a	field_4086_a	a
+CLASS	dj	net/minecraft/server/World	net/minecraft/server/World
+FIELD	dj	Z	a	field_4280_a	a
+FIELD	dj	Ljava/util/List;	C	field_821_y	C
+FIELD	dj	Ljava/util/List;	b	field_815_a	entityList
+FIELD	dj	Ljava/util/List;	D	field_790_z	D
+FIELD	dj	Ljava/util/TreeSet;	E	field_789_A	E
+FIELD	dj	Ljava/util/Set;	F	field_788_B	F
+FIELD	dj	Ljava/util/List;	c	field_814_b	c
+FIELD	dj	Ljava/util/List;	G	field_20912_E	G
+FIELD	dj	Ljava/util/List;	d	field_805_k	players
+FIELD	dj	Ljava/util/List;	e	field_27081_e	e
+FIELD	dj	J	H	field_6159_E	H
+FIELD	dj	I	f	field_811_e	f
+FIELD	dj	I	g	field_4279_g	g
+FIELD	dj	I	h	field_4278_h	h
+FIELD	dj	F	i	field_27079_B	i
+FIELD	dj	F	j	field_27078_C	j
+FIELD	dj	F	k	field_27077_D	k
+FIELD	dj	F	l	field_27076_E	l
+FIELD	dj	I	m	field_27075_F	m
+FIELD	dj	I	n	field_27080_i	n
+FIELD	dj	Z	o	field_808_h	suppressPhysics
+FIELD	dj	J	I	field_784_F	I
+FIELD	dj	I	p	field_4277_j	p
+FIELD	dj	I	q	field_804_l	spawnMonsters
+FIELD	dj	Ljava/util/Random;	r	field_803_m	random
+FIELD	dj	Z	s	field_9212_p	s
+FIELD	dj	Los;	t	field_4272_q	worldProvider
+FIELD	dj	Ljava/util/List;	u	field_798_r	u
+FIELD	dj	Lbl;	v	field_783_G	chunkProvider
+FIELD	dj	Lom;	w	field_9211_s	w
+FIELD	dj	Lct;	x	field_797_s	worldData
+FIELD	dj	Z	y	field_9209_x	isLoading
+FIELD	dj	Z	J	field_22087_A	J
+FIELD	dj	Les;	z	field_28105_z	worldMaps
+FIELD	dj	Ljava/util/ArrayList;	K	field_9207_I	K
+FIELD	dj	Z	L	field_31048_L	L
+FIELD	dj	I	M	field_4265_J	M
+FIELD	dj	Z	N	field_21121_K	allowMonsters
+FIELD	dj	Z	O	field_21120_L	allowAnimals
+FIELD	dj	I	A	field_4268_y	field_4268_y
+FIELD	dj	Ljava/util/Set;	P	field_4264_K	P
+FIELD	dj	I	Q	field_4263_L	Q
+FIELD	dj	Ljava/util/List;	R	field_778_L	R
+FIELD	dj	Z	B	field_792_x	isStatic
+METHOD	dj	()Lph;	a	func_4077_a	getWorldChunkManager
+METHOD	dj	()Lbl;	b	func_22086_b	b
+METHOD	dj	()V	c	func_25072_c	c
+METHOD	dj	(II)I	a	func_528_f	a
+METHOD	dj	(ZLpj;)V	a	func_485_a	save
+METHOD	dj	()V	w	func_478_h	w
+METHOD	dj	(III)Z	f	func_20111_e	isEmpty
+METHOD	dj	(III)Z	g	func_530_e	isLoaded
+METHOD	dj	(IIII)Z	a	func_21118_a	areChunksLoaded
+METHOD	dj	(IIIIII)Z	a	func_466_a	a
+METHOD	dj	(II)Z	g	func_447_g	isChunkLoaded
+METHOD	dj	(II)Lhi;	b	func_492_a	getChunkAtWorldCoords
+METHOD	dj	(II)Lhi;	c	func_525_b	getChunkAt
+METHOD	dj	(IIIII)Z	a	func_470_a	setRawTypeIdAndData
+METHOD	dj	(IIII)Z	b	func_462_a	setRawTypeId
+METHOD	dj	(IIII)V	c	func_511_b	setData
+METHOD	dj	(IIII)Z	d	func_463_c	setRawData
+METHOD	dj	(IIII)Z	e	func_508_d	setTypeId
+METHOD	dj	(IIIII)Z	b	func_507_b	setTypeIdAndData
+METHOD	dj	(III)V	h	func_521_f	notify
+METHOD	dj	(IIII)V	f	func_454_e	update
+METHOD	dj	(IIII)V	g	func_498_f	g
+METHOD	dj	(III)V	i	func_21119_h	i
+METHOD	dj	(IIIIII)V	b	func_519_b	b
+METHOD	dj	(IIII)V	h	func_449_g	applyPhysics
+METHOD	dj	(IIII)V	k	func_527_k	k
+METHOD	dj	(III)Z	j	func_497_g	isChunkLoaded
+METHOD	dj	(III)I	k	func_28098_j	k
+METHOD	dj	(III)I	l	func_495_h	getLightLevel
+METHOD	dj	(IIIZ)I	a	func_517_a	a
+METHOD	dj	(III)Z	m	func_475_i	m
+METHOD	dj	(II)I	d	func_488_c	getHighestBlockYAt
+METHOD	dj	(Lco;IIII)V	a	func_4069_a	a
+METHOD	dj	(Lco;III)I	a	func_512_a	a
+METHOD	dj	(Lco;IIII)V	b	func_529_b	b
+METHOD	dj	(III)F	n	func_455_j	n
+METHOD	dj	()Z	d	func_453_a	d
+METHOD	dj	(Lba;Lba;)Lnh;	a	func_486_a	a
+METHOD	dj	(Lba;Lba;Z)Lnh;	a	func_505_a	rayTrace
+METHOD	dj	(Lba;Lba;ZZ)Lnh;	a	func_28099_a	rayTrace
+METHOD	dj	(Llq;Ljava/lang/String;FF)V	a	func_506_a	makeSound
+METHOD	dj	(DDDLjava/lang/String;FF)V	a	func_502_a	makeSound
+METHOD	dj	(Ljava/lang/String;III)V	a	func_491_a	a
+METHOD	dj	(Ljava/lang/String;DDDDDD)V	a	func_514_a	a
+METHOD	dj	(Llq;)Z	a	func_27073_a	strikeLightning
+METHOD	dj	(Llq;)Z	b	func_526_a	addEntity
+METHOD	dj	(Llq;)V	c	func_479_b	c
+METHOD	dj	(Llq;)V	d	func_531_c	d
+METHOD	dj	(Llq;)V	e	func_22085_d	kill
+METHOD	dj	(Llq;)V	f	func_22073_e	removeEntity
+METHOD	dj	(Ljp;)V	a	func_4072_a	addIWorldAccess
+METHOD	dj	(Llq;Lcz;)Ljava/util/List;	a	func_481_a	getEntities
+METHOD	dj	(F)I	a	func_493_a	a
+METHOD	dj	(F)F	b	func_477_b	b
+METHOD	dj	(II)I	e	func_28100_e	e
+METHOD	dj	(II)I	f	func_4075_e	f
+METHOD	dj	(IIIII)V	c	func_22074_c	c
+METHOD	dj	()V	e	func_459_b	cleanUp
+METHOD	dj	(Ljava/util/Collection;)V	a	func_31047_a	a
+METHOD	dj	(Llq;)V	g	func_520_e	playerJoinedWorld
+METHOD	dj	(Llq;Z)V	a	func_4074_a	entityJoinedWorld
+METHOD	dj	(Lcz;)Z	a	func_522_a	containsEntity
+METHOD	dj	(Lcz;)Z	b	func_27069_b	b
+METHOD	dj	(Lcz;)Z	c	func_469_b	c
+METHOD	dj	(Lcz;)Z	d	func_523_c	d
+METHOD	dj	(Lcz;Lhj;Llq;)Z	a	func_490_a	a
+METHOD	dj	(Lcz;Lhj;)Z	a	func_500_a	a
+METHOD	dj	(Lcz;Lhj;)Z	b	func_524_b	b
+METHOD	dj	(Llq;DDDF)Lkh;	a	func_12013_a	a
+METHOD	dj	(Llq;DDDFZ)Lkh;	a	func_12015_a	createExplosion
+METHOD	dj	(Lba;Lcz;)F	a	func_494_a	a
+METHOD	dj	(Lem;IIII)V	a	func_28096_a	func_28096_a
+METHOD	dj	(IIILjh;)V	a	func_473_a	setTileEntity
+METHOD	dj	(III)V	o	func_513_l	o
+METHOD	dj	(III)Z	p	func_28095_p	p
+METHOD	dj	()Z	f	func_6156_d	doLighting
+METHOD	dj	(Lco;IIIIII)V	a	func_483_a	a
+METHOD	dj	(Lco;IIIIIIZ)V	a	func_484_a	a
+METHOD	dj	()V	g	func_465_d	g
+METHOD	dj	(ZZ)V	a	func_21116_a	setSpawnFlags
+METHOD	dj	()V	h	func_22077_g	doTick
+METHOD	dj	()V	x	func_27070_x	x
+METHOD	dj	()V	i	func_27066_i	i
+METHOD	dj	()V	y	func_27071_y	y
+METHOD	dj	()V	j	func_4073_g	j
+METHOD	dj	(Z)Z	a	func_518_a	a
+METHOD	dj	(Llq;Lcz;)Ljava/util/List;	b	func_450_b	b
+METHOD	dj	(Ljava/lang/Class;Lcz;)Ljava/util/List;	a	func_457_a	a
+METHOD	dj	(IIILjh;)V	b	func_515_b	b
+METHOD	dj	(Ljava/lang/Class;)I	a	func_487_a	a
+METHOD	dj	(Ljava/util/List;)V	a	func_464_a	a
+METHOD	dj	(Ljava/util/List;)V	b	func_461_b	b
+METHOD	dj	(IIIIZI)Z	a	func_516_a	a
+METHOD	dj	(Llq;Llq;F)Lcb;	a	func_482_a	findPath
+METHOD	dj	(Llq;IIIF)Lcb;	a	func_501_a	a
+METHOD	dj	(IIII)Z	i	func_448_i	isBlockFacePowered
+METHOD	dj	(III)Z	q	func_496_m	isBlockPowered
+METHOD	dj	(IIII)Z	j	func_489_j	isBlockFaceIndirectlyPowered
+METHOD	dj	(III)Z	r	func_474_n	isBlockIndirectlyPowered
+METHOD	dj	(Llq;D)Lem;	a	func_472_a	findNearbyPlayer
+METHOD	dj	(DDDD)Lem;	a	func_456_a	a
+METHOD	dj	(Ljava/lang/String;)Lem;	a	func_25071_a	a
+METHOD	dj	(IIIIII)[B	c	func_504_c	getMultiChunkData
+METHOD	dj	()V	k	func_476_g	k
+METHOD	dj	(J)V	a	func_22076_a	setTime
+METHOD	dj	(J)V	b	func_32005_b	setTimeAndFixTicklists
+METHOD	dj	()J	l	func_22079_j	getSeed
+METHOD	dj	()J	m	func_22080_k	getTime
+METHOD	dj	()Lay;	n	func_22078_l	getSpawn
+METHOD	dj	(Lem;III)Z	a	func_6157_a	a
+METHOD	dj	(Llq;B)V	a	func_9206_a	a
+METHOD	dj	()Lbl;	o	func_25073_n	o
+METHOD	dj	(IIIII)V	d	func_21117_c	playNote
+METHOD	dj	()Lom;	p	func_22075_m	p
+METHOD	dj	()Lct;	q	func_22081_n	q
+METHOD	dj	()V	r	func_22082_o	everyoneSleeping
+METHOD	dj	()V	s	func_22083_p	checkSleepStatus
+METHOD	dj	()Z	t	func_22084_q	everyoneDeeplySleeping
+METHOD	dj	(F)F	c	func_27065_c	c
+METHOD	dj	(F)F	d	func_27074_d	d
+METHOD	dj	()Z	u	func_27067_u	u
+METHOD	dj	()Z	v	func_27068_v	v
+METHOD	dj	(III)Z	s	func_27072_q	s
+METHOD	dj	(Ljava/lang/String;Lfa;)V	a	func_28102_a	a
+METHOD	dj	(Ljava/lang/Class;Ljava/lang/String;)Lfa;	a	func_28103_a	a
+METHOD	dj	(Ljava/lang/String;)I	b	func_28104_b	b
+METHOD	dj	(IIIII)V	e	func_28097_e	func_28097_e
+METHOD	dj	(Lem;IIIII)V	a	func_28101_a	func_28101_a
+CLASS	dk	net/minecraft/server/IMonster	net/minecraft/server/IMonster
+CLASS	dl	net/minecraft/server/EntityPlayer	net/minecraft/server/EntityPlayer
+FIELD	dl	Lha;	a	field_20908_a	netServerHandler
+FIELD	dl	Lnet/minecraft/server/MinecraftServer;	b	field_419_b	b
+FIELD	dl	Lpu;	c	field_425_ad	itemInWorldManager
+FIELD	dl	D	d	field_9155_d	d
+FIELD	dl	D	e	field_9154_e	e
+FIELD	dl	Ljava/util/List;	f	field_422_ag	chunkCoordIntPairQueue
+FIELD	dl	Ljava/util/Set;	g	field_420_ah	playerChunkCoordIntPairs
+FIELD	dl	I	bL	field_9156_bu	bL
+FIELD	dl	I	bM	field_15004_bw	bM
+FIELD	dl	[Lfy;	bN	field_20066_bG	bN
+FIELD	dl	I	bO	field_20065_bH	bO
+FIELD	dl	Z	h	field_20064_am	h
+METHOD	dl	()V	o	func_20057_k	syncInventory
+METHOD	dl	(I)Lfy;	c_	func_21073_a	c_
+METHOD	dl	(Z)V	a	func_22070_a	a
+METHOD	dl	(Ljh;)V	a	func_20063_a	a
+METHOD	dl	()V	x	func_22068_s	x
+METHOD	dl	(DZ)V	b	func_9153_b	b
+METHOD	dl	()V	ai	func_20060_R	ai
+METHOD	dl	(Lcl;)V	a	func_28017_a	updateInventory
+METHOD	dl	()V	z	func_20058_J	z
+METHOD	dl	()V	A	func_20059_K	A
+METHOD	dl	(FFZZFF)V	a	func_22069_a	a
+METHOD	dl	()V	B	func_30002_A	B
+METHOD	dl	()V	C	func_30001_B	C
+CLASS	dm	net/minecraft/server/WorldManager	net/minecraft/server/WorldManager
+FIELD	dm	Lnet/minecraft/server/MinecraftServer;	a	field_953_a	server
+FIELD	dm	Ldp;	b	field_28134_b	world
+CLASS	dn	net/minecraft/server/BlockWorkbench	net/minecraft/server/BlockWorkbench
+CLASS	do	net/minecraft/server/BlockGlass	net/minecraft/server/BlockGlass
+CLASS	dp	net/minecraft/server/WorldServer	net/minecraft/server/WorldServer
+FIELD	dp	Lhe;	C	field_20911_y	chunkProviderServer
+FIELD	dp	Z	D	field_819_z	weirdIsOpCache
+FIELD	dp	Z	E	field_816_A	canSave
+FIELD	dp	Lnet/minecraft/server/MinecraftServer;	F	field_6160_D	server
+FIELD	dp	Lgo;	G	field_20912_E	G
+METHOD	dp	(Llq;Z)V	b	func_12017_b	vehicleEnteredWorld
+METHOD	dp	(IIIIII)Ljava/util/List;	d	func_532_d	getTileEntities
+METHOD	dp	(I)Llq;	a	func_6158_a	getEntity
+METHOD	dp	()V	w	func_30006_w	saveLevel
+CLASS	dq	net/minecraft/server/PlayerNBTManager	net/minecraft/server/PlayerNBTManager
+FIELD	dq	Ljava/util/logging/Logger;	a	field_1003_a	a
+FIELD	dq	Ljava/io/File;	b	field_22099_b	b
+FIELD	dq	Ljava/io/File;	c	field_1002_b	c
+FIELD	dq	Ljava/io/File;	d	field_28112_d	d
+FIELD	dq	J	e	field_22100_d	e
+METHOD	dq	()V	f	func_22098_f	f
+METHOD	dq	()Ljava/io/File;	a	func_22097_a	a
+METHOD	dq	(Ljava/lang/String;)Liq;	a	func_25074_a	a
+CLASS	dr	net/minecraft/server/WorldGenMinable	net/minecraft/server/WorldGenMinable
+FIELD	dr	I	a	field_762_a	a
+FIELD	dr	I	b	field_761_b	b
+CLASS	ds	net/minecraft/server/Packet61	net/minecraft/server/Packet61
+FIELD	ds	I	a	field_28047_a	a
+FIELD	ds	I	b	field_28046_b	b
+FIELD	ds	I	c	field_28050_c	c
+FIELD	ds	I	d	field_28049_d	d
+FIELD	ds	I	e	field_28048_e	e
+CLASS	dt	net/minecraft/server/BlockJukeBox	net/minecraft/server/BlockJukeBox
+METHOD	dt	(Ldj;IIII)V	f	func_286_f	f
+METHOD	dt	(Ldj;III)V	b_	func_28035_b_	b_
+CLASS	du	net/minecraft/server/FontAllowedCharacters	net/minecraft/server/FontAllowedCharacters
+FIELD	du	Ljava/lang/String;	a	field_20162_a	allowedCharacters
+FIELD	du	[C	b	field_22175_b	b
+METHOD	du	()Ljava/lang/String;	a	func_20161_a	a
+CLASS	dv	net/minecraft/server/EntitySkeleton	net/minecraft/server/EntitySkeleton
+FIELD	dv	Lfy;	a	field_4108_a	a
+CLASS	dw	net/minecraft/server/BiomeDesert	net/minecraft/server/BiomeDesert
+CLASS	dx	net/minecraft/server/PlayerList	net/minecraft/server/PlayerList
+FIELD	dx	[Lkd;	a	field_949_a	a
+FIELD	dx	I	b	field_948_b	b
+FIELD	dx	I	c	field_952_c	c
+FIELD	dx	F	d	field_951_d	d
+FIELD	dx	I	e	field_950_e	e
+METHOD	dx	(J)I	e	func_671_e	e
+METHOD	dx	(I)I	a	func_676_a	a
+METHOD	dx	(II)I	a	func_678_a	a
+METHOD	dx	(J)Ljava/lang/Object;	a	func_677_a	a
+METHOD	dx	(JLjava/lang/Object;)V	a	func_675_a	a
+METHOD	dx	(I)V	b	func_680_b	b
+METHOD	dx	([Lkd;)V	a	func_673_a	a
+METHOD	dx	(J)Ljava/lang/Object;	b	func_670_b	b
+METHOD	dx	(J)Lkd;	c	func_672_c	c
+METHOD	dx	(IJLjava/lang/Object;I)V	a	func_679_a	a
+METHOD	dx	(J)I	d	func_674_d	d
+CLASS	dy	net/minecraft/server/MapGenBase	net/minecraft/server/MapGenBase
+FIELD	dy	I	a	field_947_a	a
+FIELD	dy	Ljava/util/Random;	b	field_946_b	b
+METHOD	dy	(Ldj;IIII[B)V	a	func_666_a	a
+METHOD	dy	(Lbl;Ldj;II[B)V	a	func_667_a	a
+CLASS	dz	net/minecraft/server/Pathfinder	net/minecraft/server/Pathfinder
+FIELD	dz	Lpb;	a	field_941_a	a
+FIELD	dz	Lhd;	b	field_940_b	b
+FIELD	dz	Lgo;	c	field_943_c	c
+FIELD	dz	[Ld;	d	field_942_d	d
+METHOD	dz	(Llq;Llq;F)Lcb;	a	func_657_a	a
+METHOD	dz	(Llq;IIIF)Lcb;	a	func_651_a	a
+METHOD	dz	(Llq;DDDF)Lcb;	a	func_652_a	a
+METHOD	dz	(Llq;Ld;Ld;Ld;F)Lcb;	a	func_656_a	a
+METHOD	dz	(Llq;Ld;Ld;Ld;F)I	b	func_654_b	b
+METHOD	dz	(Llq;IIILd;I)Ld;	a	func_650_a	a
+METHOD	dz	(III)Ld;	a	func_655_a	a
+METHOD	dz	(Llq;IIILd;)I	a	func_649_a	a
+METHOD	dz	(Ld;Ld;)Lcb;	a	func_653_a	a
+CLASS	ea	net/minecraft/server/WorldGenCactus	net/minecraft/server/WorldGenCactus
+CLASS	eb	net/minecraft/server/EntityBoat	net/minecraft/server/EntityBoat
+FIELD	eb	I	a	field_9178_a	damage
+FIELD	eb	I	b	field_9177_b	b
+FIELD	eb	I	c	field_436_ad	c
+FIELD	eb	I	d	field_9176_d	d
+FIELD	eb	D	e	field_9174_e	e
+FIELD	eb	D	f	field_9172_f	f
+FIELD	eb	D	g	field_9175_aj	g
+FIELD	eb	D	h	field_9173_ak	h
+FIELD	eb	D	i	field_9171_al	i
+CLASS	ec	net/minecraft/server/EntityCreeper	net/minecraft/server/EntityCreeper
+FIELD	ec	I	a	field_406_a	timeSinceIgnited
+FIELD	ec	I	b	field_405_b	lastActiveTime
+METHOD	ec	()Z	s	func_27014_t	isPowered
+METHOD	ec	()I	x	func_21048_K	x
+METHOD	ec	(I)V	e	func_21049_a	e
+CLASS	ed	net/minecraft/server/WorldGenLightStone1	net/minecraft/server/WorldGenLightStone1
+CLASS	ee	net/minecraft/server/NetLoginHandler	net/minecraft/server/NetLoginHandler
+FIELD	ee	Ljava/util/logging/Logger;	a	field_9_a	a
+FIELD	ee	Ljava/util/Random;	d	field_6_d	d
+FIELD	ee	Ljl;	b	field_8_b	networkManager
+FIELD	ee	Z	c	field_7_c	c
+FIELD	ee	Lnet/minecraft/server/MinecraftServer;	e	field_5_e	server
+FIELD	ee	I	f	field_9005_f	f
+FIELD	ee	Ljava/lang/String;	g	field_3_g	g
+FIELD	ee	Liv;	h	field_9004_h	h
+FIELD	ee	Ljava/lang/String;	i	field_1_i	i
+METHOD	ee	()V	a	func_33_a	a
+METHOD	ee	(Ljava/lang/String;)V	a	func_34_b	disconnect
+METHOD	ee	(Liv;)V	b	func_6007_b	b
+METHOD	ee	()Ljava/lang/String;	b	func_35_b	b
+METHOD	ee	(Lee;)Ljava/lang/String;	a	func_32_a	a
+METHOD	ee	(Lee;Liv;)Liv;	a	func_31_a	a
+CLASS	ef	net/minecraft/server/Packet28EntityVelocity	net/minecraft/server/Packet28EntityVelocity
+FIELD	ef	I	a	field_6040_a	a
+FIELD	ef	I	b	field_6039_b	b
+FIELD	ef	I	c	field_6042_c	c
+FIELD	ef	I	d	field_6041_d	d
+CLASS	eg	net/minecraft/server/SecondaryWorldServer	net/minecraft/server/SecondaryWorldServer
+CLASS	eh	net/minecraft/server/EntityWolf	net/minecraft/server/EntityWolf
+FIELD	eh	Z	a	field_25039_a	a
+FIELD	eh	F	b	field_25038_b	b
+FIELD	eh	F	c	field_25044_c	c
+FIELD	eh	Z	f	field_25043_f	f
+FIELD	eh	Z	g	field_25042_g	g
+FIELD	eh	F	h	field_25041_h	h
+FIELD	eh	F	i	field_25040_i	i
+METHOD	eh	(Llq;F)V	c	func_25035_b	c
+METHOD	eh	(Z)V	a	func_25033_a	a
+METHOD	eh	()Ljava/lang/String;	x	func_25034_v	getOwnerName
+METHOD	eh	(Ljava/lang/String;)V	a	func_25029_a	setOwnerName
+METHOD	eh	()Z	y	func_25036_w	isSitting
+METHOD	eh	(Z)V	b	func_25031_b	setSitting
+METHOD	eh	()Z	z	func_25028_x	isAngry
+METHOD	eh	(Z)V	c	func_25037_c	setAngry
+METHOD	eh	()Z	A	func_25030_y	isTamed
+METHOD	eh	(Z)V	d	func_25032_d	setTamed
+CLASS	ei	net/minecraft/server/BlockSand	net/minecraft/server/BlockSand
+FIELD	ei	Z	a	field_650_a	instaFall
+METHOD	ei	(Ldj;III)V	g	func_284_h	g
+METHOD	ei	(Ldj;III)Z	c_	func_285_g	c_
+CLASS	ej	net/minecraft/server/Item	net/minecraft/server/Item
+FIELD	ej	Ljava/util/Random;	b	field_4154_b	b
+FIELD	ej	[Lej;	c	field_176_c	byId
+FIELD	ej	Lej;	d	field_4153_d	IRON_SPADE
+FIELD	ej	Lej;	e	field_4152_e	IRON_PICKAXE
+FIELD	ej	Lej;	f	field_4151_f	IRON_AXE
+FIELD	ej	Lej;	g	field_4150_g	FLINT_AND_STEEL
+FIELD	ej	Lej;	h	field_171_h	APPLE
+FIELD	ej	Lej;	i	field_4149_i	BOW
+FIELD	ej	Lej;	j	field_4148_j	ARROW
+FIELD	ej	Lej;	k	field_168_k	COAL
+FIELD	ej	Lej;	l	field_167_l	DIAMOND
+FIELD	ej	Lej;	m	field_166_m	IRON_INGOT
+FIELD	ej	Lej;	n	field_4147_n	GOLD_INGOT
+FIELD	ej	Lej;	o	field_4146_o	IRON_SWORD
+FIELD	ej	Lej;	p	field_4145_p	WOOD_SWORD
+FIELD	ej	Lej;	q	field_4144_q	WOOD_SPADE
+FIELD	ej	Lej;	r	field_4143_r	WOOD_PICKAXE
+FIELD	ej	Lej;	s	field_4142_s	WOOD_AXE
+FIELD	ej	Lej;	t	field_4141_t	STONE_SWORD
+FIELD	ej	Lej;	u	field_4140_u	STONE_SPADE
+FIELD	ej	Lej;	v	field_4139_v	STONE_PICKAXE
+FIELD	ej	Lej;	w	field_4138_w	STONE_AXE
+FIELD	ej	Lej;	x	field_4137_x	DIAMOND_SWORD
+FIELD	ej	Lej;	y	field_4136_y	DIAMOND_SPADE
+FIELD	ej	Lej;	z	field_4135_z	DIAMOND_PICKAXE
+FIELD	ej	Lej;	A	field_4175_A	DIAMOND_AXE
+FIELD	ej	Lej;	B	field_209_B	STICK
+FIELD	ej	Lej;	C	field_4173_C	BOWL
+FIELD	ej	Lej;	D	field_4172_D	MUSHROOM_SOUP
+FIELD	ej	Lej;	E	field_4171_E	GOLD_SWORD
+FIELD	ej	Lej;	F	field_4169_F	GOLD_SPADE
+FIELD	ej	Lej;	G	field_4168_G	GOLD_PICKAXE
+FIELD	ej	Lej;	H	field_4167_H	GOLD_AXE
+FIELD	ej	Lej;	I	field_196_I	STRING
+FIELD	ej	Lej;	J	field_194_J	FEATHER
+FIELD	ej	Lej;	K	field_193_K	SULPHUR
+FIELD	ej	Lej;	L	field_4166_L	WOOD_HOE
+FIELD	ej	Lej;	M	field_4165_M	STONE_HOE
+FIELD	ej	Lej;	N	field_4164_N	IRON_HOE
+FIELD	ej	Lej;	O	field_4163_O	DIAMOND_HOE
+FIELD	ej	Lej;	P	field_4162_P	GOLD_HOE
+FIELD	ej	Lej;	Q	field_187_Q	SEEDS
+FIELD	ej	Lej;	R	field_186_R	WHEAT
+FIELD	ej	Lej;	S	field_185_S	BREAD
+FIELD	ej	Lej;	T	field_4161_T	LEATHER_HELMET
+FIELD	ej	Lej;	U	field_4160_U	LEATHER_CHESTPLATE
+FIELD	ej	Lej;	V	field_4159_V	LEATHER_LEGGINGS
+FIELD	ej	Lej;	W	field_4158_W	LEATHER_BOOTS
+FIELD	ej	Lej;	X	field_4157_X	CHAINMAIL_HELMET
+FIELD	ej	Lej;	Y	field_4156_Y	CHAINMAIL_CHESTPLATE
+FIELD	ej	Lej;	Z	field_4155_Z	CHAINMAIL_LEGGINGS
+FIELD	ej	Lej;	aa	field_4189_aa	CHAINMAIL_BOOTS
+FIELD	ej	Lej;	ab	field_4188_ab	IRON_HELMET
+FIELD	ej	Lej;	ac	field_4187_ac	IRON_CHESTPLATE
+FIELD	ej	Lej;	ad	field_4186_ad	IRON_LEGGINGS
+FIELD	ej	Lej;	ae	field_4185_ae	IRON_BOOTS
+FIELD	ej	Lej;	af	field_4184_af	DIAMOND_HELMET
+FIELD	ej	Lej;	ag	field_4183_ag	DIAMOND_CHESTPLATE
+FIELD	ej	Lej;	ah	field_4182_ah	DIAMOND_LEGGINGS
+FIELD	ej	Lej;	ai	field_4181_ai	DIAMOND_BOOTS
+FIELD	ej	Lej;	aj	field_4180_aj	GOLD_HELMET
+FIELD	ej	Lej;	ak	field_4179_ak	GOLD_CHESTPLATE
+FIELD	ej	Lej;	al	field_4178_al	GOLD_LEGGINGS
+FIELD	ej	Lej;	am	field_4177_am	GOLD_BOOTS
+FIELD	ej	Lej;	an	field_216_an	FLINT
+FIELD	ej	Lej;	ao	field_215_ao	PORK
+FIELD	ej	Lej;	ap	field_4176_ap	GRILLED_PORK
+FIELD	ej	Lej;	aq	field_213_aq	PAINTING
+FIELD	ej	Lej;	ar	field_212_ar	GOLDEN_APPLE
+FIELD	ej	Lej;	as	field_4174_as	SIGN
+FIELD	ej	Lej;	at	field_208_at	WOOD_DOOR
+FIELD	ej	Lej;	au	field_205_au	BUCKET
+FIELD	ej	Lej;	av	field_4170_av	WATER_BUCKET
+FIELD	ej	Lej;	aw	field_201_aw	LAVA_BUCKET
+FIELD	ej	Lej;	ax	field_199_ax	MINECART
+FIELD	ej	Lej;	ay	field_197_ay	SADDLE
+FIELD	ej	Lej;	az	field_195_az	IRON_DOOR
+FIELD	ej	Lej;	aA	field_252_aA	REDSTONE
+FIELD	ej	Lej;	aB	field_251_aB	SNOW_BALL
+FIELD	ej	Lej;	aC	field_4205_aC	BOAT
+FIELD	ej	Lej;	aD	field_249_aD	LEATHER
+FIELD	ej	Lej;	aE	field_4204_aE	MILK_BUCKET
+FIELD	ej	Lej;	aF	field_4203_aF	CLAY_BRICK
+FIELD	ej	Lej;	aG	field_246_aG	CLAY_BALL
+FIELD	ej	Lej;	aH	field_4202_aH	SUGAR_CANE
+FIELD	ej	Lej;	aI	field_4201_aI	PAPER
+FIELD	ej	Lej;	aJ	field_4200_aJ	BOOK
+FIELD	ej	Lej;	aK	field_242_aK	SLIME_BALL
+FIELD	ej	Lej;	aL	field_4199_aL	STORAGE_MINECART
+FIELD	ej	Lej;	aM	field_4198_aM	POWERED_MINECART
+FIELD	ej	Lej;	aN	field_239_aN	EGG
+FIELD	ej	Lej;	aO	field_4197_aO	COMPASS
+FIELD	ej	Lej;	aP	field_4196_aP	FISHING_ROD
+FIELD	ej	Lej;	aQ	field_4195_aQ	WATCH
+FIELD	ej	Lej;	aR	field_4194_aR	GLOWSTONE_DUST
+FIELD	ej	Lej;	aS	field_4193_aS	RAW_FISH
+FIELD	ej	Lej;	aT	field_4192_aT	COOKED_FISH
+FIELD	ej	Lej;	aU	field_21097_aU	INK_SACK
+FIELD	ej	Lej;	aV	field_21096_aV	BONE
+FIELD	ej	Lej;	aW	field_21095_aW	SUGAR
+FIELD	ej	Lej;	aX	field_21098_aX	CAKE
+FIELD	ej	Lej;	aY	field_22008_aY	BED
+FIELD	ej	Lej;	aZ	field_22007_aZ	DIODE
+FIELD	ej	Lej;	ba	field_25008_ba	COOKIE
+FIELD	ej	Lol;	bb	field_28021_bb	field_28021_bb
+FIELD	ej	Las;	bc	field_31022_bc	SHEARS
+FIELD	ej	Lej;	bd	field_236_aQ	GOLD_RECORD
+FIELD	ej	Lej;	be	field_4191_aV	GREEN_RECORD
+FIELD	ej	I	bf	field_234_aS	id
+FIELD	ej	I	bg	field_233_aT	maxStackSize
+FIELD	ej	I	a	field_232_aU	durability
+FIELD	ej	I	bh	field_6153_aZ	textureId
+FIELD	ej	Z	bi	field_230_aW	bi
+FIELD	ej	Z	bj	field_21094_bf	bj
+FIELD	ej	Lej;	bk	field_20900_a	craftingResult
+FIELD	ej	Ljava/lang/String;	bl	field_275_a	name
+METHOD	ej	(Lfy;Lem;Ldj;IIII)Z	a	func_78_a	a
+METHOD	ej	(Lfy;IIIILhl;)Z	a	func_25007_a	func_25007_a
+METHOD	ej	(Lna;)Z	a	func_80_a	a
+METHOD	ej	(Lfy;Lna;)F	a	func_79_a	a
+METHOD	ej	(Lfy;Ldj;Lem;)Lfy;	a	func_6152_a	a
+METHOD	ej	(I)I	a	func_21089_a	filterData
+METHOD	ej	(I)Lej;	b	func_4049_a	b
+METHOD	ej	(I)Lej;	c	func_21086_c	c
+METHOD	ej	(II)Lej;	a	func_20104_a	a
+METHOD	ej	()I	c	func_81_a	getMaxStackSize
+METHOD	ej	()Z	d	func_21092_c	d
+METHOD	ej	(Z)Lej;	a	func_21091_a	a
+METHOD	ej	()I	e	func_77_b	e
+METHOD	ej	(I)Lej;	d	func_21090_d	d
+METHOD	ej	()Z	f	func_25005_e	f
+METHOD	ej	(Lfy;Lhl;Lhl;)Z	a	func_9201_a	a
+METHOD	ej	(Llq;)I	a	func_9203_a	a
+METHOD	ej	(Lfy;Lhl;)V	a	func_9202_b	a
+METHOD	ej	()Lej;	g	func_4050_c	g
+METHOD	ej	(Ljava/lang/String;)Lej;	a	func_20105_a	a
+METHOD	ej	()Ljava/lang/String;	a	func_20106_a	a
+METHOD	ej	(Lej;)Lej;	a	func_21093_a	a
+METHOD	ej	()Lej;	h	func_21087_f	h
+METHOD	ej	()Z	i	func_21088_g	i
+METHOD	ej	()Ljava/lang/String;	j	func_25006_i	j
+METHOD	ej	(Lfy;Ldj;Llq;IZ)V	a	func_28018_a	a
+METHOD	ej	(Lfy;Ldj;Lem;)V	c	func_28020_c	c
+METHOD	ej	()Z	b	func_28019_b	b
+CLASS	ek	net/minecraft/server/ItemLog	net/minecraft/server/ItemLog
+CLASS	el	net/minecraft/server/Slot	net/minecraft/server/Slot
+FIELD	el	I	d	field_20097_a	index
+FIELD	el	Lhp;	e	field_20096_b	inventory
+FIELD	el	I	a	field_20100_c	a
+FIELD	el	I	b	field_20099_d	b
+FIELD	el	I	c	field_20098_e	c
+METHOD	el	(Lfy;)Z	b	func_20095_a	isAllowed
+METHOD	el	(Lfy;)V	a	func_20091_b	a
+METHOD	el	()Lfy;	a	func_20092_c	getItem
+METHOD	el	()Z	b	func_27006_b	b
+METHOD	el	(Lfy;)V	c	func_20089_b	c
+METHOD	el	()V	c	func_20094_d	c
+METHOD	el	()I	d	func_20093_a	d
+METHOD	el	(I)Lfy;	a	func_20088_a	a
+METHOD	el	(Lhp;I)Z	a	func_20090_a	a
+CLASS	em	net/minecraft/server/EntityHuman	net/minecraft/server/EntityHuman
+FIELD	em	Lfx;	i	field_416_aj	inventory
+FIELD	em	Lcl;	j	field_20053_ao	defaultContainer
+FIELD	em	Lcl;	k	field_20052_ap	activeContainer
+FIELD	em	B	l	field_9152_am	l
+FIELD	em	I	m	field_9151_an	m
+FIELD	em	F	n	field_9150_ao	n
+FIELD	em	F	o	field_9149_ap	o
+FIELD	em	Z	p	field_9148_aq	p
+FIELD	em	I	q	field_9147_ar	q
+FIELD	em	Ljava/lang/String;	r	field_409_aq	name
+FIELD	em	I	s	field_4110_as	dimension
+FIELD	em	D	t	field_20047_ay	t
+FIELD	em	D	u	field_20046_az	u
+FIELD	em	D	v	field_20051_aA	v
+FIELD	em	D	w	field_20050_aB	w
+FIELD	em	D	x	field_20049_aC	x
+FIELD	em	D	y	field_20048_aD	y
+FIELD	em	Z	z	field_21900_a	sleeping
+FIELD	em	Lay;	A	field_21901_b	A
+FIELD	em	I	a	field_21902_c	sleepTicks
+FIELD	em	F	B	field_22066_z	B
+FIELD	em	F	C	field_22067_A	C
+FIELD	em	Lay;	b	field_24900_d	b
+FIELD	em	Lay;	c	field_27995_d	c
+FIELD	em	I	D	field_28016_C	D
+FIELD	em	Z	E	field_28015_D	E
+FIELD	em	F	F	field_28014_E	F
+FIELD	em	I	d	field_421_a	d
+FIELD	em	Lhq;	G	field_6124_at	hookedFish
+METHOD	em	()V	y	func_20043_I	y
+METHOD	em	(Llq;)V	i	func_171_h	i
+METHOD	em	()V	F	func_161_a	F
+METHOD	em	(Lfy;)V	b	func_20044_b	b
+METHOD	em	(Lfy;Z)V	a	func_169_a	a
+METHOD	em	(Lez;)V	a	func_162_a	a
+METHOD	em	(Lna;)F	a	func_165_a	a
+METHOD	em	(Lna;)Z	b	func_167_b	b
+METHOD	em	(Lhp;)V	a	func_166_a	a
+METHOD	em	(III)V	b	func_174_A	b
+METHOD	em	(Llq;I)V	b	func_163_c	receive
+METHOD	em	()V	s	func_22064_l_	s
+METHOD	em	()Z	j_	func_27016_t	j_
+METHOD	em	(Lhl;Z)V	a	func_25047_a	a
+METHOD	em	(Lln;)V	a	func_170_a	a
+METHOD	em	(Lak;)V	a	func_21072_a	a
+METHOD	em	(Lpq;)V	a	func_4048_a	a
+METHOD	em	(Llq;)V	c	func_9145_g	c
+METHOD	em	()Lfy;	G	func_172_B	G
+METHOD	em	()V	H	func_164_C	H
+METHOD	em	()V	w	func_168_z	w
+METHOD	em	(Llq;)V	d	func_9146_h	d
+METHOD	em	(Lfy;)V	a	func_20045_a	a
+METHOD	em	(III)Lbw;	a	func_22060_a	a
+METHOD	em	(I)V	e	func_22059_e	e
+METHOD	em	(ZZZ)V	a	func_22062_a	a
+METHOD	em	()Z	o	func_22063_l	o
+METHOD	em	(Ldj;Lay;)Lay;	a	func_25051_a	getBed
+METHOD	em	()Z	M	func_22065_F	isDeeplySleeping
+METHOD	em	(Ljava/lang/String;)V	a	func_22061_a	a
+METHOD	em	()Lay;	N	func_25049_H	getBed
+METHOD	em	(Lay;)V	a	func_25050_a	a
+METHOD	em	(Lns;)V	a	func_27017_a	a
+METHOD	em	(Lns;I)V	a	func_25046_a	a
+METHOD	em	(DDD)V	h	func_25045_g	h
+METHOD	em	(DDD)V	i	func_27015_h	i
+CLASS	en	net/minecraft/server/EmptyClass1	net/minecraft/server/EmptyClass1
+CLASS	eo	net/minecraft/server/Packet15Place	net/minecraft/server/Packet15Place
+FIELD	eo	I	a	field_78_a	a
+FIELD	eo	I	b	field_77_b	b
+FIELD	eo	I	c	field_81_c	c
+FIELD	eo	I	d	field_80_d	face
+FIELD	eo	Lfy;	e	field_79_e	itemstack
+CLASS	ep	net/minecraft/server/EntityMonster	net/minecraft/server/EntityMonster
+FIELD	ep	I	c	field_404_af	damage
+CLASS	eq	net/minecraft/server/RecipesTools	net/minecraft/server/RecipesTools
+FIELD	eq	[[Ljava/lang/String;	a	field_20158_a	a
+FIELD	eq	[[Ljava/lang/Object;	b	field_20157_b	b
+METHOD	eq	(Ley;)V	a	func_20156_a	a
+CLASS	er	net/minecraft/server/BlockBookshelf	net/minecraft/server/BlockBookshelf
+CLASS	es	net/minecraft/server/WorldMapCollection	net/minecraft/server/WorldMapCollection
+FIELD	es	Lom;	a	field_28180_a	a
+FIELD	es	Ljava/util/Map;	b	field_28179_b	b
+FIELD	es	Ljava/util/List;	c	field_28182_c	c
+FIELD	es	Ljava/util/Map;	d	field_28181_d	d
+METHOD	es	(Ljava/lang/Class;Ljava/lang/String;)Lfa;	a	func_28178_a	a
+METHOD	es	(Ljava/lang/String;Lfa;)V	a	func_28177_a	a
+METHOD	es	()V	a	func_28176_a	a
+METHOD	es	(Lfa;)V	a	func_28175_a	a
+METHOD	es	()V	b	func_28174_b	b
+METHOD	es	(Ljava/lang/String;)I	a	func_28173_a	a
+CLASS	et	net/minecraft/server/WorldChunkManagerHell	net/minecraft/server/WorldChunkManagerHell
+FIELD	et	Lgs;	e	field_4262_e	e
+FIELD	et	D	f	field_4261_f	f
+FIELD	et	D	g	field_4260_g	g
+CLASS	eu	net/minecraft/server/BlockSapling	net/minecraft/server/BlockSapling
+METHOD	eu	(Ldj;IIILjava/util/Random;)V	b	func_21027_b	b
+CLASS	ev	net/minecraft/server/ConsoleLogManager	net/minecraft/server/ConsoleLogManager
+FIELD	ev	Ljava/util/logging/Logger;	a	field_933_a	a
+METHOD	ev	()V	a	func_641_a	init
+CLASS	ew	net/minecraft/server/Packet4UpdateTime	net/minecraft/server/Packet4UpdateTime
+FIELD	ew	J	a	field_76_a	a
+CLASS	ex	net/minecraft/server/WorldLoaderServer	net/minecraft/server/WorldLoaderServer
+METHOD	ex	(Ljava/io/File;Ljava/util/ArrayList;Ljava/util/ArrayList;)V	a	func_22108_a	a
+METHOD	ex	(Ljava/io/File;Ljava/util/ArrayList;IILpj;)V	a	func_22107_a	a
+METHOD	ex	(Ljava/util/ArrayList;IILpj;)V	a	func_22109_a	a
+CLASS	ey	net/minecraft/server/CraftingManager	net/minecraft/server/CraftingManager
+FIELD	ey	Ley;	a	field_20155_a	a
+FIELD	ey	Ljava/util/List;	b	field_20154_b	b
+METHOD	ey	()Ley;	a	func_20151_a	getInstance
+METHOD	ey	(Lfy;[Ljava/lang/Object;)V	a	func_20153_a	registerShapedRecipe
+METHOD	ey	(Lfy;[Ljava/lang/Object;)V	b	func_21146_b	registerShapelessRecipe
+METHOD	ey	(Lhz;)Lfy;	a	func_21147_a	craft
+METHOD	ey	()Ljava/util/List;	b	func_25126_b	b
+CLASS	ez	net/minecraft/server/EntityItem	net/minecraft/server/EntityItem
+FIELD	ez	Lfy;	a	field_429_a	itemStack
+FIELD	ez	I	e	field_9170_e	e
+FIELD	ez	I	b	field_9169_b	b
+FIELD	ez	I	c	field_433_ad	pickupDelay
+FIELD	ez	I	f	field_430_ag	f
+FIELD	ez	F	d	field_432_ae	d
+CLASS	fa	net/minecraft/server/WorldMapBase	net/minecraft/server/WorldMapBase
+FIELD	fa	Ljava/lang/String;	a	field_28152_a	a
+FIELD	fa	Z	b	field_28151_b	b
+METHOD	fa	(Liq;)V	a	func_28148_a	a
+METHOD	fa	(Liq;)V	b	func_28147_b	b
+METHOD	fa	()V	a	func_28146_a	a
+METHOD	fa	(Z)V	a	func_28149_a	a
+METHOD	fa	()Z	b	func_28150_b	b
+CLASS	fb	net/minecraft/server/NBTTagByteArray	net/minecraft/server/NBTTagByteArray
+FIELD	fb	[B	a	field_733_a	a
+CLASS	fc	net/minecraft/server/ServerConfigurationManager	net/minecraft/server/ServerConfigurationManager
+FIELD	fc	Ljava/util/logging/Logger;	a	field_925_a	a
+FIELD	fc	Ljava/util/List;	b	field_924_b	players
+FIELD	fc	Lnet/minecraft/server/MinecraftServer;	c	field_923_c	server
+FIELD	fc	[Loo;	d	field_922_d	d
+FIELD	fc	I	e	field_9253_e	maxPlayers
+FIELD	fc	Ljava/util/Set;	f	field_9252_f	banByName
+FIELD	fc	Ljava/util/Set;	g	field_919_g	banByIP
+FIELD	fc	Ljava/util/Set;	h	field_918_h	h
+FIELD	fc	Ljava/util/Set;	i	field_22174_i	i
+FIELD	fc	Ljava/io/File;	j	field_917_i	j
+FIELD	fc	Ljava/io/File;	k	field_9251_j	k
+FIELD	fc	Ljava/io/File;	l	field_9250_k	l
+FIELD	fc	Ljava/io/File;	m	field_22173_m	m
+FIELD	fc	Lfl;	n	field_914_l	playerFileData
+FIELD	fc	Z	o	field_22172_o	o
+METHOD	fc	([Ldp;)V	a	func_618_a	setPlayerFileData
+METHOD	fc	(Ldl;)V	a	func_28172_a	a
+METHOD	fc	()I	a	func_640_a	a
+METHOD	fc	(I)Loo;	a	func_28167_a	getPlayerManager
+METHOD	fc	(Ldl;)V	b	func_28166_b	b
+METHOD	fc	(Ldl;)V	c	func_627_a	c
+METHOD	fc	(Ldl;)V	d	func_613_b	d
+METHOD	fc	(Ldl;)V	e	func_616_c	disconnect
+METHOD	fc	(Lee;Ljava/lang/String;)Ldl;	a	func_619_a	a
+METHOD	fc	(Ldl;I)Ldl;	a	func_9242_d	moveToWorld
+METHOD	fc	(Ldl;)V	f	func_28168_f	f
+METHOD	fc	()V	b	func_637_b	b
+METHOD	fc	(IIII)V	a	func_622_a	flagDirty
+METHOD	fc	(Lgt;)V	a	func_631_a	sendAll
+METHOD	fc	(Lgt;I)V	a	func_28169_a	a
+METHOD	fc	()Ljava/lang/String;	c	func_633_c	c
+METHOD	fc	(Ljava/lang/String;)V	a	func_22159_a	a
+METHOD	fc	(Ljava/lang/String;)V	b	func_22161_b	b
+METHOD	fc	()V	g	func_623_e	g
+METHOD	fc	()V	h	func_626_f	h
+METHOD	fc	(Ljava/lang/String;)V	c	func_22162_c	c
+METHOD	fc	(Ljava/lang/String;)V	d	func_22163_d	d
+METHOD	fc	()V	i	func_9245_g	i
+METHOD	fc	()V	j	func_9248_h	j
+METHOD	fc	(Ljava/lang/String;)V	e	func_22164_e	e
+METHOD	fc	(Ljava/lang/String;)V	f	func_22165_f	f
+METHOD	fc	()V	k	func_9249_i	k
+METHOD	fc	()V	l	func_9239_j	l
+METHOD	fc	()V	m	func_22168_m	m
+METHOD	fc	()V	n	func_22160_n	n
+METHOD	fc	(Ljava/lang/String;)Z	g	func_22166_g	isWhitelisted
+METHOD	fc	(Ljava/lang/String;)Z	h	func_639_g	isOp
+METHOD	fc	(Ljava/lang/String;)Ldl;	i	func_620_h	i
+METHOD	fc	(Ljava/lang/String;Ljava/lang/String;)V	a	func_628_a	a
+METHOD	fc	(DDDDILgt;)V	a	func_12022_a	sendPacketNearby
+METHOD	fc	(Lem;DDDDILgt;)V	a	func_28171_a	sendPacketNearby
+METHOD	fc	(Ljava/lang/String;)V	j	func_630_i	j
+METHOD	fc	(Ljava/lang/String;Lgt;)Z	a	func_621_a	a
+METHOD	fc	()V	d	func_617_d	savePlayers
+METHOD	fc	(IIILjh;)V	a	func_636_a	a
+METHOD	fc	(Ljava/lang/String;)V	k	func_22169_k	k
+METHOD	fc	(Ljava/lang/String;)V	l	func_22170_l	l
+METHOD	fc	()Ljava/util/Set;	e	func_22167_e	e
+METHOD	fc	()V	f	func_22171_f	f
+METHOD	fc	(Ldl;Ldp;)V	a	func_28170_a	a
+METHOD	fc	(Ldl;)V	g	func_30008_g	updateClient
+CLASS	fd	net/minecraft/server/Packet16BlockItemSwitch	net/minecraft/server/Packet16BlockItemSwitch
+FIELD	fd	I	a	field_74_b	itemInHandIndex
+CLASS	fe	net/minecraft/server/Packet103SetSlot	net/minecraft/server/Packet103SetSlot
+FIELD	fe	I	a	field_20017_a	a
+FIELD	fe	I	b	field_20016_b	b
+FIELD	fe	Lfy;	c	field_20018_c	c
+CLASS	ff	net/minecraft/server/EntityTrackerEntry	net/minecraft/server/EntityTrackerEntry
+FIELD	ff	Llq;	a	field_909_a	tracker
+FIELD	ff	I	b	field_9235_d	b
+FIELD	ff	I	c	field_9234_e	c
+FIELD	ff	I	d	field_9233_f	d
+FIELD	ff	I	e	field_9232_g	e
+FIELD	ff	I	f	field_9231_h	f
+FIELD	ff	I	g	field_9230_i	g
+FIELD	ff	I	h	field_9229_j	h
+FIELD	ff	D	i	field_9228_k	i
+FIELD	ff	D	j	field_9227_l	j
+FIELD	ff	D	k	field_9226_m	k
+FIELD	ff	I	l	field_9221_t	l
+FIELD	ff	D	o	field_9224_q	o
+FIELD	ff	D	p	field_9223_r	p
+FIELD	ff	D	q	field_9222_s	q
+FIELD	ff	Z	r	field_12020_u	r
+FIELD	ff	Z	s	field_9220_u	isMoving
+FIELD	ff	I	t	field_28165_t	t
+FIELD	ff	Z	m	field_900_j	m
+FIELD	ff	Ljava/util/Set;	n	field_899_k	trackedPlayers
+METHOD	ff	(Ljava/util/List;)V	a	func_605_a	track
+METHOD	ff	(Lgt;)V	a	func_603_a	a
+METHOD	ff	(Lgt;)V	b	func_12018_b	b
+METHOD	ff	()V	a	func_604_a	a
+METHOD	ff	(Ldl;)V	a	func_12019_a	a
+METHOD	ff	(Ldl;)V	b	func_606_a	b
+METHOD	ff	(Ljava/util/List;)V	b	func_601_b	scanPlayers
+METHOD	ff	()Lgt;	b	func_602_b	b
+METHOD	ff	(Ldl;)V	c	func_9219_b	c
+CLASS	fg	net/minecraft/server/ItemDoor	net/minecraft/server/ItemDoor
+FIELD	fg	Lhj;	a	field_260_a	a
+CLASS	fh	net/minecraft/server/ChunkBuffer	net/minecraft/server/ChunkBuffer
+FIELD	fh	I	b	field_22156_b	b
+FIELD	fh	I	c	field_22158_c	c
+FIELD	fh	Ljx;	a	field_22157_a	field_22157_a
+CLASS	fi	net/minecraft/server/GuiLogFormatter	net/minecraft/server/GuiLogFormatter
+FIELD	fi	Lci;	a	field_894_a	outputHandler
+CLASS	fj	net/minecraft/server/EmptyClass2	net/minecraft/server/EmptyClass2
+CLASS	fk	net/minecraft/server/ItemRedstone	net/minecraft/server/ItemRedstone
+CLASS	fl	net/minecraft/server/PlayerFileData	net/minecraft/server/PlayerFileData
+METHOD	fl	(Lem;)V	a	func_726_a	a
+METHOD	fl	(Lem;)V	b	func_725_b	b
+CLASS	fm	net/minecraft/server/Packet10Flying	net/minecraft/server/Packet10Flying
+FIELD	fm	D	a	field_73_a	x
+FIELD	fm	D	b	field_72_b	y
+FIELD	fm	D	c	field_71_c	z
+FIELD	fm	D	d	field_70_d	stance
+FIELD	fm	F	e	field_69_e	yaw
+FIELD	fm	F	f	field_68_f	pitch
+FIELD	fm	Z	g	field_67_g	g
+FIELD	fm	Z	h	field_66_h	h
+FIELD	fm	Z	i	field_65_i	hasLook
+CLASS	fn	net/minecraft/server/WorldGenBigTree	net/minecraft/server/WorldGenBigTree
+FIELD	fn	[B	a	field_760_a	field_760_a
+FIELD	fn	Ljava/util/Random;	b	field_759_b	random0
+FIELD	fn	Ldj;	c	field_758_c	worldObj
+FIELD	fn	[I	d	field_757_d	basePos
+FIELD	fn	I	e	field_756_e	field_756_e
+FIELD	fn	I	f	field_755_f	height
+FIELD	fn	D	g	field_754_g	field_754_g
+FIELD	fn	D	h	field_753_h	field_753_h
+FIELD	fn	D	i	field_752_i	field_752_i
+FIELD	fn	D	j	field_751_j	field_751_j
+FIELD	fn	D	k	field_750_k	field_750_k
+FIELD	fn	I	l	field_749_l	field_749_l
+FIELD	fn	I	m	field_748_m	field_748_m
+FIELD	fn	I	n	field_747_n	field_747_n
+FIELD	fn	[[I	o	field_746_o	field_746_o
+METHOD	fn	()V	a	func_424_a	a
+METHOD	fn	(IIIFBI)V	a	func_426_a	a
+METHOD	fn	(I)F	a	func_431_a	a
+METHOD	fn	(I)F	b	func_429_b	b
+METHOD	fn	(III)V	a	func_423_a	a
+METHOD	fn	([I[II)V	a	func_425_a	a
+METHOD	fn	()V	b	func_421_b	b
+METHOD	fn	(I)Z	c	func_430_c	c
+METHOD	fn	()V	c	func_432_c	c
+METHOD	fn	()V	d	func_428_d	d
+METHOD	fn	([I[I)I	a	func_427_a	a
+METHOD	fn	()Z	e	func_422_e	e
+CLASS	fo	net/minecraft/server/NBTBase	net/minecraft/server/NBTBase
+FIELD	fo	Ljava/lang/String;	a	field_731_a	a
+METHOD	fo	(Ljava/io/DataOutput;)V	a	func_381_a	a
+METHOD	fo	(Ljava/io/DataInput;)V	a	func_382_a	a
+METHOD	fo	()B	a	func_379_a	a
+METHOD	fo	()Ljava/lang/String;	b	func_384_c	b
+METHOD	fo	(Ljava/lang/String;)Lfo;	a	func_385_m	a
+METHOD	fo	(Ljava/io/DataInput;)Lfo;	b	func_383_b	b
+METHOD	fo	(Lfo;Ljava/io/DataOutput;)V	a	func_380_a	a
+METHOD	fo	(B)Lfo;	a	func_378_a	a
+METHOD	fo	(B)Ljava/lang/String;	b	func_377_b	b
+CLASS	fp	net/minecraft/server/EntityCreature	net/minecraft/server/EntityCreature
+FIELD	fp	Lcb;	a	field_388_a	pathEntity
+FIELD	fp	Llq;	d	field_389_ag	target
+FIELD	fp	Z	e	field_387_ah	e
+METHOD	fp	()Llq;	o	func_158_i	findTarget
+METHOD	fp	()Z	w	func_25026_u	w
+METHOD	fp	(Llq;F)V	a	func_157_a	a
+METHOD	fp	(III)F	a	func_159_a	a
+METHOD	fp	()V	B	func_31021_B	B
+METHOD	fp	(Llq;F)V	b	func_28013_b	b
+METHOD	fp	()Z	C	func_25023_z	C
+METHOD	fp	(Lcb;)V	a	func_25022_a	setPathEntity
+METHOD	fp	()Llq;	F	func_25024_A	F
+METHOD	fp	(Llq;)V	c	func_25025_c	setTarget
+CLASS	fq	net/minecraft/server/MathHelper	net/minecraft/server/MathHelper
+FIELD	fq	[F	a	field_886_a	a
+METHOD	fq	(F)F	a	func_585_a	sin
+METHOD	fq	(F)F	b	func_582_b	cos
+METHOD	fq	(F)F	c	func_586_c	c
+METHOD	fq	(D)F	a	func_583_a	a
+METHOD	fq	(F)I	d	func_588_d	d
+METHOD	fq	(D)I	b	func_584_b	floor
+METHOD	fq	(F)F	e	func_587_e	abs
+METHOD	fq	(DD)D	a	func_581_a	a
+CLASS	fr	net/minecraft/server/EnumArt	net/minecraft/server/EnumArt
+FIELD	fr	Lfr;	a	Kebab	Kebab
+FIELD	fr	Lfr;	b	Aztec	Aztec
+FIELD	fr	Lfr;	c	Alban	Alban
+FIELD	fr	Lfr;	d	Aztec2	Aztec2
+FIELD	fr	Lfr;	e	Bomb	Bomb
+FIELD	fr	Lfr;	f	Plant	Plant
+FIELD	fr	Lfr;	g	Wasteland	Wasteland
+FIELD	fr	Lfr;	h	Pool	Pool
+FIELD	fr	Lfr;	i	Courbet	Courbet
+FIELD	fr	Lfr;	j	Sea	Sea
+FIELD	fr	Lfr;	k	Sunset	Sunset
+FIELD	fr	Lfr;	l	Creebet	Creebet
+FIELD	fr	Lfr;	m	Wanderer	Wanderer
+FIELD	fr	Lfr;	n	Graham	Graham
+FIELD	fr	Lfr;	o	Match	Match
+FIELD	fr	Lfr;	p	Bust	Bust
+FIELD	fr	Lfr;	q	Stage	Stage
+FIELD	fr	Lfr;	r	Void	Void
+FIELD	fr	Lfr;	s	SkullAndRoses	SkullAndRoses
+FIELD	fr	Lfr;	t	Fighters	Fighters
+FIELD	fr	Lfr;	u	Pointer	Pointer
+FIELD	fr	Lfr;	v	Pigscene	Pigscene
+FIELD	fr	Lfr;	w	BurningSkull	BurningSkull
+FIELD	fr	Lfr;	x	Skeleton	Skeleton
+FIELD	fr	Lfr;	y	DonkeyKong	DonkeyKong
+FIELD	fr	I	z	field_27096_z	z
+FIELD	fr	Ljava/lang/String;	A	field_857_y	A
+FIELD	fr	I	B	field_856_z	B
+FIELD	fr	I	C	field_869_A	C
+FIELD	fr	I	D	field_867_B	D
+FIELD	fr	I	E	field_865_C	E
+FIELD	fr	[Lfr;	F	field_863_D	F
+FIELD	fr	[Lfr;	$VALUES	$VALUES	$VALUES
+METHOD	fr	()[Lfr;	values	values	values
+METHOD	fr	(Ljava/lang/String;)Lfr;	valueOf	valueOf	valueOf
+CLASS	fs	net/minecraft/server/WorldGenReed	net/minecraft/server/WorldGenReed
+CLASS	ft	net/minecraft/server/ShapedRecipes	net/minecraft/server/ShapedRecipes
+FIELD	ft	I	b	field_21140_b	b
+FIELD	ft	I	c	field_21144_c	c
+FIELD	ft	[Lfy;	d	field_21143_d	d
+FIELD	ft	Lfy;	e	field_21142_e	e
+FIELD	ft	I	a	field_21141_a	a
+METHOD	ft	(Lhz;IIZ)Z	a	func_21139_a	a
+CLASS	fu	net/minecraft/server/ContainerWorkbench	net/minecraft/server/ContainerWorkbench
+FIELD	fu	Lhz;	a	field_20146_a	craftInventory
+FIELD	fu	Lhp;	b	field_20145_b	resultInventory
+FIELD	fu	Ldj;	c	field_20150_c	c
+FIELD	fu	I	h	field_20149_h	h
+FIELD	fu	I	i	field_20148_i	i
+FIELD	fu	I	j	field_20147_j	j
+CLASS	fv	net/minecraft/server/WorldMap	net/minecraft/server/WorldMap
+FIELD	fv	I	b	field_28164_b	b
+FIELD	fv	I	c	field_28163_c	c
+FIELD	fv	B	d	field_28162_d	map
+FIELD	fv	B	e	field_28161_e	e
+FIELD	fv	[B	f	field_28160_f	f
+FIELD	fv	I	g	field_28159_g	g
+FIELD	fv	Ljava/util/List;	h	field_28158_h	h
+FIELD	fv	Ljava/util/Map;	j	field_28156_j	j
+FIELD	fv	Ljava/util/List;	i	field_28157_i	i
+METHOD	fv	(Lem;Lfy;)V	a	func_28155_a	a
+METHOD	fv	(Lfy;Ldj;Lem;)[B	a	func_28154_a	a
+METHOD	fv	(III)V	a	func_28153_a	a
+CLASS	fw	net/minecraft/server/Packet100OpenWindow	net/minecraft/server/Packet100OpenWindow
+FIELD	fw	I	a	field_20013_a	a
+FIELD	fw	I	b	field_20012_b	b
+FIELD	fw	Ljava/lang/String;	c	field_20015_c	c
+FIELD	fw	I	d	field_20014_d	d
+CLASS	fx	net/minecraft/server/InventoryPlayer	net/minecraft/server/InventoryPlayer
+FIELD	fx	[Lfy;	a	field_496_a	items
+FIELD	fx	[Lfy;	b	field_495_b	armor
+FIELD	fx	I	c	field_499_d	itemInHandIndex
+FIELD	fx	Lem;	d	field_497_f	d
+FIELD	fx	Lfy;	f	field_20074_f	f
+FIELD	fx	Z	e	field_498_e	e
+METHOD	fx	()Lfy;	b	func_213_b	getItemInHand
+METHOD	fx	()I	e	func_25054_e	e
+METHOD	fx	(I)I	d	func_6126_d	d
+METHOD	fx	(Lfy;)I	d	func_21082_c	firstPartial
+METHOD	fx	()I	k	func_205_g	k
+METHOD	fx	(Lfy;)I	e	func_21083_d	e
+METHOD	fx	()V	f	func_210_c	f
+METHOD	fx	(I)Z	b	func_6127_b	b
+METHOD	fx	(Lfy;)Z	a	func_201_a	pickup
+METHOD	fx	(Lna;)F	a	func_208_a	a
+METHOD	fx	(Llr;)Llr;	a	func_200_a	a
+METHOD	fx	(Llr;)V	b	func_203_b	b
+METHOD	fx	(Llq;)I	a	func_9157_a	a
+METHOD	fx	(Lna;)Z	b	func_207_b	b
+METHOD	fx	()I	g	func_212_e	g
+METHOD	fx	(I)V	c	func_211_b	c
+METHOD	fx	()V	h	func_199_f	h
+METHOD	fx	(Lfy;)V	b	func_20073_b	b
+METHOD	fx	()Lfy;	j	func_20072_i	j
+METHOD	fx	(Lfy;)Z	c	func_28010_c	c
+CLASS	fy	net/minecraft/server/ItemStack	net/minecraft/server/ItemStack
+FIELD	fy	I	a	field_853_a	count
+FIELD	fy	I	b	field_852_b	b
+FIELD	fy	I	c	field_855_c	id
+FIELD	fy	I	d	field_854_d	damage
+METHOD	fy	(I)Lfy;	a	func_20118_a	a
+METHOD	fy	()Lej;	a	func_569_a	getItem
+METHOD	fy	(Lem;Ldj;IIII)Z	a	func_572_a	placeItem
+METHOD	fy	(Lna;)F	a	func_574_a	a
+METHOD	fy	(Ldj;Lem;)Lfy;	a	func_6168_a	a
+METHOD	fy	(Liq;)Liq;	a	func_570_a	a
+METHOD	fy	(Liq;)V	b	func_575_b	b
+METHOD	fy	()I	b	func_576_b	getMaxStackSize
+METHOD	fy	()Z	c	func_21132_c	isStackable
+METHOD	fy	()Z	d	func_21126_d	d
+METHOD	fy	()Z	e	func_21128_e	usesData
+METHOD	fy	()Z	f	func_21130_f	f
+METHOD	fy	()I	g	func_21131_g	g
+METHOD	fy	()I	h	func_21125_h	getData
+METHOD	fy	(I)V	b	func_28145_b	b
+METHOD	fy	()I	i	func_571_c	i
+METHOD	fy	(ILlq;)V	a	func_25125_a	damage
+METHOD	fy	(Lhl;Lem;)V	a	func_9217_a	a
+METHOD	fy	(IIIILem;)V	a	func_25124_a	func_25124_a
+METHOD	fy	(Llq;)I	a	func_9218_a	a
+METHOD	fy	(Lna;)Z	b	func_573_b	b
+METHOD	fy	(Lem;)V	a	func_577_a	func_577_a
+METHOD	fy	(Lhl;)V	a	func_21129_b	a
+METHOD	fy	()Lfy;	j	func_578_d	cloneItemStack
+METHOD	fy	(Lfy;Lfy;)Z	a	func_20119_a	equals
+METHOD	fy	(Lfy;)Z	d	func_20116_b	d
+METHOD	fy	(Lfy;)Z	a	func_21127_a	doMaterialsMatch
+METHOD	fy	(Lfy;)Lfy;	b	func_20117_a	b
+METHOD	fy	(Ldj;Llq;IZ)V	a	func_28143_a	a
+METHOD	fy	(Ldj;Lem;)V	b	func_28142_b	b
+METHOD	fy	(Lfy;)Z	c	func_28144_c	c
+CLASS	fz	net/minecraft/server/BlockDeadBush	net/minecraft/server/BlockDeadBush
+CLASS	ga	net/minecraft/server/EntityTypes	net/minecraft/server/EntityTypes
+FIELD	ga	Ljava/util/Map;	a	field_849_a	a
+FIELD	ga	Ljava/util/Map;	b	field_848_b	b
+FIELD	ga	Ljava/util/Map;	c	field_851_c	c
+FIELD	ga	Ljava/util/Map;	d	field_850_d	d
+METHOD	ga	(Ljava/lang/Class;Ljava/lang/String;I)V	a	func_563_a	a
+METHOD	ga	(Ljava/lang/String;Ldj;)Llq;	a	func_567_a	a
+METHOD	ga	(Liq;Ldj;)Llq;	a	func_566_a	a
+METHOD	ga	(Llq;)I	a	func_565_a	a
+METHOD	ga	(Llq;)Ljava/lang/String;	b	func_564_b	b
+CLASS	gb	net/minecraft/server/ChunkProviderSky	net/minecraft/server/ChunkProviderSky
+FIELD	gb	Ljava/util/Random;	j	field_28085_j	j
+FIELD	gb	Lmp;	k	field_28084_k	k
+FIELD	gb	Lmp;	l	field_28083_l	l
+FIELD	gb	Lmp;	m	field_28082_m	m
+FIELD	gb	Lmp;	n	field_28081_n	n
+FIELD	gb	Lmp;	o	field_28080_o	o
+FIELD	gb	Lmp;	a	field_28094_a	a
+FIELD	gb	Lmp;	b	field_28093_b	b
+FIELD	gb	Lmp;	c	field_28092_c	c
+FIELD	gb	Ldj;	p	field_28079_p	p
+FIELD	gb	[D	q	field_28078_q	q
+FIELD	gb	[D	r	field_28077_r	r
+FIELD	gb	[D	s	field_28076_s	s
+FIELD	gb	[D	t	field_28075_t	t
+FIELD	gb	Ldy;	u	field_28074_u	u
+FIELD	gb	[Lgs;	v	field_28073_v	v
+FIELD	gb	[D	d	field_28091_d	field_28091_d
+FIELD	gb	[D	e	field_28090_e	field_28090_e
+FIELD	gb	[D	f	field_28089_f	field_28089_f
+FIELD	gb	[D	g	field_28088_g	field_28088_g
+FIELD	gb	[D	h	field_28087_h	field_28087_h
+FIELD	gb	[[I	i	field_28086_i	field_28086_i
+FIELD	gb	[D	w	field_28072_w	w
+METHOD	gb	(II[B[Lgs;[D)V	a	func_28070_a	a
+METHOD	gb	(II[B[Lgs;)V	a	func_28069_a	a
+METHOD	gb	([DIIIIII)[D	a	func_28071_a	a
+CLASS	gc	net/minecraft/server/Packet38EntityStatus	net/minecraft/server/Packet38EntityStatus
+FIELD	gc	I	a	field_9016_a	a
+FIELD	gc	B	b	field_9015_b	b
+CLASS	gd	net/minecraft/server/EnumMovingObjectType	net/minecraft/server/EnumMovingObjectType
+FIELD	gd	Lgd;	a	TILE	TILE
+FIELD	gd	Lgd;	b	ENTITY	ENTITY
+FIELD	gd	[Lgd;	c	field_21124_c	c
+FIELD	gd	[Lgd;	$VALUES	$VALUES	$VALUES
+METHOD	gd	()[Lgd;	values	values	values
+METHOD	gd	(Ljava/lang/String;)Lgd;	valueOf	valueOf	valueOf
+CLASS	ge	net/minecraft/server/BedBlockTextures	net/minecraft/server/BedBlockTextures
+FIELD	ge	[I	a	field_22154_a	a
+FIELD	ge	[I	b	field_22153_b	b
+FIELD	ge	[[I	c	field_22155_c	c
+CLASS	gf	net/minecraft/server/Packet24MobSpawn	net/minecraft/server/Packet24MobSpawn
+FIELD	gf	I	a	field_59_a	a
+FIELD	gf	B	b	field_58_b	b
+FIELD	gf	I	c	field_64_c	c
+FIELD	gf	I	d	field_63_d	d
+FIELD	gf	I	e	field_62_e	e
+FIELD	gf	B	f	field_61_f	f
+FIELD	gf	B	g	field_60_g	g
+FIELD	gf	Lmo;	h	field_21006_h	h
+FIELD	gf	Ljava/util/List;	i	field_21005_i	i
+CLASS	gg	net/minecraft/server/StatisticList	net/minecraft/server/StatisticList
+FIELD	gg	Ljava/util/Map;	a	field_25104_C	a
+FIELD	gg	Ljava/util/List;	b	field_25123_a	b
+FIELD	gg	Ljava/util/List;	c	field_25122_b	c
+FIELD	gg	Ljava/util/List;	d	field_25121_c	d
+FIELD	gg	Ljava/util/List;	e	field_25120_d	e
+FIELD	gg	Lns;	f	field_25119_e	f
+FIELD	gg	Lns;	g	field_25118_f	g
+FIELD	gg	Lns;	h	field_25117_g	h
+FIELD	gg	Lns;	i	field_25116_h	i
+FIELD	gg	Lns;	j	field_25115_i	j
+FIELD	gg	Lns;	k	field_25114_j	k
+FIELD	gg	Lns;	l	field_25113_k	l
+FIELD	gg	Lns;	m	field_25112_l	m
+FIELD	gg	Lns;	n	field_25111_m	n
+FIELD	gg	Lns;	o	field_25110_n	o
+FIELD	gg	Lns;	p	field_25109_o	p
+FIELD	gg	Lns;	q	field_25108_p	q
+FIELD	gg	Lns;	r	field_27095_r	r
+FIELD	gg	Lns;	s	field_27094_s	s
+FIELD	gg	Lns;	t	field_27093_t	t
+FIELD	gg	Lns;	u	field_25106_q	u
+FIELD	gg	Lns;	v	field_25103_r	v
+FIELD	gg	Lns;	w	field_25102_s	w
+FIELD	gg	Lns;	x	field_25100_t	x
+FIELD	gg	Lns;	y	field_25098_u	y
+FIELD	gg	Lns;	z	field_25097_v	z
+FIELD	gg	Lns;	A	field_25096_w	A
+FIELD	gg	Lns;	B	field_25095_x	B
+FIELD	gg	[Lns;	C	field_25094_y	C
+FIELD	gg	[Lns;	D	field_25093_z	D
+FIELD	gg	[Lns;	E	field_25107_A	E
+FIELD	gg	[Lns;	F	field_25105_B	F
+FIELD	gg	Z	G	field_25101_D	G
+FIELD	gg	Z	H	field_25099_E	H
+METHOD	gg	()V	a	func_27092_a	a
+METHOD	gg	()V	b	func_25088_a	b
+METHOD	gg	()V	c	func_25086_b	c
+METHOD	gg	()V	d	func_25091_c	d
+METHOD	gg	(Ljava/lang/String;I)[Lns;	a	func_25089_a	a
+METHOD	gg	([Lns;Ljava/lang/String;III)[Lns;	a	func_25090_a	a
+METHOD	gg	([Lns;Ljava/lang/String;III)[Lns;	b	func_25087_b	b
+METHOD	gg	([Lns;)V	a	func_25092_a	a
+METHOD	gg	([Lns;II)V	a	func_25085_a	a
+CLASS	gh	net/minecraft/server/BlockBreakable	net/minecraft/server/BlockBreakable
+FIELD	gh	Z	a	field_6084_a	a
+CLASS	gi	net/minecraft/server/BlockPiston	net/minecraft/server/BlockPiston
+FIELD	gi	Z	a	field_31044_a	a
+FIELD	gi	Z	b	field_31043_b	b
+METHOD	gi	(Ldj;III)V	g	func_31041_g	g
+METHOD	gi	(Ldj;IIII)Z	f	func_31039_f	f
+METHOD	gi	(I)I	c	func_31042_c	c
+METHOD	gi	(I)Z	d	func_31035_d	d
+METHOD	gi	(Ldj;IIILem;)I	c	func_31037_c	c
+METHOD	gi	(ILdj;IIIZ)Z	a	func_31040_a	a
+METHOD	gi	(Ldj;IIII)Z	h	func_31036_h	h
+METHOD	gi	(Ldj;IIII)Z	i	func_31038_i	i
+CLASS	gj	net/minecraft/server/BlockSnow	net/minecraft/server/BlockSnow
+METHOD	gj	(Ldj;III)Z	g	func_275_g	g
+CLASS	gk	net/minecraft/server/TileEntityChest	net/minecraft/server/TileEntityChest
+FIELD	gk	[Lfy;	a	field_494_e	items
+CLASS	gl	net/minecraft/server/EntityFallingSand	net/minecraft/server/EntityFallingSand
+FIELD	gl	I	a	field_427_a	a
+FIELD	gl	I	b	field_426_b	b
+CLASS	gm	net/minecraft/server/Packet14BlockDig	net/minecraft/server/Packet14BlockDig
+FIELD	gm	I	a	field_54_a	a
+FIELD	gm	I	b	field_53_b	b
+FIELD	gm	I	c	field_57_c	c
+FIELD	gm	I	d	field_56_d	face
+FIELD	gm	I	e	field_55_e	e
+CLASS	gn	net/minecraft/server/BlockFence	net/minecraft/server/BlockFence
+CLASS	go	net/minecraft/server/EntityList	net/minecraft/server/EntityList
+FIELD	go	[Log;	a	field_835_a	a
+FIELD	go	I	b	field_834_b	b
+FIELD	go	I	c	field_838_c	c
+FIELD	go	F	d	field_837_d	d
+FIELD	go	I	e	field_836_e	e
+METHOD	go	(I)I	g	func_545_g	g
+METHOD	go	(II)I	a	func_555_a	a
+METHOD	go	(I)Ljava/lang/Object;	a	func_550_a	a
+METHOD	go	(I)Z	b	func_556_b	b
+METHOD	go	(I)Log;	c	func_548_c	c
+METHOD	go	(ILjava/lang/Object;)V	a	func_554_a	a
+METHOD	go	(I)V	h	func_552_h	h
+METHOD	go	([Log;)V	a	func_549_a	a
+METHOD	go	(I)Ljava/lang/Object;	d	func_553_d	d
+METHOD	go	(I)Log;	e	func_557_e	e
+METHOD	go	()V	a	func_551_a	a
+METHOD	go	(IILjava/lang/Object;I)V	a	func_547_a	a
+METHOD	go	(I)I	f	func_546_f	f
+CLASS	gp	net/minecraft/server/RecipesCrafting	net/minecraft/server/RecipesCrafting
+METHOD	gp	(Ley;)V	a	func_20115_a	a
+CLASS	gq	net/minecraft/server/Packet17	net/minecraft/server/Packet17
+FIELD	gq	I	a	field_22041_a	a
+FIELD	gq	I	b	field_22040_b	b
+FIELD	gq	I	c	field_22044_c	c
+FIELD	gq	I	d	field_22043_d	d
+FIELD	gq	I	e	field_22042_e	e
+CLASS	gr	net/minecraft/server/Packet104WindowItems	net/minecraft/server/Packet104WindowItems
+FIELD	gr	I	a	field_20011_a	a
+FIELD	gr	[Lfy;	b	field_20010_b	b
+CLASS	gs	net/minecraft/server/BiomeBase	net/minecraft/server/BiomeBase
+FIELD	gs	Lgs;	a	field_4300_a	RAINFOREST
+FIELD	gs	Lgs;	b	field_4299_b	SWAMPLAND
+FIELD	gs	Lgs;	c	field_4298_c	SEASONAL_FOREST
+FIELD	gs	Lgs;	d	field_4297_d	FOREST
+FIELD	gs	Lgs;	e	field_4296_e	SAVANNA
+FIELD	gs	Lgs;	f	field_4295_f	SHRUBLAND
+FIELD	gs	Lgs;	g	field_4294_g	TAIGA
+FIELD	gs	Lgs;	h	field_4293_h	DESERT
+FIELD	gs	Lgs;	i	field_4292_i	PLAINS
+FIELD	gs	Lgs;	j	field_4291_j	ICE_DESERT
+FIELD	gs	Lgs;	k	field_4290_k	TUNDRA
+FIELD	gs	Lgs;	l	field_4289_l	HELL
+FIELD	gs	Lgs;	m	field_28054_m	SKY
+FIELD	gs	Ljava/lang/String;	n	field_6163_m	n
+FIELD	gs	I	o	field_6162_n	o
+FIELD	gs	B	p	field_4286_o	p
+FIELD	gs	B	q	field_4285_p	q
+FIELD	gs	I	r	field_6161_q	r
+FIELD	gs	Ljava/util/List;	s	field_25058_r	s
+FIELD	gs	Ljava/util/List;	t	field_25057_s	t
+FIELD	gs	Ljava/util/List;	u	field_25056_t	u
+FIELD	gs	Z	v	field_27051_u	v
+FIELD	gs	Z	w	field_27050_v	w
+FIELD	gs	[Lgs;	x	field_4281_t	x
+METHOD	gs	(Ljava/util/Random;)Ljm;	a	func_21114_a	a
+METHOD	gs	()Lgs;	e	func_27047_e	e
+METHOD	gs	()V	a	func_4084_a	a
+METHOD	gs	()Lgs;	b	func_4083_b	b
+METHOD	gs	(Ljava/lang/String;)Lgs;	a	func_4082_a	a
+METHOD	gs	(I)Lgs;	a	func_4080_a	a
+METHOD	gs	(I)Lgs;	b	func_4079_b	b
+METHOD	gs	(DD)Lgs;	a	func_4085_a	a
+METHOD	gs	(FF)Lgs;	a	func_4078_a	a
+METHOD	gs	(Lhh;)Ljava/util/List;	a	func_25055_a	a
+METHOD	gs	()Z	c	func_27049_c	c
+METHOD	gs	()Z	d	func_27048_d	d
+CLASS	gt	net/minecraft/server/Packet	net/minecraft/server/Packet
+FIELD	gt	Ljava/util/Map;	a	field_39_a	a
+FIELD	gt	Ljava/util/Map;	b	field_38_b	b
+FIELD	gt	Ljava/util/Set;	c	field_27994_c	c
+FIELD	gt	Ljava/util/Set;	d	field_27993_d	d
+FIELD	gt	J	j	field_20009_j	timestamp
+FIELD	gt	Z	k	field_40_j	k
+FIELD	gt	Ljava/util/HashMap;	e	field_21904_c	e
+FIELD	gt	I	f	field_21903_d	f
+METHOD	gt	(Ljava/io/DataInputStream;)V	a	func_70_a	a
+METHOD	gt	(Ljava/io/DataOutputStream;)V	a	func_68_a	a
+METHOD	gt	(Lme;)V	a	func_72_a	a
+METHOD	gt	()I	a	func_71_a	a
+METHOD	gt	(IZZLjava/lang/Class;)V	a	func_64_a	a
+METHOD	gt	(I)Lgt;	a	func_67_a	a
+METHOD	gt	()I	b	func_69_b	b
+METHOD	gt	(Ljava/io/DataInputStream;Z)Lgt;	a	func_65_b	a
+METHOD	gt	(Lgt;Ljava/io/DataOutputStream;)V	a	func_66_a	a
+METHOD	gt	(Ljava/lang/String;Ljava/io/DataOutputStream;)V	a	func_27038_a	a
+METHOD	gt	(Ljava/io/DataInputStream;I)Ljava/lang/String;	a	func_27037_a	a
+CLASS	gu	net/minecraft/server/ItemDye	net/minecraft/server/ItemDye
+FIELD	gu	[Ljava/lang/String;	a	field_21099_a	a
+FIELD	gu	[I	bk	field_31023_bk	bk
+CLASS	gv	net/minecraft/server/BlockLockedChest	net/minecraft/server/BlockLockedChest
+CLASS	gw	net/minecraft/server/WorldGenDeadBush	net/minecraft/server/WorldGenDeadBush
+FIELD	gw	I	a	field_28055_a	a
+CLASS	gx	net/minecraft/server/RecipeSorter	net/minecraft/server/RecipeSorter
+FIELD	gx	Ley;	a	field_20108_a	craftingManager
+METHOD	gx	(Lck;Lck;)I	a	func_20107_a	a
+METHOD	gx	(Ljava/lang/Object;Ljava/lang/Object;)I	compare	compare	compare
+CLASS	gy	net/minecraft/server/GuiStatsComponent	net/minecraft/server/GuiStatsComponent
+FIELD	gy	[I	a	field_767_a	a
+FIELD	gy	I	b	field_766_b	b
+FIELD	gy	[Ljava/lang/String;	c	field_768_c	c
+METHOD	gy	()V	a	func_436_a	a
+METHOD	gy	(Ljava/awt/Graphics;)V	paint	paint	paint
+METHOD	gy	(Lgy;)V	a	func_435_a	a
+CLASS	gz	net/minecraft/server/ItemHoe	net/minecraft/server/ItemHoe
+CLASS	ha	net/minecraft/server/NetServerHandler	net/minecraft/server/NetServerHandler
+FIELD	ha	Ljava/util/logging/Logger;	a	field_20_a	a
+FIELD	ha	Ljl;	b	field_19_b	networkManager
+FIELD	ha	Z	c	field_18_c	disconnected
+FIELD	ha	Lnet/minecraft/server/MinecraftServer;	d	field_17_d	minecraftServer
+FIELD	ha	Ldl;	e	field_16_e	player
+FIELD	ha	I	f	field_15_f	f
+FIELD	ha	I	g	field_22004_g	g
+FIELD	ha	I	h	field_27004_h	h
+FIELD	ha	Z	i	field_22003_h	i
+FIELD	ha	D	j	field_9009_g	x
+FIELD	ha	D	k	field_9008_h	y
+FIELD	ha	D	l	field_9007_i	z
+FIELD	ha	Z	m	field_9006_j	checkMovement
+FIELD	ha	Ljava/util/Map;	n	field_10_k	n
+METHOD	ha	()V	a	func_42_a	a
+METHOD	ha	(Ljava/lang/String;)V	a	func_43_c	disconnect
+METHOD	ha	(DDDFF)V	a	func_41_a	a
+METHOD	ha	(Lgt;)V	b	func_39_b	sendPacket
+METHOD	ha	(Ljava/lang/String;)V	c	func_4010_d	handleCommand
+METHOD	ha	()I	b	func_38_b	b
+CLASS	hb	net/minecraft/server/ChunkRegionLoader	net/minecraft/server/ChunkRegionLoader
+FIELD	hb	Ljava/io/File;	a	field_22110_a	a
+CLASS	hc	net/minecraft/server/BlockDoor	net/minecraft/server/BlockDoor
+METHOD	hc	(I)V	c	func_273_b	c
+METHOD	hc	(Ldj;IIIZ)V	a	func_272_a	setDoor
+METHOD	hc	(I)I	d	func_271_d	d
+METHOD	hc	(I)Z	e	func_27036_e	e
+CLASS	hd	net/minecraft/server/Path	net/minecraft/server/Path
+FIELD	hd	[Ld;	a	field_744_a	a
+FIELD	hd	I	b	field_743_b	b
+METHOD	hd	(Ld;)Ld;	a	func_413_a	a
+METHOD	hd	()V	a	func_417_a	a
+METHOD	hd	()Ld;	b	func_415_b	b
+METHOD	hd	(Ld;F)V	a	func_414_a	a
+METHOD	hd	(I)V	a	func_412_a	a
+METHOD	hd	(I)V	b	func_416_b	b
+METHOD	hd	()Z	c	func_418_c	c
+CLASS	he	net/minecraft/server/ChunkProviderServer	net/minecraft/server/ChunkProviderServer
+FIELD	he	Ljava/util/Set;	b	field_725_a	unloadQueue
+FIELD	he	Lhi;	c	field_724_b	emptyChunk
+FIELD	he	Lbl;	d	field_730_c	chunkProvider
+FIELD	he	Lan;	e	field_729_d	e
+FIELD	he	Z	a	field_28068_a	forceChunkLoad
+FIELD	he	Ljava/util/Map;	f	field_728_e	chunks
+FIELD	he	Ljava/util/List;	g	field_727_f	chunkList
+FIELD	he	Ldp;	h	field_726_g	world
+METHOD	he	(II)V	d	func_374_c	queueUnload
+METHOD	he	(II)Lhi;	e	func_4063_e	loadChunk
+METHOD	he	(Lhi;)V	a	func_375_a	saveChunkNOP
+METHOD	he	(Lhi;)V	b	func_373_b	saveChunk
+CLASS	hf	net/minecraft/server/NBTTagEnd	net/minecraft/server/NBTTagEnd
+CLASS	hg	net/minecraft/server/EmptyChunk	net/minecraft/server/EmptyChunk
+CLASS	hh	net/minecraft/server/EnumCreatureType	net/minecraft/server/EnumCreatureType
+FIELD	hh	Lhh;	a	monster	monster
+FIELD	hh	Lhh;	b	creature	creature
+FIELD	hh	Lhh;	c	waterCreature	waterCreature
+FIELD	hh	Ljava/lang/Class;	d	field_21109_d	d
+FIELD	hh	I	e	field_21108_e	e
+FIELD	hh	Lhj;	f	field_21107_f	f
+FIELD	hh	Z	g	field_21106_g	g
+FIELD	hh	[Lhh;	h	field_6155_e	h
+FIELD	hh	[Lhh;	$VALUES	$VALUES	$VALUES
+METHOD	hh	()[Lhh;	values	values	values
+METHOD	hh	(Ljava/lang/String;)Lhh;	valueOf	valueOf	valueOf
+METHOD	hh	()Ljava/lang/Class;	a	func_21105_a	a
+METHOD	hh	()I	b	func_21104_b	b
+METHOD	hh	()Lhj;	c	func_21102_c	c
+METHOD	hh	()Z	d	func_21103_d	d
+CLASS	hi	net/minecraft/server/Chunk	net/minecraft/server/Chunk
+FIELD	hi	Z	a	field_694_a	a
+FIELD	hi	[B	b	field_693_b	b
+FIELD	hi	Z	c	field_692_c	c
+FIELD	hi	Ldj;	d	field_691_d	world
+FIELD	hi	Lob;	e	field_690_e	e
+FIELD	hi	Lob;	f	field_689_f	f
+FIELD	hi	Lob;	g	field_688_g	g
+FIELD	hi	[B	h	field_687_h	heightMap
+FIELD	hi	I	i	field_686_i	i
+FIELD	hi	I	j	field_685_j	x
+FIELD	hi	I	k	field_684_k	z
+FIELD	hi	Ljava/util/Map;	l	field_683_l	tileEntities
+FIELD	hi	[Ljava/util/List;	m	field_682_m	entitySlices
+FIELD	hi	Z	n	field_681_n	done
+FIELD	hi	Z	o	field_680_o	o
+FIELD	hi	Z	p	field_679_p	p
+FIELD	hi	Z	q	field_677_r	q
+FIELD	hi	J	r	field_676_s	r
+METHOD	hi	(II)Z	a	func_351_a	a
+METHOD	hi	(II)I	b	func_337_b	b
+METHOD	hi	()V	a	func_348_a	a
+METHOD	hi	()V	b	func_353_b	func_353_b
+METHOD	hi	()V	c	func_4053_c	loadNOP
+METHOD	hi	(III)I	a	func_344_a	getTypeId
+METHOD	hi	(IIIII)Z	a	func_346_a	a
+METHOD	hi	(IIII)Z	a	func_357_a	a
+METHOD	hi	(III)I	b	func_356_b	getData
+METHOD	hi	(IIII)V	b	func_345_b	b
+METHOD	hi	(Lco;III)I	a	func_341_a	a
+METHOD	hi	(Lco;IIII)V	a	func_330_a	a
+METHOD	hi	(IIII)I	c	func_354_c	c
+METHOD	hi	(Llq;)V	a	func_335_a	a
+METHOD	hi	(Llq;)V	b	func_350_b	b
+METHOD	hi	(Llq;I)V	a	func_332_a	a
+METHOD	hi	(III)Z	c	func_343_c	c
+METHOD	hi	(III)Ljh;	d	func_338_d	d
+METHOD	hi	(Ljh;)V	a	func_349_a	a
+METHOD	hi	(IIILjh;)V	a	func_352_a	a
+METHOD	hi	(III)V	e	func_359_e	e
+METHOD	hi	()V	d	func_358_c	addEntities
+METHOD	hi	()V	e	func_331_d	removeEntities
+METHOD	hi	()V	f	func_336_e	f
+METHOD	hi	(Llq;Lcz;Ljava/util/List;)V	a	func_329_a	a
+METHOD	hi	(Ljava/lang/Class;Lcz;Ljava/util/List;)V	a	func_342_a	a
+METHOD	hi	(Z)Z	a	func_347_a	a
+METHOD	hi	([BIIIIIII)I	a	func_340_a	getData
+METHOD	hi	(J)Ljava/util/Random;	a	func_334_a	a
+METHOD	hi	()Z	g	func_21101_g	isEmpty
+METHOD	hi	(II)V	c	func_333_c	c
+METHOD	hi	(III)V	f	func_355_f	f
+METHOD	hi	(III)V	g	func_339_g	g
+METHOD	hi	()V	h	func_25083_h	h
+CLASS	hj	net/minecraft/server/Material	net/minecraft/server/Material
+FIELD	hj	Lhj;	a	field_526_a	AIR
+FIELD	hj	Lhj;	b	field_28132_b	GRASS
+FIELD	hj	Lhj;	c	field_525_b	EARTH
+FIELD	hj	Lhj;	d	field_524_c	WOOD
+FIELD	hj	Lhj;	e	field_523_d	STONE
+FIELD	hj	Lhj;	f	field_522_e	ORE
+FIELD	hj	Lhj;	g	field_521_f	WATER
+FIELD	hj	Lhj;	h	field_520_g	LAVA
+FIELD	hj	Lhj;	i	field_4218_h	LEAVES
+FIELD	hj	Lhj;	j	field_518_i	PLANT
+FIELD	hj	Lhj;	k	field_517_j	SPONGE
+FIELD	hj	Lhj;	l	field_4217_k	CLOTH
+FIELD	hj	Lhj;	m	field_515_l	FIRE
+FIELD	hj	Lhj;	n	field_514_m	SAND
+FIELD	hj	Lhj;	o	field_513_n	ORIENTABLE
+FIELD	hj	Lhj;	p	field_4216_o	SHATTERABLE
+FIELD	hj	Lhj;	q	field_511_p	TNT
+FIELD	hj	Lhj;	r	field_4215_q	CORAL
+FIELD	hj	Lhj;	s	field_509_r	ICE
+FIELD	hj	Lhj;	t	field_508_s	SNOW_LAYER
+FIELD	hj	Lhj;	u	field_507_t	SNOW_BLOCK
+FIELD	hj	Lhj;	v	field_4214_u	CACTUS
+FIELD	hj	Lhj;	w	field_505_v	CLAY
+FIELD	hj	Lhj;	x	field_4213_w	PUMPKIN
+FIELD	hj	Lhj;	y	field_4212_x	PORTAL
+FIELD	hj	Lhj;	z	field_21100_y	CAKE
+FIELD	hj	Lhj;	A	field_31063_A	WEB
+FIELD	hj	Lhj;	B	field_31062_B	PISTON
+FIELD	hj	Z	D	field_4211_y	canBurn
+FIELD	hj	Z	E	field_27091_A	field_27091_A
+FIELD	hj	Z	F	field_28130_D	F
+FIELD	hj	Lcm;	C	field_28131_A	field_28131_A
+FIELD	hj	Z	G	field_31061_G	field_31061_G
+FIELD	hj	I	H	field_31060_H	H
+METHOD	hj	()Z	a	func_216_a	isBuildable
+METHOD	hj	()Z	b	func_219_b	blocksLight
+METHOD	hj	()Z	c	func_218_c	isSolid
+METHOD	hj	()Z	d	func_217_d	isLiquid
+METHOD	hj	()Lhj;	m	func_28129_i	func_28129_i
+METHOD	hj	()Lhj;	n	func_31058_n	n
+METHOD	hj	()Lhj;	o	func_4052_f	o
+METHOD	hj	()Z	e	func_4051_e	isBurnable
+METHOD	hj	()Lhj;	f	func_27089_f	f
+METHOD	hj	()Z	g	func_27090_g	func_27090_g
+METHOD	hj	()Z	h	func_28128_h	h
+METHOD	hj	()Z	i	func_31055_i	func_31055_i
+METHOD	hj	()I	j	func_31056_j	j
+METHOD	hj	()Lhj;	k	func_31059_k	k
+METHOD	hj	()Lhj;	l	func_31057_l	l
+CLASS	hk	net/minecraft/server/ItemBed	net/minecraft/server/ItemBed
+CLASS	hl	net/minecraft/server/EntityLiving	net/minecraft/server/EntityLiving
+FIELD	hl	I	H	field_9099_av	maxNoDamageTicks
+FIELD	hl	F	I	field_9098_aw	I
+FIELD	hl	F	J	field_9096_ay	J
+FIELD	hl	F	K	field_9095_az	K
+FIELD	hl	F	L	field_9125_aA	L
+FIELD	hl	F	M	field_9124_aB	M
+FIELD	hl	F	N	field_9123_aC	N
+FIELD	hl	F	O	field_9122_aD	O
+FIELD	hl	F	P	field_9121_aE	P
+FIELD	hl	Z	Q	field_9120_aF	Q
+FIELD	hl	Ljava/lang/String;	R	field_9119_aG	texture
+FIELD	hl	Z	S	field_9118_aH	S
+FIELD	hl	F	T	field_9117_aI	T
+FIELD	hl	Ljava/lang/String;	U	field_9116_aJ	U
+FIELD	hl	F	V	field_9115_aK	V
+FIELD	hl	I	W	field_9114_aL	W
+FIELD	hl	F	X	field_9113_aM	X
+FIELD	hl	Z	Y	field_9112_aN	Y
+FIELD	hl	F	Z	field_9111_aO	Z
+FIELD	hl	F	aa	field_9110_aP	aa
+FIELD	hl	I	ab	field_9109_aQ	health
+FIELD	hl	I	ac	field_9108_aR	ac
+FIELD	hl	I	a	field_4099_a	a
+FIELD	hl	I	ad	field_9107_aS	hurtTicks
+FIELD	hl	I	ae	field_9106_aT	ae
+FIELD	hl	F	af	field_9105_aU	af
+FIELD	hl	I	ag	field_9104_aV	deathTicks
+FIELD	hl	I	ah	field_9103_aW	attackTicks
+FIELD	hl	F	ai	field_9102_aX	ai
+FIELD	hl	F	aj	field_9101_aY	aj
+FIELD	hl	Z	ak	field_9100_aZ	ak
+FIELD	hl	I	al	field_9144_ba	al
+FIELD	hl	F	am	field_9143_bb	am
+FIELD	hl	F	an	field_9142_bc	an
+FIELD	hl	F	ao	field_9141_bd	ao
+FIELD	hl	F	ap	field_386_ba	ap
+FIELD	hl	I	aq	field_9140_bf	aq
+FIELD	hl	D	ar	field_9139_bg	ar
+FIELD	hl	D	as	field_9138_bh	as
+FIELD	hl	D	at	field_9137_bi	at
+FIELD	hl	D	au	field_9136_bj	au
+FIELD	hl	D	av	field_9135_bk	av
+FIELD	hl	F	aw	field_9134_bl	field_9134_bl
+FIELD	hl	I	ax	field_9133_bm	lastDamage
+FIELD	hl	I	ay	field_9132_bn	ay
+FIELD	hl	F	az	field_9131_bo	az
+FIELD	hl	F	aA	field_9130_bp	aA
+FIELD	hl	F	aB	field_9129_bq	aB
+FIELD	hl	Z	aC	field_9128_br	aC
+FIELD	hl	F	aD	field_9127_bs	aD
+FIELD	hl	F	aE	field_9126_bt	aE
+FIELD	hl	Llq;	b	field_4098_b	b
+FIELD	hl	I	aF	field_4104_c	aF
+METHOD	hl	(FF)V	a	func_148_c	a
+METHOD	hl	()Z	p	func_144_E	p
+METHOD	hl	()Z	d	func_155_a	d
+METHOD	hl	()V	v	func_153_y	v
+METHOD	hl	()Ljava/lang/String;	g	func_6097_d	g
+METHOD	hl	()Ljava/lang/String;	h	func_6100_e	h
+METHOD	hl	()Ljava/lang/String;	i	func_6098_f	i
+METHOD	hl	()I	j	func_149_g	j
+METHOD	hl	()Z	D	func_22058_w	D
+METHOD	hl	()V	c_	func_152_d_	c_
+METHOD	hl	(Llq;)V	a	func_142_f	die
+METHOD	hl	(I)V	c	func_6099_c	c
+METHOD	hl	()Z	L	func_22057_E	func_22057_E
+METHOD	hl	()V	O	func_154_F	O
+METHOD	hl	()Z	h_	func_25020_s	func_25020_s
+METHOD	hl	()F	k	func_6102_h	k
+METHOD	hl	()I	u	func_25018_n_	u
+METHOD	hl	()I	l	func_4045_i	l
+METHOD	hl	()V	q	func_21047_g_	q
+METHOD	hl	()I	e	func_146_b	e
+METHOD	hl	(Llq;)Z	e	func_145_g	e
+METHOD	hl	()V	Q	func_22056_G	Q
+METHOD	hl	()V	S	func_156_D	S
+METHOD	hl	(I)V	b	func_137_a	b
+METHOD	hl	(Llq;IDD)V	a	func_143_a	a
+METHOD	hl	()Z	b_	func_21046_d_	b_
+METHOD	hl	()V	U	func_27013_Q	U
+METHOD	hl	(Llq;FF)V	a	func_147_b	a
+METHOD	hl	()Z	V	func_25021_O	V
+METHOD	hl	()Llq;	W	func_25019_P	W
+METHOD	hl	(FFF)F	b	func_140_b	b
+METHOD	hl	()V	X	func_6101_K	X
+METHOD	hl	(F)Lba;	b	func_141_d	b
+CLASS	hm	net/minecraft/server/GuiStatsListener	net/minecraft/server/GuiStatsListener
+FIELD	hm	Lgy;	a	field_527_a	statsComponent
+METHOD	hm	(Ljava/awt/event/ActionEvent;)V	actionPerformed	actionPerformed	actionPerformed
+CLASS	hn	net/minecraft/server/ItemReed	net/minecraft/server/ItemReed
+FIELD	hn	I	a	field_253_a	id
+CLASS	ho	net/minecraft/server/MaterialTransparent	net/minecraft/server/MaterialTransparent
+CLASS	hp	net/minecraft/server/IInventory	net/minecraft/server/IInventory
+METHOD	hp	()I	a	func_83_a	getSize
+METHOD	hp	(I)Lfy;	d_	func_82_a	getItem
+METHOD	hp	()Ljava/lang/String;	c	func_20068_b	getName
+METHOD	hp	(II)Lfy;	a	func_20069_a	splitStack
+METHOD	hp	(ILfy;)V	a	func_206_a	setItem
+METHOD	hp	()I	d	func_202_d	getMaxStackSize
+METHOD	hp	()V	i	func_183_c	update
+METHOD	hp	(Lem;)Z	a_	func_20067_a_	a_
+CLASS	hq	net/minecraft/server/EntityFish	net/minecraft/server/EntityFish
+FIELD	hq	I	d	field_20906_d	d
+FIELD	hq	I	e	field_20905_e	e
+FIELD	hq	I	f	field_4126_f	f
+FIELD	hq	I	g	field_4132_ai	g
+FIELD	hq	Z	h	field_4129_aj	h
+FIELD	hq	I	a	field_4134_a	a
+FIELD	hq	Lem;	b	field_20909_b	owner
+FIELD	hq	I	i	field_6150_ak	i
+FIELD	hq	I	j	field_4125_al	j
+FIELD	hq	I	k	field_4124_am	k
+FIELD	hq	Llq;	c	field_20907_c	c
+FIELD	hq	I	l	field_6149_an	l
+FIELD	hq	D	m	field_6148_ao	m
+FIELD	hq	D	n	field_6147_ap	n
+FIELD	hq	D	o	field_6146_aq	o
+FIELD	hq	D	p	field_6145_ar	p
+FIELD	hq	D	q	field_6144_as	q
+METHOD	hq	(DDDFF)V	a	func_6142_a	a
+METHOD	hq	()I	h	func_6143_c	h
+CLASS	hr	net/minecraft/server/BlockLightStone	net/minecraft/server/BlockLightStone
+CLASS	hs	net/minecraft/server/Packet0KeepAlive	net/minecraft/server/Packet0KeepAlive
+CLASS	ht	net/minecraft/server/WatchableObject	net/minecraft/server/WatchableObject
+FIELD	ht	I	a	field_21175_a	a
+FIELD	ht	I	b	field_21174_b	b
+FIELD	ht	Ljava/lang/Object;	c	field_21177_c	c
+FIELD	ht	Z	d	field_21176_d	d
+METHOD	ht	()I	a	func_21172_a	a
+METHOD	ht	(Ljava/lang/Object;)V	a	func_21171_a	a
+METHOD	ht	()Ljava/lang/Object;	b	func_21168_b	b
+METHOD	ht	()I	c	func_21169_c	c
+METHOD	ht	()Z	d	func_21170_d	d
+METHOD	ht	(Z)V	a	func_21173_a	a
+CLASS	hu	net/minecraft/server/Packet20NamedEntitySpawn	net/minecraft/server/Packet20NamedEntitySpawn
+FIELD	hu	I	a	field_143_a	a
+FIELD	hu	Ljava/lang/String;	b	field_142_b	b
+FIELD	hu	I	c	field_149_c	c
+FIELD	hu	I	d	field_148_d	d
+FIELD	hu	I	e	field_147_e	e
+FIELD	hu	B	f	field_146_f	f
+FIELD	hu	B	g	field_145_g	g
+FIELD	hu	I	h	field_144_h	h
+CLASS	hv	net/minecraft/server/NBTTagLong	net/minecraft/server/NBTTagLong
+FIELD	hv	J	a	field_740_a	a
+CLASS	hw	net/minecraft/server/Packet101CloseWindow	net/minecraft/server/Packet101CloseWindow
+FIELD	hw	I	a	field_20032_a	a
+CLASS	hx	net/minecraft/server/ItemEgg	net/minecraft/server/ItemEgg
+CLASS	hy	net/minecraft/server/Packet2Handshake	net/minecraft/server/Packet2Handshake
+FIELD	hy	Ljava/lang/String;	a	field_141_a	a
+CLASS	hz	net/minecraft/server/InventoryCrafting	net/minecraft/server/InventoryCrafting
+FIELD	hz	[Lfy;	a	field_20076_a	items
+FIELD	hz	I	b	field_21085_b	b
+FIELD	hz	Lcl;	c	field_20077_c	c
+METHOD	hz	(II)Lfy;	b	func_21084_a	b
+CLASS	ia	net/minecraft/server/ItemSapling	net/minecraft/server/ItemSapling
+CLASS	ib	net/minecraft/server/WorldGenClay	net/minecraft/server/WorldGenClay
+FIELD	ib	I	a	field_764_a	a
+FIELD	ib	I	b	field_763_b	b
+CLASS	ic	net/minecraft/server/BlockOre	net/minecraft/server/BlockOre
+CLASS	id	net/minecraft/server/Packet105CraftProgressBar	net/minecraft/server/Packet105CraftProgressBar
+FIELD	id	I	a	field_20030_a	a
+FIELD	id	I	b	field_20029_b	b
+FIELD	id	I	c	field_20031_c	c
+CLASS	ie	net/minecraft/server/ServerNBTManager	net/minecraft/server/ServerNBTManager
+CLASS	if	net/minecraft/server/Packet21PickupSpawn	net/minecraft/server/Packet21PickupSpawn
+FIELD	if	I	a	field_129_a	a
+FIELD	if	I	b	field_128_b	b
+FIELD	if	I	c	field_127_c	c
+FIELD	if	I	d	field_126_d	d
+FIELD	if	B	e	field_125_e	e
+FIELD	if	B	f	field_124_f	f
+FIELD	if	B	g	field_123_g	g
+FIELD	if	I	h	field_122_h	h
+FIELD	if	I	i	field_121_i	i
+FIELD	if	I	l	field_21023_j	l
+CLASS	ig	net/minecraft/server/BlockGravel	net/minecraft/server/BlockGravel
+CLASS	ih	net/minecraft/server/RecipesDyes	net/minecraft/server/RecipesDyes
+METHOD	ih	(Ley;)V	a	func_21165_a	a
+CLASS	ii	net/minecraft/server/StatisticStorage	net/minecraft/server/StatisticStorage
+FIELD	ii	Lii;	a	field_25082_a	a
+FIELD	ii	Ljava/util/Properties;	b	field_25081_b	b
+METHOD	ii	()Lii;	a	func_25079_a	a
+METHOD	ii	(Ljava/lang/String;)Ljava/lang/String;	a	func_25080_a	a
+METHOD	ii	(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;	a	func_25078_a	a
+CLASS	ij	net/minecraft/server/BlockCrops	net/minecraft/server/BlockCrops
+METHOD	ij	(Ldj;III)V	d_	func_21028_c	d_
+METHOD	ij	(Ldj;III)F	h	func_278_h	h
+CLASS	ik	net/minecraft/server/BlockIce	net/minecraft/server/BlockIce
+CLASS	il	net/minecraft/server/Convertable	net/minecraft/server/Convertable
+METHOD	il	(Ljava/lang/String;)Z	a	func_22102_a	isConvertable
+METHOD	il	(Ljava/lang/String;Lpj;)Z	a	func_22101_a	convert
+CLASS	im	net/minecraft/server/Packet18ArmAnimation	net/minecraft/server/Packet18ArmAnimation
+FIELD	im	I	a	field_120_a	a
+FIELD	im	I	b	field_119_b	b
+CLASS	in	net/minecraft/server/BlockLeavesBase	net/minecraft/server/BlockLeavesBase
+FIELD	in	Z	b	field_6088_a	b
+CLASS	io	net/minecraft/server/Packet39AttachEntity	net/minecraft/server/Packet39AttachEntity
+FIELD	io	I	a	field_6044_a	a
+FIELD	io	I	b	field_6043_b	b
+CLASS	ip	net/minecraft/server/EntityGiantZombie	net/minecraft/server/EntityGiantZombie
+CLASS	iq	net/minecraft/server/NBTTagCompound	net/minecraft/server/NBTTagCompound
+FIELD	iq	Ljava/util/Map;	a	field_738_a	a
+METHOD	iq	()Ljava/util/Collection;	c	func_28107_c	c
+METHOD	iq	(Ljava/lang/String;Lfo;)V	a	func_399_a	a
+METHOD	iq	(Ljava/lang/String;B)V	a	func_409_a	a
+METHOD	iq	(Ljava/lang/String;S)V	a	func_394_a	a
+METHOD	iq	(Ljava/lang/String;I)V	a	func_405_a	a
+METHOD	iq	(Ljava/lang/String;J)V	a	func_396_a	setLong
+METHOD	iq	(Ljava/lang/String;F)V	a	func_390_a	a
+METHOD	iq	(Ljava/lang/String;D)V	a	func_411_a	a
+METHOD	iq	(Ljava/lang/String;Ljava/lang/String;)V	a	func_403_a	setString
+METHOD	iq	(Ljava/lang/String;[B)V	a	func_391_a	a
+METHOD	iq	(Ljava/lang/String;Liq;)V	a	func_392_a	a
+METHOD	iq	(Ljava/lang/String;Z)V	a	func_393_a	a
+METHOD	iq	(Ljava/lang/String;)Z	b	func_410_a	hasKey
+METHOD	iq	(Ljava/lang/String;)B	c	func_408_b	c
+METHOD	iq	(Ljava/lang/String;)S	d	func_406_c	d
+METHOD	iq	(Ljava/lang/String;)I	e	func_395_d	e
+METHOD	iq	(Ljava/lang/String;)J	f	func_404_e	getLong
+METHOD	iq	(Ljava/lang/String;)F	g	func_389_f	g
+METHOD	iq	(Ljava/lang/String;)D	h	func_398_g	h
+METHOD	iq	(Ljava/lang/String;)Ljava/lang/String;	i	func_401_h	getString
+METHOD	iq	(Ljava/lang/String;)[B	j	func_400_i	j
+METHOD	iq	(Ljava/lang/String;)Liq;	k	func_397_j	k
+METHOD	iq	(Ljava/lang/String;)Llr;	l	func_407_k	l
+METHOD	iq	(Ljava/lang/String;)Z	m	func_402_l	m
+CLASS	ir	net/minecraft/server/PacketCounter	net/minecraft/server/PacketCounter
+FIELD	ir	I	a	field_22152_a	a
+FIELD	ir	J	b	field_22151_b	b
+METHOD	ir	(I)V	a	func_22150_a	a
+CLASS	is	net/minecraft/server/BlockStationary	net/minecraft/server/BlockStationary
+METHOD	is	(Ldj;III)V	i	func_30005_i	i
+METHOD	is	(Ldj;III)Z	j	func_4033_j	j
+CLASS	it	net/minecraft/server/Achievement	net/minecraft/server/Achievement
+FIELD	it	I	a	field_25067_a	a
+FIELD	it	I	b	field_27991_b	b
+FIELD	it	Lit;	c	field_27992_c	c
+FIELD	it	Ljava/lang/String;	l	field_27063_l	l
+FIELD	it	Lfy;	d	field_27064_d	d
+FIELD	it	Z	m	field_27062_m	m
+METHOD	it	()Lit;	a	func_27059_a	a
+METHOD	it	()Lit;	b	func_27060_b	b
+METHOD	it	()Lit;	c	func_27061_c	c
+CLASS	iu	net/minecraft/server/BlockSlowSand	net/minecraft/server/BlockSlowSand
+CLASS	iv	net/minecraft/server/Packet1Login	net/minecraft/server/Packet1Login
+FIELD	iv	I	a	field_4024_a	a
+FIELD	iv	Ljava/lang/String;	b	field_113_b	name
+FIELD	iv	J	c	field_4026_d	c
+FIELD	iv	B	d	field_4025_e	d
+CLASS	iw	net/minecraft/server/RecipesFood	net/minecraft/server/RecipesFood
+METHOD	iw	(Ley;)V	a	func_20177_a	a
+CLASS	ix	net/minecraft/server/Packet200Statistic	net/minecraft/server/Packet200Statistic
+FIELD	ix	I	a	field_27041_a	a
+FIELD	ix	I	b	field_27040_b	b
+CLASS	iy	net/minecraft/server/InventoryLargeChest	net/minecraft/server/InventoryLargeChest
+FIELD	iy	Ljava/lang/String;	a	field_502_a	a
+FIELD	iy	Lhp;	b	field_501_b	b
+FIELD	iy	Lhp;	c	field_503_c	c
+CLASS	iz	net/minecraft/server/BlockButton	net/minecraft/server/BlockButton
+METHOD	iz	(Ldj;III)I	g	func_22026_g	g
+METHOD	iz	(Ldj;III)Z	h	func_322_g	h
+CLASS	ja	net/minecraft/server/Packet106Transaction	net/minecraft/server/Packet106Transaction
+FIELD	ja	I	a	field_20034_a	a
+FIELD	ja	S	b	field_20033_b	b
+FIELD	ja	Z	c	field_20035_c	c
+CLASS	jb	net/minecraft/server/ChunkProviderLoadOrGenerate	net/minecraft/server/ChunkProviderLoadOrGenerate
+FIELD	jb	Ljava/util/Set;	a	field_28062_a	a
+FIELD	jb	Lhi;	b	field_28061_b	b
+FIELD	jb	Lbl;	c	field_28067_c	c
+FIELD	jb	Lan;	d	field_28066_d	d
+FIELD	jb	Ljava/util/Map;	e	field_28065_e	e
+FIELD	jb	Ljava/util/List;	f	field_28064_f	f
+FIELD	jb	Ldj;	g	field_28063_g	g
+METHOD	jb	(II)Lhi;	d	func_28058_d	d
+METHOD	jb	(Lhi;)V	a	func_28060_a	a
+METHOD	jb	(Lhi;)V	b	func_28059_b	b
+CLASS	jc	net/minecraft/server/BlockFlowing	net/minecraft/server/BlockFlowing
+FIELD	jc	I	a	field_659_a	field_659_a
+FIELD	jc	[Z	b	field_658_b	field_658_b
+FIELD	jc	[I	c	field_660_c	field_660_c
+METHOD	jc	(Ldj;III)V	i	func_30004_i	i
+METHOD	jc	(Ldj;IIII)V	h	func_311_f	flow
+METHOD	jc	(Ldj;IIIII)I	b	func_4034_a	b
+METHOD	jc	(Ldj;III)[Z	j	func_4035_j	j
+METHOD	jc	(Ldj;III)Z	k	func_309_k	k
+METHOD	jc	(Ldj;IIII)I	f	func_307_e	f
+METHOD	jc	(Ldj;III)Z	l	func_312_l	l
+CLASS	jd	net/minecraft/server/BlockTrapdoor	net/minecraft/server/BlockTrapdoor
+METHOD	jd	(I)V	c	func_28039_c	c
+METHOD	jd	(Ldj;IIIZ)V	a	func_28040_a	a
+METHOD	jd	(I)Z	d	func_28038_d	d
+CLASS	je	net/minecraft/server/BlockCactus	net/minecraft/server/BlockCactus
+CLASS	jf	net/minecraft/server/BlockDirt	net/minecraft/server/BlockDirt
+CLASS	jg	net/minecraft/server/MaterialPortal	net/minecraft/server/MaterialPortal
+CLASS	jh	net/minecraft/server/TileEntity	net/minecraft/server/TileEntity
+FIELD	jh	Ljava/util/Map;	a	field_481_e	a
+FIELD	jh	Ljava/util/Map;	b	field_480_f	b
+FIELD	jh	Ldj;	d	field_479_a	world
+FIELD	jh	I	e	field_478_b	x
+FIELD	jh	I	f	field_483_c	y
+FIELD	jh	I	g	field_482_d	z
+FIELD	jh	Z	h	field_31006_h	h
+METHOD	jh	()V	g_	func_184_b	g_
+METHOD	jh	(Liq;)V	a	func_186_a	a
+METHOD	jh	(Liq;)V	b	func_188_b	b
+METHOD	jh	()Lgt;	f	func_20070_f	f
+METHOD	jh	()I	e	func_31005_e	e
+METHOD	jh	(Ljava/lang/Class;Ljava/lang/String;)V	a	func_187_a	a
+METHOD	jh	(Liq;)Ljh;	c	func_185_c	c
+METHOD	jh	()Z	g	func_31004_g	g
+METHOD	jh	()V	h	func_31003_h	h
+METHOD	jh	()V	j	func_31002_j	j
+CLASS	ji	net/minecraft/server/Packet9Respawn	net/minecraft/server/Packet9Respawn
+FIELD	ji	B	a	field_28045_a	a
+CLASS	jj	net/minecraft/server/BlockMinecartTrack	net/minecraft/server/BlockMinecartTrack
+FIELD	jj	Z	a	field_27034_a	a
+METHOD	jj	(Ldj;III)Z	g	func_27029_g	g
+METHOD	jj	(I)Z	c	func_27030_c	c
+METHOD	jj	()Z	f	func_27028_d	f
+METHOD	jj	(Ldj;IIIZ)V	a	func_4038_g	a
+METHOD	jj	(Ldj;IIIIZI)Z	a	func_27032_a	a
+METHOD	jj	(Ldj;IIIZII)Z	a	func_27031_a	a
+METHOD	jj	(Ljj;)Z	a	func_27033_a	a
+CLASS	jk	net/minecraft/server/Packet3Chat	net/minecraft/server/Packet3Chat
+FIELD	jk	Ljava/lang/String;	a	field_150_a	message
+CLASS	jl	net/minecraft/server/NetworkManager	net/minecraft/server/NetworkManager
+FIELD	jl	Ljava/lang/Object;	a	field_1053_a	a
+FIELD	jl	I	b	field_1052_b	b
+FIELD	jl	I	c	field_1051_c	c
+FIELD	jl	Ljava/lang/Object;	g	field_1050_d	g
+FIELD	jl	Ljava/net/Socket;	h	field_1049_e	socket
+FIELD	jl	Ljava/net/SocketAddress;	i	field_12032_f	i
+FIELD	jl	Ljava/io/DataInputStream;	j	field_1048_f	input
+FIELD	jl	Ljava/io/DataOutputStream;	k	field_1047_g	output
+FIELD	jl	Z	l	field_1046_h	l
+FIELD	jl	Ljava/util/List;	m	field_1045_i	m
+FIELD	jl	Ljava/util/List;	n	field_1044_j	highPriorityQueue
+FIELD	jl	Ljava/util/List;	o	field_1043_k	lowPriorityQueue
+FIELD	jl	Lme;	p	field_1042_l	p
+FIELD	jl	Z	q	field_1041_m	q
+FIELD	jl	Ljava/lang/Thread;	r	field_1040_n	r
+FIELD	jl	Ljava/lang/Thread;	s	field_1039_o	s
+FIELD	jl	Z	t	field_1038_p	t
+FIELD	jl	Ljava/lang/String;	u	field_1037_q	u
+FIELD	jl	[Ljava/lang/Object;	v	field_20176_t	v
+FIELD	jl	I	w	field_1036_r	w
+FIELD	jl	I	x	field_1035_s	x
+FIELD	jl	[I	d	field_28141_d	d
+FIELD	jl	[I	e	field_28140_e	e
+FIELD	jl	I	f	field_1034_t	f
+FIELD	jl	I	y	field_20175_w	lowPriorityQueueDelay
+METHOD	jl	(Lme;)V	a	func_754_a	a
+METHOD	jl	(Lgt;)V	a	func_745_a	queue
+METHOD	jl	()Z	f	func_746_e	f
+METHOD	jl	()V	a	func_28138_a	a
+METHOD	jl	()Z	g	func_741_f	g
+METHOD	jl	(Ljava/lang/Exception;)V	a	func_750_a	a
+METHOD	jl	(Ljava/lang/String;[Ljava/lang/Object;)V	a	func_753_a	a
+METHOD	jl	()V	b	func_747_a	b
+METHOD	jl	()Ljava/net/SocketAddress;	c	func_755_b	getSocketAddress
+METHOD	jl	()V	d	func_752_c	d
+METHOD	jl	()I	e	func_744_d	e
+METHOD	jl	(Ljl;)Z	a	func_743_a	a
+METHOD	jl	(Ljl;)Z	b	func_740_b	b
+METHOD	jl	(Ljl;)Z	c	func_751_c	c
+METHOD	jl	(Ljl;)Z	d	func_749_d	d
+METHOD	jl	(Ljl;)Ljava/io/DataOutputStream;	e	func_28136_f	e
+METHOD	jl	(Ljl;)Z	f	func_28135_e	f
+METHOD	jl	(Ljl;Ljava/lang/Exception;)V	a	func_30007_a	a
+METHOD	jl	(Ljl;)Ljava/lang/Thread;	g	func_742_e	g
+METHOD	jl	(Ljl;)Ljava/lang/Thread;	h	func_748_f	h
+CLASS	jm	net/minecraft/server/WorldGenerator	net/minecraft/server/WorldGenerator
+METHOD	jm	(Ldj;Ljava/util/Random;III)Z	a	func_419_a	a
+METHOD	jm	(DDD)V	a	func_420_a	a
+CLASS	jn	net/minecraft/server/BlockMinecartDetector	net/minecraft/server/BlockMinecartDetector
+METHOD	jn	(Ldj;IIII)V	f	func_27035_f	f
+CLASS	jo	net/minecraft/server/MapGenCavesHell	net/minecraft/server/MapGenCavesHell
+METHOD	jo	(II[BDDD)V	a	func_4106_a	a
+METHOD	jo	(II[BDDDFFFIID)V	a	func_4105_a	a
+CLASS	jp	net/minecraft/server/IWorldAccess	net/minecraft/server/IWorldAccess
+METHOD	jp	(Ljava/lang/String;DDDDDD)V	a	func_687_a	a
+METHOD	jp	(Llq;)V	a	func_681_a	a
+METHOD	jp	(Llq;)V	b	func_688_b	b
+METHOD	jp	(Ljava/lang/String;DDDFF)V	a	func_689_a	a
+METHOD	jp	(IIIIII)V	a	func_685_a	a
+METHOD	jp	()V	a	func_684_a	a
+METHOD	jp	(III)V	a	func_683_a	a
+METHOD	jp	(Ljava/lang/String;III)V	a	func_682_a	a
+METHOD	jp	(IIILjh;)V	a	func_686_a	a
+METHOD	jp	(Lem;IIIII)V	a	func_28133_a	func_28133_a
+CLASS	jq	net/minecraft/server/NBTTagInt	net/minecraft/server/NBTTagInt
+FIELD	jq	I	a	field_742_a	a
+CLASS	jr	net/minecraft/server/BlockNote	net/minecraft/server/BlockNote
+CLASS	js	net/minecraft/server/SlotArmor	net/minecraft/server/SlotArmor
+FIELD	js	I	d	field_20102_a	field_20102_a
+FIELD	js	Lo;	e	field_20101_b	field_20101_b
+CLASS	jt	net/minecraft/server/WorldGenTaiga1	net/minecraft/server/WorldGenTaiga1
+CLASS	ju	net/minecraft/server/Packet33RelEntityMoveLook	net/minecraft/server/Packet33RelEntityMoveLook
+CLASS	jv	net/minecraft/server/WorldGenHellLava	net/minecraft/server/WorldGenHellLava
+FIELD	jv	I	a	field_4250_a	a
+CLASS	jw	net/minecraft/server/ItemSword	net/minecraft/server/ItemSword
+FIELD	jw	I	a	field_4210_a	a
+CLASS	jx	net/minecraft/server/RegionFile	net/minecraft/server/RegionFile
+FIELD	jx	[B	a	field_22143_a	a
+FIELD	jx	Ljava/io/File;	b	field_22142_b	b
+FIELD	jx	Ljava/io/RandomAccessFile;	c	field_22149_c	c
+FIELD	jx	[I	d	field_22148_d	d
+FIELD	jx	[I	e	field_22147_e	e
+FIELD	jx	Ljava/util/ArrayList;	f	field_22146_f	f
+FIELD	jx	I	g	field_22145_g	g
+FIELD	jx	J	h	field_22144_h	h
+METHOD	jx	()I	a	func_22139_a	a
+METHOD	jx	(Ljava/lang/String;)V	a	func_22141_a	a
+METHOD	jx	(Ljava/lang/String;)V	b	func_22134_b	b
+METHOD	jx	(Ljava/lang/String;IILjava/lang/String;)V	a	func_22129_a	a
+METHOD	jx	(Ljava/lang/String;IIILjava/lang/String;)V	a	func_22127_a	a
+METHOD	jx	(Ljava/lang/String;IILjava/lang/String;)V	b	func_22131_b	b
+METHOD	jx	(II)Ljava/io/DataInputStream;	a	func_22140_a	a
+METHOD	jx	(II)Ljava/io/DataOutputStream;	b	func_22135_b	b
+METHOD	jx	(II[BI)V	a	func_22133_a	a
+METHOD	jx	(I[BI)V	a	func_22130_a	a
+METHOD	jx	(II)Z	d	func_22136_d	d
+METHOD	jx	(II)I	e	func_22137_e	e
+METHOD	jx	(II)Z	c	func_22132_c	c
+METHOD	jx	(III)V	a	func_22128_a	a
+METHOD	jx	(III)V	b	func_22138_b	b
+METHOD	jx	()V	b	func_22126_b	b
+CLASS	jy	net/minecraft/server/ItemCookie	net/minecraft/server/ItemCookie
+CLASS	jz	net/minecraft/server/Packet27	net/minecraft/server/Packet27
+FIELD	jz	F	a	field_22035_a	a
+FIELD	jz	F	b	field_22034_b	b
+FIELD	jz	Z	c	field_22039_c	c
+FIELD	jz	Z	d	field_22038_d	d
+FIELD	jz	F	e	field_22037_e	e
+FIELD	jz	F	f	field_22036_f	f
+METHOD	jz	()F	c	func_22031_c	c
+METHOD	jz	()F	d	func_22029_d	d
+METHOD	jz	()F	e	func_22028_e	e
+METHOD	jz	()F	f	func_22033_f	f
+METHOD	jz	()Z	g	func_22032_g	g
+METHOD	jz	()Z	h	func_22030_h	h
+CLASS	ka	net/minecraft/server/ChunkProviderHell	net/minecraft/server/ChunkProviderHell
+FIELD	ka	Ljava/util/Random;	h	field_4241_h	h
+FIELD	ka	Lmp;	i	field_4240_i	i
+FIELD	ka	Lmp;	j	field_4239_j	j
+FIELD	ka	Lmp;	k	field_4238_k	k
+FIELD	ka	Lmp;	l	field_4237_l	l
+FIELD	ka	Lmp;	m	field_4236_m	m
+FIELD	ka	Lmp;	a	field_4248_a	a
+FIELD	ka	Lmp;	b	field_4247_b	b
+FIELD	ka	Ldj;	n	field_4235_n	n
+FIELD	ka	[D	o	field_4234_o	o
+FIELD	ka	[D	p	field_4233_p	p
+FIELD	ka	[D	q	field_4232_q	q
+FIELD	ka	[D	r	field_4231_r	r
+FIELD	ka	Ldy;	s	field_4230_s	s
+FIELD	ka	[D	c	field_4246_c	field_4246_c
+FIELD	ka	[D	d	field_4245_d	field_4245_d
+FIELD	ka	[D	e	field_4244_e	field_4244_e
+FIELD	ka	[D	f	field_4243_f	field_4243_f
+FIELD	ka	[D	g	field_4242_g	field_4242_g
+METHOD	ka	(II[B)V	a	func_4062_a	a
+METHOD	ka	(II[B)V	b	func_4061_b	b
+METHOD	ka	([DIIIIII)[D	a	func_4060_a	a
+CLASS	kb	net/minecraft/server/NBTTagByte	net/minecraft/server/NBTTagByte
+FIELD	kb	B	a	field_741_a	a
+CLASS	kc	net/minecraft/server/ItemPiston	net/minecraft/server/ItemPiston
+CLASS	kd	net/minecraft/server/PlayerListEntry	net/minecraft/server/PlayerListEntry
+FIELD	kd	J	a	field_1025_a	key
+FIELD	kd	Ljava/lang/Object;	b	field_1024_b	value
+FIELD	kd	Lkd;	c	field_1027_c	nextEntry
+FIELD	kd	I	d	field_1026_d	field_1026_d
+METHOD	kd	()J	a	func_736_a	a
+METHOD	kd	()Ljava/lang/Object;	b	func_735_b	b
+CLASS	ke	net/minecraft/server/Packet102WindowClick	net/minecraft/server/Packet102WindowClick
+FIELD	ke	I	a	field_20024_a	a
+FIELD	ke	I	b	field_20023_b	b
+FIELD	ke	I	c	field_20027_c	c
+FIELD	ke	S	d	field_20026_d	d
+FIELD	ke	Lfy;	e	field_20025_e	e
+FIELD	ke	Z	f	field_27039_f	f
+CLASS	kf	net/minecraft/server/EntityPainting	net/minecraft/server/EntityPainting
+FIELD	kf	I	f	field_452_ad	f
+FIELD	kf	I	a	field_448_a	a
+FIELD	kf	I	b	field_9188_d	b
+FIELD	kf	I	c	field_9187_e	c
+FIELD	kf	I	d	field_9186_f	d
+FIELD	kf	Lfr;	e	field_9185_b	e
+METHOD	kf	(I)V	b	func_179_a	b
+METHOD	kf	(I)F	c	func_180_c	c
+METHOD	kf	()Z	h	func_181_b	h
+CLASS	kg	net/minecraft/server/EntityTNTPrimed	net/minecraft/server/EntityTNTPrimed
+FIELD	kg	I	a	field_446_a	fuseTicks
+METHOD	kg	()V	h	func_178_b	explode
+CLASS	kh	net/minecraft/server/Explosion	net/minecraft/server/Explosion
+FIELD	kh	Z	a	field_12031_a	a
+FIELD	kh	Ljava/util/Random;	h	field_12024_h	h
+FIELD	kh	Ldj;	i	field_4310_a	world
+FIELD	kh	D	b	field_12030_b	posX
+FIELD	kh	D	c	field_12029_c	posY
+FIELD	kh	D	d	field_12028_d	posZ
+FIELD	kh	Llq;	e	field_12027_e	source
+FIELD	kh	F	f	field_12026_f	size
+FIELD	kh	Ljava/util/Set;	g	field_12025_g	blocks
+METHOD	kh	()V	a	func_12023_a	a
+METHOD	kh	(Z)V	a	func_732_a	a
+CLASS	ki	net/minecraft/server/NextTickListEntry	net/minecraft/server/NextTickListEntry
+FIELD	ki	J	f	field_1020_f	f
+FIELD	ki	I	a	field_1018_a	a
+FIELD	ki	I	b	field_1017_b	b
+FIELD	ki	I	c	field_1023_c	c
+FIELD	ki	I	d	field_1022_d	d
+FIELD	ki	J	e	field_1021_e	e
+FIELD	ki	J	g	field_1019_g	g
+METHOD	ki	(J)Lki;	a	func_733_a	a
+METHOD	ki	(Lki;)I	a	func_734_a	compareTo
+CLASS	kj	net/minecraft/server/ItemBow	net/minecraft/server/ItemBow
+CLASS	kk	net/minecraft/server/BiomeForest	net/minecraft/server/BiomeForest
+CLASS	kl	net/minecraft/server/BlockSandStone	net/minecraft/server/BlockSandStone
+CLASS	km	net/minecraft/server/Packet6SpawnPosition	net/minecraft/server/Packet6SpawnPosition
+FIELD	km	I	a	field_139_a	x
+FIELD	km	I	b	field_138_b	y
+FIELD	km	I	c	field_140_c	z
+CLASS	kn	net/minecraft/server/Packet34EntityTeleport	net/minecraft/server/Packet34EntityTeleport
+FIELD	kn	I	a	field_131_a	a
+FIELD	kn	I	b	field_130_b	b
+FIELD	kn	I	c	field_135_c	c
+FIELD	kn	I	d	field_134_d	d
+FIELD	kn	B	e	field_133_e	e
+FIELD	kn	B	f	field_132_f	f
+CLASS	ko	net/minecraft/server/BlockReed	net/minecraft/server/BlockReed
+METHOD	ko	(Ldj;III)V	g	func_4037_g	g
+CLASS	kp	net/minecraft/server/WorldProviderNormal	net/minecraft/server/WorldProviderNormal
+CLASS	kq	net/minecraft/server/RegionFileCache	net/minecraft/server/RegionFileCache
+FIELD	kq	Ljava/util/Map;	a	field_22125_a	field_22125_a
+METHOD	kq	(Ljava/io/File;II)Ljx;	a	func_22123_a	a
+METHOD	kq	()V	a	func_22122_a	func_22122_a
+METHOD	kq	(Ljava/io/File;II)I	b	func_22121_b	b
+METHOD	kq	(Ljava/io/File;II)Ljava/io/DataInputStream;	c	func_22124_c	c
+METHOD	kq	(Ljava/io/File;II)Ljava/io/DataOutputStream;	d	func_22120_d	d
+CLASS	kr	net/minecraft/server/ItemSeeds	net/minecraft/server/ItemSeeds
+FIELD	kr	I	a	field_271_a	id
+CLASS	ks	net/minecraft/server/ItemMinecart	net/minecraft/server/ItemMinecart
+FIELD	ks	I	a	field_270_a	a
+CLASS	kt	net/minecraft/server/Packet60Explosion	net/minecraft/server/Packet60Explosion
+FIELD	kt	D	a	field_12003_a	a
+FIELD	kt	D	b	field_12002_b	b
+FIELD	kt	D	c	field_12006_c	c
+FIELD	kt	F	d	field_12005_d	d
+FIELD	kt	Ljava/util/Set;	e	field_12004_e	e
+CLASS	ku	net/minecraft/server/BlockWeb	net/minecraft/server/BlockWeb
+CLASS	kv	net/minecraft/server/BlockFluids	net/minecraft/server/BlockFluids
+METHOD	kv	(I)F	c	func_299_b	c
+METHOD	kv	(Ldj;III)I	g	func_301_g	g
+METHOD	kv	(Lpb;III)I	b	func_303_b	b
+METHOD	kv	(Lpb;III)Lba;	c	func_298_c	c
+METHOD	kv	(Ldj;III)V	i	func_302_i	i
+METHOD	kv	(Ldj;III)V	h	func_300_h	h
+CLASS	kw	net/minecraft/server/ChunkFilenameFilter	net/minecraft/server/ChunkFilenameFilter
+FIELD	kw	Ljava/util/regex/Pattern;	a	field_22119_a	a
+METHOD	kw	(Ljava/io/File;Ljava/lang/String;)Z	accept	accept	accept
+CLASS	kx	net/minecraft/server/EnumMobType	net/minecraft/server/EnumMobType
+FIELD	kx	Lkx;	a	everything	everything
+FIELD	kx	Lkx;	b	mobs	mobs
+FIELD	kx	Lkx;	c	players	players
+FIELD	kx	[Lkx;	d	field_990_d	d
+FIELD	kx	[Lkx;	$VALUES	$VALUES	$VALUES
+METHOD	kx	()[Lkx;	values	values	values
+METHOD	kx	(Ljava/lang/String;)Lkx;	valueOf	valueOf	valueOf
+CLASS	ky	net/minecraft/server/PropertyManager	net/minecraft/server/PropertyManager
+FIELD	ky	Ljava/util/logging/Logger;	a	field_995_a	a
+FIELD	ky	Ljava/util/Properties;	b	field_994_b	properties
+FIELD	ky	Ljava/io/File;	c	field_996_c	c
+METHOD	ky	()V	a	func_723_a	a
+METHOD	ky	()V	b	func_721_b	savePropertiesFile
+METHOD	ky	(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;	a	func_720_a	getString
+METHOD	ky	(Ljava/lang/String;I)I	a	func_722_a	getInt
+METHOD	ky	(Ljava/lang/String;Z)Z	a	func_724_a	getBoolean
+METHOD	ky	(Ljava/lang/String;Z)V	b	func_22118_b	b
+CLASS	kz	net/minecraft/server/BlockLongGrass	net/minecraft/server/BlockLongGrass
+CLASS	la	net/minecraft/server/Packet29DestroyEntity	net/minecraft/server/Packet29DestroyEntity
+FIELD	la	I	a	field_116_a	a
+CLASS	lb	net/minecraft/server/BlockContainer	net/minecraft/server/BlockContainer
+METHOD	lb	()Ljh;	a_	func_294_a_	a_
+CLASS	lc	net/minecraft/server/ItemCoal	net/minecraft/server/ItemCoal
+CLASS	ld	net/minecraft/server/NetworkAcceptThread	net/minecraft/server/NetworkAcceptThread
+FIELD	ld	Lnet/minecraft/server/MinecraftServer;	a	field_986_a	mcServer
+FIELD	ld	Lcu;	b	field_985_b	field_985_b
+CLASS	le	net/minecraft/server/BiomeSky	net/minecraft/server/BiomeSky
+CLASS	lf	net/minecraft/server/BlockClay	net/minecraft/server/BlockClay
+CLASS	lg	net/minecraft/server/ItemSaddle	net/minecraft/server/ItemSaddle
+CLASS	lh	net/minecraft/server/Packet32EntityLook	net/minecraft/server/Packet32EntityLook
+CLASS	li	net/minecraft/server/Packet50PreChunk	net/minecraft/server/Packet50PreChunk
+FIELD	li	I	a	field_103_a	a
+FIELD	li	I	b	field_102_b	b
+FIELD	li	Z	c	field_104_c	c
+CLASS	lj	net/minecraft/server/WorldGenLightStone2	net/minecraft/server/WorldGenLightStone2
+CLASS	lk	net/minecraft/server/MaterialLiquid	net/minecraft/server/MaterialLiquid
+CLASS	ll	net/minecraft/server/ContainerDispenser	net/minecraft/server/ContainerDispenser
+FIELD	ll	Lak;	a	field_21133_a	a
+CLASS	lm	net/minecraft/server/WorldMapHumanTracker	net/minecraft/server/WorldMapHumanTracker
+FIELD	lm	Lem;	a	field_28120_a	trackee
+FIELD	lm	[I	b	field_28119_b	b
+FIELD	lm	[I	c	field_28125_c	c
+FIELD	lm	I	e	field_28123_e	e
+FIELD	lm	I	f	field_28122_f	f
+FIELD	lm	[B	g	field_28121_g	g
+FIELD	lm	Lfv;	d	field_28124_d	field_28124_d
+METHOD	lm	(Lfy;)[B	a	func_28118_a	a
+CLASS	ln	net/minecraft/server/TileEntityFurnace	net/minecraft/server/TileEntityFurnace
+FIELD	ln	[Lfy;	i	field_489_e	items
+FIELD	ln	I	a	field_488_f	burnTime
+FIELD	ln	I	b	field_487_g	ticksForCurrentFuel
+FIELD	ln	I	c	field_486_h	cookTime
+METHOD	ln	()Z	k	func_191_e	isBurning
+METHOD	ln	()Z	m	func_193_g	canBurn
+METHOD	ln	()V	l	func_189_f	burn
+METHOD	ln	(Lfy;)I	a	func_194_a	fuelTime
+CLASS	lo	net/minecraft/server/BlockRedstoneWire	net/minecraft/server/BlockRedstoneWire
+FIELD	lo	Z	a	field_652_a	a
+FIELD	lo	Ljava/util/Set;	b	field_21032_b	b
+METHOD	lo	(Ldj;III)V	g	func_292_g	g
+METHOD	lo	(Ldj;IIIIII)V	a	func_21031_a	a
+METHOD	lo	(Ldj;III)V	h	func_291_h	h
+METHOD	lo	(Ldj;IIII)I	f	func_290_f	getPower
+METHOD	lo	(Lpb;IIII)Z	c	func_293_b	c
+CLASS	lp	net/minecraft/server/EntityArrow	net/minecraft/server/EntityArrow
+FIELD	lp	I	d	field_9183_c	d
+FIELD	lp	I	e	field_9182_d	e
+FIELD	lp	I	f	field_9180_e	f
+FIELD	lp	I	g	field_9179_f	g
+FIELD	lp	I	h	field_28011_h	h
+FIELD	lp	Z	i	field_9181_aj	inGround
+FIELD	lp	Z	a	field_28012_a	fromPlayer
+FIELD	lp	I	b	field_9184_a	shake
+FIELD	lp	Lhl;	c	field_439_ah	shooter
+FIELD	lp	I	j	field_438_ai	j
+FIELD	lp	I	k	field_437_aj	k
+METHOD	lp	(DDDFF)V	a	func_177_a	a
+CLASS	lq	net/minecraft/server/Entity	net/minecraft/server/Entity
+FIELD	lq	I	a	field_384_a	entityCount
+FIELD	lq	I	aG	field_331_c	id
+FIELD	lq	D	aH	field_9094_h	aH
+FIELD	lq	Z	aI	field_329_e	aI
+FIELD	lq	Llq;	aJ	field_328_f	passenger
+FIELD	lq	Llq;	aK	field_327_g	vehicle
+FIELD	lq	Ldj;	aL	field_9093_l	world
+FIELD	lq	D	aM	field_9092_m	lastX
+FIELD	lq	D	aN	field_9091_n	lastY
+FIELD	lq	D	aO	field_9090_o	lastZ
+FIELD	lq	D	aP	field_322_l	locX
+FIELD	lq	D	aQ	field_321_m	locY
+FIELD	lq	D	aR	field_320_n	locZ
+FIELD	lq	D	aS	field_319_o	motX
+FIELD	lq	D	aT	field_318_p	motY
+FIELD	lq	D	aU	field_317_q	motZ
+FIELD	lq	F	aV	field_316_r	yaw
+FIELD	lq	F	aW	field_315_s	pitch
+FIELD	lq	F	aX	field_9089_x	lastYaw
+FIELD	lq	F	aY	field_9088_y	lastPitch
+FIELD	lq	Lcz;	aZ	field_312_v	boundingBox
+FIELD	lq	Z	ba	field_9086_A	onGround
+FIELD	lq	Z	bb	field_9084_B	positionChanged
+FIELD	lq	Z	bc	field_9082_C	bc
+FIELD	lq	Z	bd	field_9080_D	bd
+FIELD	lq	Z	be	field_9078_E	velocityChanged
+FIELD	lq	Z	bf	field_27012_bb	bf
+FIELD	lq	Z	bg	field_9077_F	bg
+FIELD	lq	Z	bh	field_304_B	dead
+FIELD	lq	F	bi	field_9076_H	height
+FIELD	lq	F	bj	field_300_D	length
+FIELD	lq	F	bk	field_298_E	width
+FIELD	lq	F	bl	field_9075_K	bl
+FIELD	lq	F	bm	field_9074_L	bm
+FIELD	lq	F	bn	field_9072_N	fallDistance
+FIELD	lq	I	b	field_6151_b	b
+FIELD	lq	D	bo	field_9071_O	bo
+FIELD	lq	D	bp	field_9070_P	bp
+FIELD	lq	D	bq	field_9069_Q	bq
+FIELD	lq	F	br	field_9068_R	br
+FIELD	lq	F	bs	field_9067_S	bs
+FIELD	lq	Z	bt	field_9066_T	bt
+FIELD	lq	F	bu	field_286_P	bu
+FIELD	lq	Ljava/util/Random;	bv	field_9064_W	random
+FIELD	lq	I	bw	field_9063_X	ticksLived
+FIELD	lq	I	bx	field_9062_Y	maxFireTicks
+FIELD	lq	I	by	field_9061_Z	fireTicks
+FIELD	lq	I	bz	field_9087_aa	maxAirTicks
+FIELD	lq	Z	bA	field_9085_ab	bA
+FIELD	lq	I	bB	field_9083_ac	noDamageTicks
+FIELD	lq	I	bC	field_9081_ad	airTicks
+FIELD	lq	Z	c	field_4131_c	justCreated
+FIELD	lq	Z	bD	field_9079_ae	fireProof
+FIELD	lq	Lmo;	bE	field_21045_af	datawatcher
+FIELD	lq	F	bF	field_31001_bF	bF
+FIELD	lq	D	d	field_4130_d	d
+FIELD	lq	D	e	field_4128_e	e
+FIELD	lq	Z	bG	field_276_Z	bG
+FIELD	lq	I	bH	field_307_aa	bH
+FIELD	lq	I	bI	field_305_ab	bI
+FIELD	lq	I	bJ	field_303_ac	bJ
+FIELD	lq	Z	bK	field_28008_bI	bK
+METHOD	lq	(F)V	a	func_114_a	a
+METHOD	lq	()V	m_	func_106_b_	m_
+METHOD	lq	(Liq;)V	b	func_97_a	b
+METHOD	lq	(Liq;)V	a	func_99_b	a
+METHOD	lq	(Llq;I)Z	a	func_121_a	damageEntity
+METHOD	lq	()Z	n	func_25017_l	n
+METHOD	lq	()V	b	func_21044_a	b
+METHOD	lq	()Z	l_	func_129_c_	l_
+METHOD	lq	()V	E	func_115_v	E
+METHOD	lq	(Llq;I)V	c	func_96_b	c
+METHOD	lq	()F	t	func_104_p	t
+METHOD	lq	()D	I	func_117_x	I
+METHOD	lq	()V	J	func_118_j	die
+METHOD	lq	()Z	K	func_91_u	K
+METHOD	lq	(Lhl;)V	a	func_27010_a	a
+METHOD	lq	()V	P	func_4042_C	P
+METHOD	lq	(Lem;)Z	a	func_6092_a	a
+METHOD	lq	(Lem;)V	b	func_6093_b	b
+METHOD	lq	()Lmo;	aa	func_21039_p	aa
+METHOD	lq	(FF)V	b	func_113_a	b
+METHOD	lq	(FF)V	c	func_6096_b	c
+METHOD	lq	(DDD)V	c	func_86_a	setPosition
+METHOD	lq	()V	R	func_84_k	R
+METHOD	lq	()V	ab	func_4040_n	ab
+METHOD	lq	()V	Y	func_4043_o	Y
+METHOD	lq	(DDD)Z	d	func_133_b	d
+METHOD	lq	(DDD)V	a	func_88_c	move
+METHOD	lq	(DZ)V	a	func_122_m	a
+METHOD	lq	()Lcz;	e_	func_93_n	e_
+METHOD	lq	(I)V	a	func_125_b	burn
+METHOD	lq	()Z	ac	func_27008_Y	ac
+METHOD	lq	()Z	ad	func_27011_Z	ad
+METHOD	lq	()Z	f_	func_119_o	f_
+METHOD	lq	(Lhj;)Z	a	func_110_a	a
+METHOD	lq	()Z	ae	func_112_q	ae
+METHOD	lq	(FFF)V	a	func_90_a	a
+METHOD	lq	(F)F	c	func_108_b	c
+METHOD	lq	(Ldj;)V	a	func_28007_a	spawnIn
+METHOD	lq	(DDDFF)V	b	func_6095_b	setLocation
+METHOD	lq	(DDDFF)V	c	func_107_c	setPositionRotation
+METHOD	lq	(Llq;)F	f	func_94_a	f
+METHOD	lq	(DDD)D	e	func_101_d	e
+METHOD	lq	(DDD)D	f	func_103_e	f
+METHOD	lq	(Llq;)D	g	func_102_b	g
+METHOD	lq	(Llq;)V	h	func_92_c	collide
+METHOD	lq	(DDD)V	b	func_87_f	b
+METHOD	lq	()V	af	func_9060_u	af
+METHOD	lq	()Z	d_	func_124_r	d_
+METHOD	lq	(Liq;)Z	c	func_95_c	c
+METHOD	lq	(Liq;)V	d	func_98_d	d
+METHOD	lq	(Liq;)V	e	func_100_e	e
+METHOD	lq	()Ljava/lang/String;	ag	func_109_s	ag
+METHOD	lq	([D)Llr;	a	func_132_a	a
+METHOD	lq	([F)Llr;	a	func_85_a	a
+METHOD	lq	(II)Lez;	b	func_128_a	b
+METHOD	lq	(IIF)Lez;	a	func_123_a	a
+METHOD	lq	(Lfy;F)Lez;	a	func_21040_a	a
+METHOD	lq	()Z	T	func_120_t	T
+METHOD	lq	(Llq;)Lcz;	a_	func_89_d	a_
+METHOD	lq	()V	f	func_127_w	f
+METHOD	lq	()D	m	func_130_h	m
+METHOD	lq	(Llq;)V	b	func_6094_e	mount
+METHOD	lq	()Lba;	Z	func_4039_B	Z
+METHOD	lq	()[Lfy;	i_	func_20042_E	getEquipment
+METHOD	lq	()Z	ah	func_9059_p	isSneaking
+METHOD	lq	(Z)V	e	func_21043_b	setSneak
+METHOD	lq	(I)Z	d	func_21042_c	d
+METHOD	lq	(IZ)V	a	func_21041_a	a
+METHOD	lq	(Lc;)V	a	func_27009_a	a
+METHOD	lq	(DDD)Z	g	func_28005_g	g
+CLASS	lr	net/minecraft/server/NBTTagList	net/minecraft/server/NBTTagList
+FIELD	lr	Ljava/util/List;	a	field_737_a	a
+FIELD	lr	B	b	field_736_b	b
+METHOD	lr	(Lfo;)V	a	func_386_a	a
+METHOD	lr	(I)Lfo;	a	func_388_a	a
+METHOD	lr	()I	c	func_387_b	c
+CLASS	ls	net/minecraft/server/Packet23VehicleSpawn	net/minecraft/server/Packet23VehicleSpawn
+FIELD	ls	I	a	field_98_a	a
+FIELD	ls	I	b	field_97_b	b
+FIELD	ls	I	c	field_101_c	c
+FIELD	ls	I	d	field_100_d	d
+FIELD	ls	I	e	field_28044_e	e
+FIELD	ls	I	f	field_28043_f	f
+FIELD	ls	I	g	field_28042_g	g
+FIELD	ls	I	h	field_99_e	h
+FIELD	ls	I	i	field_28041_i	i
+CLASS	lt	net/minecraft/server/MapGenCaves	net/minecraft/server/MapGenCaves
+METHOD	lt	(II[BDDD)V	a	func_669_a	a
+METHOD	lt	(II[BDDDFFFIID)V	a	func_668_a	a
+CLASS	lu	net/minecraft/server/BlockStairs	net/minecraft/server/BlockStairs
+FIELD	lu	Lna;	a	field_651_a	a
+CLASS	lv	net/minecraft/server/MetadataChunkBlock	net/minecraft/server/MetadataChunkBlock
+FIELD	lv	Lco;	a	field_957_a	a
+FIELD	lv	I	b	field_956_b	b
+FIELD	lv	I	c	field_962_c	c
+FIELD	lv	I	d	field_961_d	d
+FIELD	lv	I	e	field_960_e	e
+FIELD	lv	I	f	field_959_f	f
+FIELD	lv	I	g	field_958_g	g
+METHOD	lv	(Ldj;)V	a	func_4107_a	a
+METHOD	lv	(IIIIII)Z	a	func_692_a	a
+CLASS	lw	net/minecraft/server/Packet31RelEntityMove	net/minecraft/server/Packet31RelEntityMove
+CLASS	lx	net/minecraft/server/NBTTagDouble	net/minecraft/server/NBTTagDouble
+FIELD	lx	D	a	field_735_a	a
+CLASS	ly	net/minecraft/server/ItemAxe	net/minecraft/server/ItemAxe
+FIELD	ly	[Lna;	bk	field_4207_bb	bk
+CLASS	lz	net/minecraft/server/BlockFurnace	net/minecraft/server/BlockFurnace
+FIELD	lz	Ljava/util/Random;	a	field_28033_a	a
+FIELD	lz	Z	b	field_655_a	b
+FIELD	lz	Z	c	field_28034_c	c
+METHOD	lz	(Ldj;III)V	g	func_296_g	g
+METHOD	lz	(ZLdj;III)V	a	func_295_a	a
+CLASS	ma	net/minecraft/server/BiomeSwamp	net/minecraft/server/BiomeSwamp
+CLASS	mb	net/minecraft/server/ICommandListener	net/minecraft/server/ICommandListener
+METHOD	mb	(Ljava/lang/String;)V	b	func_2_b	sendMessage
+METHOD	mb	()Ljava/lang/String;	d	func_1_c	getName
+CLASS	mc	net/minecraft/server/ConsoleCommandHandler	net/minecraft/server/ConsoleCommandHandler
+FIELD	mc	Ljava/util/logging/Logger;	a	field_22117_a	a
+FIELD	mc	Lnet/minecraft/server/MinecraftServer;	b	field_22116_b	server
+METHOD	mc	(Laf;)V	a	func_22114_a	handle
+METHOD	mc	(Ljava/lang/String;Ljava/lang/String;Lmb;)V	a	func_22113_a	a
+METHOD	mc	(Lmb;)V	a	func_22111_a	a
+METHOD	mc	(Ljava/lang/String;Ljava/lang/String;)V	a	func_22115_a	print
+METHOD	mc	(Ljava/lang/String;I)I	a	func_22112_a	a
+CLASS	md	net/minecraft/server/BlockMushroom	net/minecraft/server/BlockMushroom
+CLASS	me	net/minecraft/server/NetHandler	net/minecraft/server/NetHandler
+METHOD	me	(Ljz;)V	a	func_22001_a	a
+METHOD	me	(Lfm;)V	a	func_18_a	a
+METHOD	me	(Lgm;)V	a	func_26_a	a
+METHOD	me	(Leo;)V	a	func_24_a	a
+METHOD	me	(Ljava/lang/String;[Ljava/lang/Object;)V	a	func_6_a	a
+METHOD	me	(Lgt;)V	a	func_6001_a	a
+METHOD	me	(Lfd;)V	a	func_11_a	a
+METHOD	me	(Ljk;)V	a	func_23_a	a
+METHOD	me	(Lim;)V	a	func_3_a	a
+METHOD	me	(Lmk;)V	a	func_21001_a	a
+METHOD	me	(Lpv;)V	a	func_4009_a	a
+METHOD	me	(La;)V	a	func_6006_a	a
+METHOD	me	(Lji;)V	a	func_9002_a	a
+METHOD	me	(Lhw;)V	a	func_20006_a	a
+METHOD	me	(Lke;)V	a	func_20007_a	a
+METHOD	me	(Lja;)V	a	func_20008_a	a
+METHOD	me	(Lms;)V	a	func_20005_a	a
+METHOD	me	()Z	c	func_27003_c	c
+METHOD	me	(Lcs;)V	a	func_4_a	a
+METHOD	me	(Liv;)V	a	func_4001_a	a
+METHOD	me	(Loq;)V	a	func_13_a	a
+METHOD	me	(Lmn;)V	a	func_12_a	a
+METHOD	me	(Lli;)V	a	func_29_a	a
+METHOD	me	(Lhu;)V	a	func_4002_a	a
+METHOD	me	(Lmr;)V	a	func_30_a	a
+METHOD	me	(Lkn;)V	a	func_4007_a	a
+METHOD	me	(Lla;)V	a	func_8_a	a
+METHOD	me	(Lif;)V	a	func_4004_a	a
+METHOD	me	(Lcc;)V	a	func_28_a	a
+METHOD	me	(Lls;)V	a	func_4003_a	a
+METHOD	me	(Lhy;)V	a	func_6004_a	a
+METHOD	me	(Lgf;)V	a	func_4006_a	a
+METHOD	me	(Lew;)V	a	func_25_a	a
+METHOD	me	(Lkm;)V	a	func_15_a	a
+METHOD	me	(Lef;)V	a	func_6002_a	a
+METHOD	me	(Lnc;)V	a	func_21002_a	a
+METHOD	me	(Lio;)V	a	func_6003_a	a
+METHOD	me	(Lgc;)V	a	func_9001_a	a
+METHOD	me	(Ldb;)V	a	func_9003_a	a
+METHOD	me	(Lkt;)V	a	func_12001_a	a
+METHOD	me	(Lfw;)V	a	func_20004_a	a
+METHOD	me	(Lfe;)V	a	func_20003_a	a
+METHOD	me	(Lgr;)V	a	func_20001_a	a
+METHOD	me	(Lid;)V	a	func_20002_a	a
+METHOD	me	(Ll;)V	a	func_16_a	a
+METHOD	me	(Lnt;)V	a	func_21003_a	a
+METHOD	me	(Lnv;)V	a	func_21004_a	a
+METHOD	me	(Lix;)V	a	func_27001_a	a
+METHOD	me	(Lgq;)V	a	func_22002_a	a
+METHOD	me	(Lbg;)V	a	func_25001_a	a
+METHOD	me	(Ldf;)V	a	func_27002_a	a
+METHOD	me	(Lw;)V	a	func_28001_a	a
+METHOD	me	(Lds;)V	a	func_28002_a	a
+CLASS	mf	net/minecraft/server/TileEntityNote	net/minecraft/server/TileEntityNote
+FIELD	mf	B	a	field_21077_e	note
+FIELD	mf	Z	b	field_21076_f	b
+METHOD	mf	()V	a	func_21075_a	a
+METHOD	mf	(Ldj;III)V	a	func_21074_a	play
+CLASS	mg	net/minecraft/server/ChunkLoader	net/minecraft/server/ChunkLoader
+FIELD	mg	Ljava/io/File;	a	field_945_a	a
+FIELD	mg	Z	b	field_944_b	b
+METHOD	mg	(II)Ljava/io/File;	a	func_665_a	a
+METHOD	mg	(Lhi;Ldj;Liq;)V	a	func_663_a	a
+METHOD	mg	(Ldj;Liq;)Lhi;	a	func_664_a	a
+CLASS	mh	net/minecraft/server/RecipeIngots	net/minecraft/server/RecipeIngots
+FIELD	mh	[[Ljava/lang/Object;	a	field_20160_a	a
+METHOD	mh	(Ley;)V	a	func_20159_a	a
+CLASS	mi	net/minecraft/server/WorldLoader	net/minecraft/server/WorldLoader
+FIELD	mi	Ljava/io/File;	a	field_22106_a	a
+METHOD	mi	(Ljava/lang/String;)Lct;	b	func_22103_b	b
+METHOD	mi	([Ljava/io/File;)V	a	func_22104_a	a
+METHOD	mi	(Ljava/lang/String;Z)Lom;	a	func_22105_a	a
+CLASS	mj	net/minecraft/server/ItemRecord	net/minecraft/server/ItemRecord
+FIELD	mj	Ljava/lang/String;	a	field_261_a	a
+CLASS	mk	net/minecraft/server/Packet19EntityAction	net/minecraft/server/Packet19EntityAction
+FIELD	mk	I	a	field_21021_a	a
+FIELD	mk	I	b	field_21020_b	animation
+CLASS	ml	net/minecraft/server/ShapelessRecipes	net/minecraft/server/ShapelessRecipes
+FIELD	ml	Lfy;	a	field_21138_a	a
+FIELD	ml	Ljava/util/List;	b	field_21137_b	b
+CLASS	mm	net/minecraft/server/CraftingStatistic	net/minecraft/server/CraftingStatistic
+FIELD	mm	I	a	field_27990_a	a
+CLASS	mn	net/minecraft/server/Packet53BlockChange	net/minecraft/server/Packet53BlockChange
+FIELD	mn	I	a	field_90_a	a
+FIELD	mn	I	b	field_89_b	b
+FIELD	mn	I	c	field_93_c	c
+FIELD	mn	I	d	field_92_d	material
+FIELD	mn	I	e	field_91_e	data
+CLASS	mo	net/minecraft/server/DataWatcher	net/minecraft/server/DataWatcher
+FIELD	mo	Ljava/util/HashMap;	a	field_21158_a	a
+FIELD	mo	Ljava/util/Map;	b	field_21157_b	b
+FIELD	mo	Z	c	field_21159_c	c
+METHOD	mo	(ILjava/lang/Object;)V	a	func_21153_a	a
+METHOD	mo	(I)B	a	func_21156_a	a
+METHOD	mo	(I)I	b	func_25075_b	b
+METHOD	mo	(I)Ljava/lang/String;	c	func_25076_c	c
+METHOD	mo	(ILjava/lang/Object;)V	b	func_21155_b	watch
+METHOD	mo	()Z	a	func_21150_a	a
+METHOD	mo	(Ljava/util/List;Ljava/io/DataOutputStream;)V	a	func_21151_a	a
+METHOD	mo	()Ljava/util/ArrayList;	b	func_21148_b	b
+METHOD	mo	(Ljava/io/DataOutputStream;)V	a	func_21152_a	a
+METHOD	mo	(Ljava/io/DataOutputStream;Lht;)V	a	func_21154_a	a
+METHOD	mo	(Ljava/io/DataInputStream;)Ljava/util/List;	a	func_21149_a	a
+CLASS	mp	net/minecraft/server/NoiseGeneratorOctaves	net/minecraft/server/NoiseGeneratorOctaves
+FIELD	mp	[Lab;	a	field_939_a	a
+FIELD	mp	I	b	field_938_b	b
+METHOD	mp	(DD)D	a	func_647_a	a
+METHOD	mp	([DDDDIIIDDD)[D	a	func_648_a	a
+METHOD	mp	([DIIIIDDD)[D	a	func_4103_a	a
+CLASS	mq	net/minecraft/server/NoiseGeneratorOctaves2	net/minecraft/server/NoiseGeneratorOctaves2
+FIELD	mq	[Lbi;	a	field_4308_a	a
+FIELD	mq	I	b	field_4307_b	b
+METHOD	mq	([DDDIIDDD)[D	a	func_4101_a	a
+METHOD	mq	([DDDIIDDDD)[D	a	func_4100_a	a
+CLASS	mr	net/minecraft/server/Packet30Entity	net/minecraft/server/Packet30Entity
+FIELD	mr	I	a	field_83_a	a
+FIELD	mr	B	b	field_82_b	b
+FIELD	mr	B	c	field_88_c	c
+FIELD	mr	B	d	field_87_d	d
+FIELD	mr	B	e	field_86_e	e
+FIELD	mr	B	f	field_85_f	f
+FIELD	mr	Z	g	field_84_g	g
+CLASS	ms	net/minecraft/server/Packet130UpdateSign	net/minecraft/server/Packet130UpdateSign
+FIELD	ms	I	a	field_20020_a	x
+FIELD	ms	I	b	field_20019_b	y
+FIELD	ms	I	c	field_20022_c	z
+FIELD	ms	[Ljava/lang/String;	d	field_20021_d	lines
+CLASS	mt	net/minecraft/server/BlockSign	net/minecraft/server/BlockSign
+FIELD	mt	Ljava/lang/Class;	a	field_654_a	a
+FIELD	mt	Z	b	field_653_b	b
+CLASS	mu	net/minecraft/server/TileEntityPiston	net/minecraft/server/TileEntityPiston
+FIELD	mu	I	a	field_31016_a	a
+FIELD	mu	I	b	field_31014_b	b
+FIELD	mu	I	c	field_31020_c	c
+FIELD	mu	Z	i	field_31019_i	i
+FIELD	mu	Z	j	field_31018_j	j
+FIELD	mu	F	k	field_31017_k	k
+FIELD	mu	F	l	field_31015_l	l
+FIELD	mu	Ljava/util/List;	m	field_31013_m	m
+METHOD	mu	()I	a	func_31012_a	a
+METHOD	mu	()Z	c	func_31010_c	c
+METHOD	mu	()I	d	func_31008_d	d
+METHOD	mu	(F)F	a	func_31007_a	a
+METHOD	mu	(FF)V	a	func_31009_a	a
+METHOD	mu	()V	k	func_31011_k	k
+CLASS	mv	net/minecraft/server/NBTTagShort	net/minecraft/server/NBTTagShort
+FIELD	mv	S	a	field_734_a	a
+CLASS	mw	net/minecraft/server/BlockCake	net/minecraft/server/BlockCake
+METHOD	mw	(Ldj;IIILem;)V	c	func_21030_c	c
+CLASS	mx	net/minecraft/server/PortalTravelAgent	net/minecraft/server/PortalTravelAgent
+FIELD	mx	Ljava/util/Random;	a	field_28117_a	a
+METHOD	mx	(Ldj;Llq;)V	a	func_28115_a	a
+METHOD	mx	(Ldj;Llq;)Z	b	func_28114_b	b
+METHOD	mx	(Ldj;Llq;)Z	c	func_28116_c	c
+CLASS	my	net/minecraft/server/MinecraftException	net/minecraft/server/MinecraftException
+CLASS	mz	net/minecraft/server/BlockPistonMoving	net/minecraft/server/BlockPistonMoving
+METHOD	mz	(IIIZZ)Ljh;	a	func_31030_a	a
+METHOD	mz	(Ldj;IIIIFI)Lcz;	a	func_31032_a	a
+METHOD	mz	(Lpb;III)Lmu;	b	func_31031_b	b
+CLASS	na	net/minecraft/server/Block	net/minecraft/server/Block
+FIELD	na	Lbu;	d	field_551_e	d
+FIELD	na	Lbu;	e	field_9028_e	e
+FIELD	na	Lbu;	f	field_9027_f	f
+FIELD	na	Lbu;	g	field_9026_g	g
+FIELD	na	Lbu;	h	field_9025_h	h
+FIELD	na	Lbu;	i	field_9024_i	i
+FIELD	na	Lbu;	j	field_9023_j	j
+FIELD	na	Lbu;	k	field_9022_k	k
+FIELD	na	Lbu;	l	field_9021_l	l
+FIELD	na	[Lna;	m	field_542_n	byId
+FIELD	na	[Z	n	field_541_o	n
+FIELD	na	[Z	o	field_540_p	o
+FIELD	na	[Z	p	field_539_q	isTileEntity
+FIELD	na	[I	q	field_538_r	q
+FIELD	na	[Z	r	field_537_s	r
+FIELD	na	[I	s	field_536_t	s
+FIELD	na	[Z	t	field_28029_t	t
+FIELD	na	Lna;	u	field_535_u	STONE
+FIELD	na	Loj;	v	field_534_v	GRASS
+FIELD	na	Lna;	w	field_533_w	DIRT
+FIELD	na	Lna;	x	field_532_x	COBBLESTONE
+FIELD	na	Lna;	y	field_531_y	WOOD
+FIELD	na	Lna;	z	field_6047_y	SAPLING
+FIELD	na	Lna;	A	field_4064_A	BEDROCK
+FIELD	na	Lna;	B	field_598_B	WATER
+FIELD	na	Lna;	C	field_596_C	STATIONARY_WATER
+FIELD	na	Lna;	D	field_594_D	LAVA
+FIELD	na	Lna;	E	field_592_E	STATIONARY_LAVA
+FIELD	na	Lna;	F	field_590_F	SAND
+FIELD	na	Lna;	G	field_4062_G	GRAVEL
+FIELD	na	Lna;	H	field_4061_H	GOLD_ORE
+FIELD	na	Lna;	I	field_4059_I	IRON_ORE
+FIELD	na	Lna;	J	field_583_J	COAL_ORE
+FIELD	na	Lna;	K	field_582_K	LOG
+FIELD	na	Lar;	L	field_581_L	LEAVES
+FIELD	na	Lna;	M	field_9043_L	SPONGE
+FIELD	na	Lna;	N	field_4056_N	GLASS
+FIELD	na	Lna;	O	field_9042_N	LAPIS_ORE
+FIELD	na	Lna;	P	field_9041_O	LAPIS_BLOCK
+FIELD	na	Lna;	Q	field_9040_P	DISPENSER
+FIELD	na	Lna;	R	field_9039_Q	SANDSTONE
+FIELD	na	Lna;	S	field_9038_R	NOTE_BLOCK
+FIELD	na	Lna;	T	field_9037_S	BED
+FIELD	na	Lna;	U	field_9036_T	GOLDEN_RAIL
+FIELD	na	Lna;	V	field_9034_U	DETECTOR_RAIL
+FIELD	na	Lna;	W	field_9033_V	PISTON_STICKY
+FIELD	na	Lna;	X	field_9032_W	WEB
+FIELD	na	Lkz;	Y	field_9031_X	LONG_GRASS
+FIELD	na	Lfz;	Z	field_9030_Y	DEAD_BUSH
+FIELD	na	Lna;	aa	field_9029_Z	PISTON
+FIELD	na	Lg;	ab	field_9049_aa	PISTON_EXTENSION
+FIELD	na	Lna;	ac	field_616_ac	WOOL
+FIELD	na	Lmz;	ad	field_9048_ac	PISTON_MOVING
+FIELD	na	Lnw;	ae	field_4072_ae	YELLOW_FLOWER
+FIELD	na	Lnw;	af	field_4071_af	RED_ROSE
+FIELD	na	Lnw;	ag	field_4070_ag	BROWN_MUSHROOM
+FIELD	na	Lnw;	ah	field_4069_ah	RED_MUSHROOM
+FIELD	na	Lna;	ai	field_4068_ai	GOLD_BLOCK
+FIELD	na	Lna;	aj	field_4067_aj	IRON_BLOCK
+FIELD	na	Lna;	ak	field_608_ak	DOUBLE_STEP
+FIELD	na	Lna;	al	field_607_al	STEP
+FIELD	na	Lna;	am	field_9047_al	BRICK
+FIELD	na	Lna;	an	field_605_an	TNT
+FIELD	na	Lna;	ao	field_604_ao	BOOKSHELF
+FIELD	na	Lna;	ap	field_603_ap	MOSSY_COBBLESTONE
+FIELD	na	Lna;	aq	field_602_aq	OBSIDIAN
+FIELD	na	Lna;	ar	field_9046_aq	TORCH
+FIELD	na	Lpt;	as	field_599_as	FIRE
+FIELD	na	Lna;	at	field_597_at	MOB_SPAWNER
+FIELD	na	Lna;	au	field_9045_at	WOOD_STAIRS
+FIELD	na	Lna;	av	field_593_av	CHEST
+FIELD	na	Lna;	aw	field_591_aw	REDSTONE_WIRE
+FIELD	na	Lna;	ax	field_588_ax	DIAMOND_ORE
+FIELD	na	Lna;	ay	field_4060_ay	DIAMOND_BLOCK
+FIELD	na	Lna;	az	field_9044_ay	WORKBENCH
+FIELD	na	Lna;	aA	field_644_aA	CROPS
+FIELD	na	Lna;	aB	field_643_aB	SOIL
+FIELD	na	Lna;	aC	field_642_aC	FURNACE
+FIELD	na	Lna;	aD	field_641_aD	BURNING_FURNACE
+FIELD	na	Lna;	aE	field_4084_aE	SIGN_POST
+FIELD	na	Lna;	aF	field_639_aF	WOODEN_DOOR
+FIELD	na	Lna;	aG	field_638_aG	LADDER
+FIELD	na	Lna;	aH	field_637_aH	minecartTrack
+FIELD	na	Lna;	aI	field_9055_aH	COBBLESTONE_STAIRS
+FIELD	na	Lna;	aJ	field_4082_aJ	WALL_SIGN
+FIELD	na	Lna;	aK	field_9054_aJ	LEVER
+FIELD	na	Lna;	aL	field_9053_aK	STONE_PLATE
+FIELD	na	Lna;	aM	field_632_aM	IRON_DOOR_BLOCK
+FIELD	na	Lna;	aN	field_9052_aM	WOOD_PLATE
+FIELD	na	Lna;	aO	field_630_aO	REDSTONE_ORE
+FIELD	na	Lna;	aP	field_629_aP	GLOWING_REDSTONE_ORE
+FIELD	na	Lna;	aQ	field_628_aQ	REDSTONE_TORCH_OFF
+FIELD	na	Lna;	aR	field_627_aR	REDSTONE_TORCH_ON
+FIELD	na	Lna;	aS	field_9051_aR	STONE_BUTTON
+FIELD	na	Lna;	aT	field_625_aT	SNOW
+FIELD	na	Lna;	aU	field_4077_aU	ICE
+FIELD	na	Lna;	aV	field_4076_aV	SNOW_BLOCK
+FIELD	na	Lna;	aW	field_622_aW	CACTUS
+FIELD	na	Lna;	aX	field_621_aX	CLAY
+FIELD	na	Lna;	aY	field_620_aY	SUGAR_CANE_BLOCK
+FIELD	na	Lna;	aZ	field_619_aZ	JUKEBOX
+FIELD	na	Lna;	ba	field_9050_aZ	FENCE
+FIELD	na	Lna;	bb	field_4052_bb	PUMPKIN
+FIELD	na	Lna;	bc	field_4050_bc	bloodStone
+FIELD	na	Lna;	bd	field_4048_bd	SOUL_SAND
+FIELD	na	Lna;	be	field_6065_bd	GLOWSTONE
+FIELD	na	Lz;	bf	field_4044_bf	PORTAL
+FIELD	na	Lna;	bg	field_9035_bf	JACK_O_LANTERN
+FIELD	na	Lna;	bh	field_21026_bg	CAKE_BLOCK
+FIELD	na	Lna;	bi	field_22011_bh	DIODE_OFF
+FIELD	na	Lna;	bj	field_22010_bi	DIODE_ON
+FIELD	na	Lna;	bk	field_25013_bj	LOCKED_CHEST
+FIELD	na	Lna;	bl	field_28030_bl	TRAP_DOOR
+FIELD	na	I	bm	field_575_bb	textureId
+FIELD	na	I	bn	field_573_bc	id
+FIELD	na	F	bo	field_571_bd	strength
+FIELD	na	F	bp	field_569_be	durability
+FIELD	na	Z	bq	field_27024_bo	bq
+FIELD	na	Z	br	field_27023_bp	br
+FIELD	na	D	bs	field_567_bf	minX
+FIELD	na	D	bt	field_565_bg	minY
+FIELD	na	D	bu	field_563_bh	minZ
+FIELD	na	D	bv	field_561_bi	maxX
+FIELD	na	D	bw	field_559_bj	maxY
+FIELD	na	D	bx	field_557_bk	maxZ
+FIELD	na	Lbu;	by	field_555_bl	stepSound
+FIELD	na	F	bz	field_554_bm	bz
+FIELD	na	Lhj;	bA	field_553_bn	material
+FIELD	na	F	bB	field_552_bo	frictionFactor
+FIELD	na	Ljava/lang/String;	a	field_666_a	name
+METHOD	na	()Z	b	func_28025_b	b
+METHOD	na	(Ldj;III)Z	a	func_259_a	canPlace
+METHOD	na	(Ldj;III)Z	f	func_220_f	f
+METHOD	na	(Ldj;IIILjava/util/Random;)V	a	func_221_a	a
+METHOD	na	(II)I	a	func_22009_a	a
+METHOD	na	(I)I	a	func_241_a	a
+METHOD	na	(Ldj;IIII)Z	d	func_238_d	d
+METHOD	na	(Lpb;IIII)Z	a	func_239_b	a
+METHOD	na	(Ldj;IIII)V	b	func_234_b	doPhysics
+METHOD	na	(Ldj;IIILem;)Z	a	func_246_a	interact
+METHOD	na	()Z	d	func_225_d	isPowerSource
+METHOD	na	(Ldj;IIILhl;)V	a	func_4027_a	postPlace
+METHOD	na	(Ldj;III)V	c	func_250_e	c
+METHOD	na	()Z	a	func_240_b	a
+METHOD	na	(ILjava/util/Random;)I	a	func_252_a	a
+METHOD	na	(Ljava/util/Random;)I	a	func_244_a	a
+METHOD	na	(Ldj;III)V	d	func_4029_c	d
+METHOD	na	(Ldj;IIII)V	c	func_251_a	postBreak
+METHOD	na	(Ldj;IIILem;)V	b	func_235_b	b
+METHOD	na	(Ldj;III)Lcz;	e	func_248_d	e
+METHOD	na	(Ldj;III)V	b	func_242_b	remove
+METHOD	na	(Ldj;Lem;IIII)V	a	func_12007_g	a
+METHOD	na	(I)I	a_	func_21025_b	a_
+METHOD	na	(Ldj;IIILlq;)V	b	func_249_b	b
+METHOD	na	(Ldj;IIIII)V	a	func_21024_a	a
+METHOD	na	(Ldj;IIILlq;)V	a	func_263_a	a
+METHOD	na	()I	e	func_31025_e	e
+METHOD	na	(Ljava/lang/String;)Ljava/lang/Class;	_mthclass$	_mthclass$	_mthclass$
+METHOD	na	()I	c	func_4028_b	c
+METHOD	na	(Lpb;III)V	a	func_233_a	a
+METHOD	na	(IZ)Z	a	func_243_a	a
+METHOD	na	(Lpb;IIII)Z	b	func_253_a	b
+METHOD	na	(Ldj;IIILlq;Lba;)V	a	func_230_a	a
+METHOD	na	(Ldj;IIIIF)V	a	func_227_a	dropNaturally
+METHOD	na	(Ldj;IIILba;Lba;)Lnh;	a	func_262_a	a
+METHOD	na	(Ldj;IIII)Z	a	func_28026_e	canPlace
+METHOD	na	(Ldj;IIII)V	e	func_255_c	postPlace
+METHOD	na	(Ldj;IIILcz;Ljava/util/ArrayList;)V	a	func_264_a	a
+METHOD	na	(Llq;)F	a	func_226_a	a
+METHOD	na	()Z	k_	func_245_e	k_
+METHOD	na	()V	h	func_28028_f	h
+METHOD	na	()Lna;	g	func_28027_k	g
+METHOD	na	(Lbu;)Lna;	a	func_4026_a	a
+METHOD	na	(I)Lna;	f	func_258_c	f
+METHOD	na	(F)Lna;	a	func_224_a	a
+METHOD	na	(F)Lna;	b	func_232_b	b
+METHOD	na	(F)Lna;	c	func_237_c	c
+METHOD	na	()Lna;	i	func_31027_i	i
+METHOD	na	()F	j	func_31026_j	j
+METHOD	na	(Z)Lna;	a	func_231_a	a
+METHOD	na	(FFFFFF)V	a	func_229_a	a
+METHOD	na	(Lem;)F	a	func_254_a	getDamage
+METHOD	na	(Ldj;IIII)V	g	func_247_a_	g
+METHOD	na	(Ldj;IIILfy;)V	a	func_31024_a	a
+METHOD	na	(Lba;)Z	a	func_223_a	a
+METHOD	na	(Lba;)Z	b	func_228_b	b
+METHOD	na	(Lba;)Z	c	func_236_c	c
+METHOD	na	(Ljava/lang/String;)Lna;	a	func_20037_a	a
+METHOD	na	()Ljava/lang/String;	k	func_25012_e	k
+METHOD	na	()Ljava/lang/String;	l	func_20036_e	l
+METHOD	na	()Z	m	func_27022_g	m
+METHOD	na	()Lna;	n	func_27021_h	n
+CLASS	nb	net/minecraft/server/EntitySlime	net/minecraft/server/EntitySlime
+FIELD	nb	F	a	field_401_a	a
+FIELD	nb	F	b	field_400_b	b
+FIELD	nb	I	c	field_402_ae	size
+METHOD	nb	(I)V	e	func_160_c	setSize
+METHOD	nb	()I	o	func_25027_m	getSize
+CLASS	nc	net/minecraft/server/Packet40EntityMetadata	net/minecraft/server/Packet40EntityMetadata
+FIELD	nc	I	a	field_21019_a	a
+FIELD	nc	Ljava/util/List;	b	field_21018_b	b
+CLASS	nd	net/minecraft/server/ItemLeaves	net/minecraft/server/ItemLeaves
+CLASS	ne	net/minecraft/server/EntityZombie	net/minecraft/server/EntityZombie
+CLASS	nf	net/minecraft/server/ServerGUI	net/minecraft/server/ServerGUI
+FIELD	nf	Ljava/util/logging/Logger;	a	field_22_a	a
+FIELD	nf	Lnet/minecraft/server/MinecraftServer;	b	field_21_b	b
+METHOD	nf	(Lnet/minecraft/server/MinecraftServer;)V	a	func_46_a	a
+METHOD	nf	()Ljavax/swing/JComponent;	a	func_45_a	a
+METHOD	nf	()Ljavax/swing/JComponent;	b	func_48_b	b
+METHOD	nf	()Ljavax/swing/JComponent;	c	func_47_d	c
+METHOD	nf	(Lnf;)Lnet/minecraft/server/MinecraftServer;	a	func_44_a	a
+CLASS	ng	net/minecraft/server/ItemSign	net/minecraft/server/ItemSign
+CLASS	nh	net/minecraft/server/MovingObjectPosition	net/minecraft/server/MovingObjectPosition
+FIELD	nh	Lgd;	a	field_927_a	type
+FIELD	nh	I	b	field_926_b	b
+FIELD	nh	I	c	field_932_c	c
+FIELD	nh	I	d	field_931_d	d
+FIELD	nh	I	e	field_930_e	face
+FIELD	nh	Lba;	f	field_929_f	f
+FIELD	nh	Llq;	g	field_928_g	entity
+CLASS	ni	net/minecraft/server/ItemBoat	net/minecraft/server/ItemBoat
+CLASS	nj	net/minecraft/server/BlockBed	net/minecraft/server/BlockBed
+FIELD	nj	[[I	a	field_22023_a	a
+METHOD	nj	()V	o	func_22017_f	o
+METHOD	nj	(I)I	c	func_22019_c	c
+METHOD	nj	(I)Z	d	func_22020_d	d
+METHOD	nj	(I)Z	e	func_22018_f	e
+METHOD	nj	(Ldj;IIIZ)V	a	func_22022_a	a
+METHOD	nj	(Ldj;IIII)Lay;	f	func_22021_g	f
+CLASS	nk	net/minecraft/server/BlockLog	net/minecraft/server/BlockLog
+CLASS	nl	net/minecraft/server/EntityTracker	net/minecraft/server/EntityTracker
+FIELD	nl	Ljava/util/Set;	a	field_911_a	a
+FIELD	nl	Lgo;	b	field_910_b	b
+FIELD	nl	Lnet/minecraft/server/MinecraftServer;	c	field_913_c	c
+FIELD	nl	I	d	field_912_d	d
+FIELD	nl	I	e	field_28113_e	e
+METHOD	nl	(Llq;)V	a	func_611_a	track
+METHOD	nl	(Llq;II)V	a	func_6187_a	track
+METHOD	nl	(Llq;IIZ)V	a	func_6186_a	track
+METHOD	nl	(Llq;)V	b	func_610_b	untrackEntity
+METHOD	nl	()V	a	func_607_a	updatePlayers
+METHOD	nl	(Llq;Lgt;)V	a	func_12021_a	a
+METHOD	nl	(Llq;Lgt;)V	b	func_609_a	sendPacketToEntity
+METHOD	nl	(Ldl;)V	a	func_9238_a	untrackPlayer
+CLASS	nm	net/minecraft/server/Packet12PlayerLook	net/minecraft/server/Packet12PlayerLook
+CLASS	nn	net/minecraft/server/BlockRegister	net/minecraft/server/BlockRegister
+FIELD	nn	[B	a	field_26002_a	a
+METHOD	nn	([B)V	a	func_26001_a	a
+CLASS	no	net/minecraft/server/BlockSoil	net/minecraft/server/BlockSoil
+METHOD	no	(Ldj;III)Z	g	func_282_g	g
+METHOD	no	(Ldj;III)Z	h	func_283_h	h
+CLASS	np	net/minecraft/server/BlockTorch	net/minecraft/server/BlockTorch
+METHOD	np	(Ldj;III)Z	g	func_31028_g	g
+METHOD	np	(Ldj;III)Z	h	func_279_g	h
+CLASS	nq	net/minecraft/server/MinecartTrackLogic	net/minecraft/server/MinecartTrackLogic
+FIELD	nq	Ldj;	b	field_887_b	b
+FIELD	nq	I	c	field_893_c	c
+FIELD	nq	I	d	field_892_d	d
+FIELD	nq	I	e	field_891_e	e
+FIELD	nq	Z	f	field_27084_f	f
+FIELD	nq	Ljava/util/List;	g	field_889_g	g
+FIELD	nq	Ljj;	a	field_888_a	minecartTrack
+METHOD	nq	(I)V	a	func_27083_a	a
+METHOD	nq	()V	a	func_591_b	a
+METHOD	nq	(III)Z	a	func_589_a	a
+METHOD	nq	(Loa;)Lnq;	a	func_595_a	a
+METHOD	nq	(Lnq;)Z	b	func_590_b	b
+METHOD	nq	(III)Z	b	func_599_b	b
+METHOD	nq	()I	b	func_594_c	b
+METHOD	nq	(Lnq;)Z	c	func_597_c	c
+METHOD	nq	(Lnq;)V	d	func_598_d	d
+METHOD	nq	(III)Z	c	func_592_c	c
+METHOD	nq	(ZZ)V	a	func_596_a	a
+METHOD	nq	(Lnq;)I	a	func_600_a	a
+CLASS	nr	net/minecraft/server/SlotResult2	net/minecraft/server/SlotResult2
+FIELD	nr	Lem;	d	field_27007_d	d
+CLASS	ns	net/minecraft/server/Statistic	net/minecraft/server/Statistic
+FIELD	ns	I	e	field_25063_d	e
+FIELD	ns	Ljava/lang/String;	f	field_25062_e	f
+FIELD	ns	Z	g	field_27058_g	g
+FIELD	ns	Ljava/lang/String;	h	field_27057_h	h
+FIELD	ns	Loe;	a	field_25065_a	a
+FIELD	ns	Ljava/text/NumberFormat;	b	field_25066_b	b
+FIELD	ns	Loe;	i	field_27056_i	i
+FIELD	ns	Ljava/text/DecimalFormat;	c	field_25068_c	c
+FIELD	ns	Loe;	j	field_27055_j	j
+FIELD	ns	Loe;	k	field_27054_k	k
+METHOD	ns	()Ljava/lang/String;	toString	toString	toString
+METHOD	ns	()Lns;	d	func_27053_d	d
+METHOD	ns	()Lns;	e	func_27052_e	e
+CLASS	nt	net/minecraft/server/Packet25EntityPainting	net/minecraft/server/Packet25EntityPainting
+FIELD	nt	I	a	field_21013_a	a
+FIELD	nt	I	b	field_21012_b	b
+FIELD	nt	I	c	field_21017_c	c
+FIELD	nt	I	d	field_21016_d	d
+FIELD	nt	I	e	field_21015_e	e
+FIELD	nt	Ljava/lang/String;	f	field_21014_f	f
+CLASS	nu	net/minecraft/server/EntityEgg	net/minecraft/server/EntityEgg
+FIELD	nu	I	b	field_20086_b	b
+FIELD	nu	I	c	field_20085_c	c
+FIELD	nu	I	d	field_20084_d	d
+FIELD	nu	I	e	field_20082_e	e
+FIELD	nu	Z	f	field_20080_f	f
+FIELD	nu	I	a	field_20087_a	a
+FIELD	nu	Lhl;	g	field_20083_aj	thrower
+FIELD	nu	I	h	field_20081_ak	h
+FIELD	nu	I	i	field_20079_al	i
+METHOD	nu	(DDDFF)V	a	func_20078_a	a
+CLASS	nv	net/minecraft/server/Packet54PlayNoteBlock	net/minecraft/server/Packet54PlayNoteBlock
+FIELD	nv	I	a	field_21008_a	a
+FIELD	nv	I	b	field_21007_b	b
+FIELD	nv	I	c	field_21011_c	c
+FIELD	nv	I	d	field_21010_d	d
+FIELD	nv	I	e	field_21009_e	e
+CLASS	nw	net/minecraft/server/BlockFlower	net/minecraft/server/BlockFlower
+METHOD	nw	(I)Z	c	func_277_b	c
+METHOD	nw	(Ldj;III)V	g	func_276_g	g
+CLASS	nx	net/minecraft/server/ItemArmor	net/minecraft/server/ItemArmor
+FIELD	nx	[I	bn	field_259_ba	bn
+FIELD	nx	[I	bo	field_258_bb	bo
+FIELD	nx	I	a	field_254_a	a
+FIELD	nx	I	bk	field_257_aX	bk
+FIELD	nx	I	bl	field_256_aY	bl
+FIELD	nx	I	bm	field_255_aZ	bm
+CLASS	ny	net/minecraft/server/ItemSpade	net/minecraft/server/ItemSpade
+FIELD	ny	[Lna;	bk	field_4206_bb	bk
+CLASS	nz	net/minecraft/server/WorldProviderHell	net/minecraft/server/WorldProviderHell
+CLASS	oa	net/minecraft/server/ChunkPosition	net/minecraft/server/ChunkPosition
+FIELD	oa	I	a	field_846_a	x
+FIELD	oa	I	b	field_845_b	y
+FIELD	oa	I	c	field_847_c	z
+CLASS	ob	net/minecraft/server/NibbleArray	net/minecraft/server/NibbleArray
+FIELD	ob	[B	a	field_844_a	a
+METHOD	ob	(III)I	a	func_562_a	a
+METHOD	ob	(IIII)V	a	func_561_a	a
+METHOD	ob	()Z	a	func_560_a	a
+CLASS	oc	net/minecraft/server/EntityPig	net/minecraft/server/EntityPig
+METHOD	oc	()Z	x	func_21065_K	hasSaddle
+METHOD	oc	(Z)V	a	func_21064_a	setSaddle
+CLASS	od	net/minecraft/server/PistonBlockTextures	net/minecraft/server/PistonBlockTextures
+FIELD	od	[I	a	field_31052_a	a
+FIELD	od	[I	b	field_31051_b	b
+FIELD	od	[I	c	field_31054_c	c
+FIELD	od	[I	d	field_31053_d	d
+CLASS	oe	net/minecraft/server/Counter	net/minecraft/server/Counter
+CLASS	of	net/minecraft/server/InventoryCraftResult	net/minecraft/server/InventoryCraftResult
+FIELD	of	[Lfy;	a	field_20071_a	items
+CLASS	og	net/minecraft/server/EntityListEntry	net/minecraft/server/EntityListEntry
+FIELD	og	I	a	field_841_a	hashEntry
+FIELD	og	Ljava/lang/Object;	b	field_840_b	valueEntry
+FIELD	og	Log;	c	field_843_c	nextEntry
+FIELD	og	I	d	field_842_d	slotHash
+METHOD	og	()I	a	func_559_a	a
+METHOD	og	()Ljava/lang/Object;	b	func_558_b	b
+CLASS	oh	net/minecraft/server/ConsoleLogFormatter	net/minecraft/server/ConsoleLogFormatter
+FIELD	oh	Ljava/text/SimpleDateFormat;	a	field_839_a	a
+METHOD	oh	(Ljava/util/logging/LogRecord;)Ljava/lang/String;	format	format	format
+CLASS	oi	net/minecraft/server/BlockDiode	net/minecraft/server/BlockDiode
+FIELD	oi	[D	a	field_22014_a	a
+FIELD	oi	[I	b	field_22013_b	b
+FIELD	oi	Z	c	field_22015_c	c
+METHOD	oi	(Ldj;IIII)Z	f	func_22012_g	f
+CLASS	oj	net/minecraft/server/BlockGrass	net/minecraft/server/BlockGrass
+CLASS	ok	net/minecraft/server/EntityFlying	net/minecraft/server/EntityFlying
+CLASS	ol	net/minecraft/server/ItemWorldMap	net/minecraft/server/ItemWorldMap
+METHOD	ol	(Lfy;Ldj;)Lfv;	a	func_28023_a	a
+METHOD	ol	(Ldj;Llq;Lfv;)V	a	func_28024_a	a
+CLASS	om	net/minecraft/server/IDataManager	net/minecraft/server/IDataManager
+METHOD	om	(Los;)Lan;	a	func_22092_a	func_22092_a
+METHOD	om	(Lct;Ljava/util/List;)V	a	func_22095_a	func_22095_a
+METHOD	om	()V	e	func_22093_e	e
+METHOD	om	()Lct;	c	func_22096_c	func_22096_c
+METHOD	om	()V	b	func_22091_b	func_22091_b
+METHOD	om	(Lct;)V	a	func_22094_a	func_22094_a
+METHOD	om	()Lfl;	d	func_22090_d	func_22090_d
+METHOD	om	(Ljava/lang/String;)Ljava/io/File;	b	func_28111_b	b
+CLASS	on	net/minecraft/server/WorldGenTaiga2	net/minecraft/server/WorldGenTaiga2
+CLASS	oo	net/minecraft/server/PlayerManager	net/minecraft/server/PlayerManager
+FIELD	oo	Ljava/util/List;	a	field_9216_a	managedPlayers
+FIELD	oo	Ldx;	b	field_9215_b	b
+FIELD	oo	Ljava/util/List;	c	field_833_c	c
+FIELD	oo	Lnet/minecraft/server/MinecraftServer;	d	field_832_d	server
+FIELD	oo	I	e	field_28110_e	e
+FIELD	oo	I	f	field_28109_f	f
+FIELD	oo	[[I	g	field_22089_e	g
+METHOD	oo	()Ldp;	a	func_540_a	a
+METHOD	oo	()V	b	func_538_a	flush
+METHOD	oo	(IIZ)Ly;	a	func_537_a	a
+METHOD	oo	(III)V	a	func_535_a	flagDirty
+METHOD	oo	(Ldl;)V	a	func_9214_a	addPlayer
+METHOD	oo	(Ldl;)V	b	func_9213_b	removePlayer
+METHOD	oo	(IIII)Z	a	func_544_a	a
+METHOD	oo	(Ldl;)V	c	func_543_c	movePlayer
+METHOD	oo	()I	c	func_542_b	getFurthestViewableBlock
+METHOD	oo	(Loo;)Ldx;	a	func_539_b	a
+METHOD	oo	(Loo;)Ljava/util/List;	b	func_533_c	b
+CLASS	op	net/minecraft/server/WorldGenPumpkin	net/minecraft/server/WorldGenPumpkin
+CLASS	oq	net/minecraft/server/Packet52MultiBlockChange	net/minecraft/server/Packet52MultiBlockChange
+FIELD	oq	I	a	field_48_a	a
+FIELD	oq	I	b	field_47_b	b
+FIELD	oq	[S	c	field_52_c	c
+FIELD	oq	[B	d	field_51_d	d
+FIELD	oq	[B	e	field_50_e	e
+FIELD	oq	I	f	field_49_f	f
+CLASS	or	net/minecraft/server/EntityChicken	net/minecraft/server/EntityChicken
+FIELD	or	Z	a	field_392_a	a
+FIELD	or	F	b	field_391_b	b
+FIELD	or	F	c	field_395_ad	c
+FIELD	or	F	f	field_394_ae	f
+FIELD	or	F	g	field_393_af	g
+FIELD	or	F	h	field_390_ai	h
+FIELD	or	I	i	field_396_aj	i
+CLASS	os	net/minecraft/server/WorldProvider	net/minecraft/server/WorldProvider
+FIELD	os	Ldj;	a	field_4302_a	a
+FIELD	os	Lph;	b	field_4301_b	b
+FIELD	os	Z	c	field_6167_c	field_6167_c
+FIELD	os	Z	d	field_6166_d	d
+FIELD	os	Z	e	field_4306_c	e
+FIELD	os	[F	f	field_4305_d	f
+FIELD	os	I	g	field_6165_g	dimension
+FIELD	os	[F	h	field_6164_h	h
+METHOD	os	()V	a	func_4090_a	a
+METHOD	os	()Lbl;	b	func_4087_c	getChunkProvider
+METHOD	os	(JF)F	a	func_4089_a	a
+METHOD	os	(II)Z	a	func_4092_a	canSpawn
+METHOD	os	()V	c	func_4088_b	c
+METHOD	os	()Z	d	func_28108_d	d
+METHOD	os	(Ldj;)V	a	func_4093_a	a
+METHOD	os	(I)Los;	a	func_4091_a	func_4091_a
+CLASS	ot	net/minecraft/server/RecipesWeapons	net/minecraft/server/RecipesWeapons
+FIELD	ot	[[Ljava/lang/String;	a	field_20114_a	a
+FIELD	ot	[[Ljava/lang/Object;	b	field_20113_b	b
+METHOD	ot	(Ley;)V	a	func_20112_a	a
+CLASS	ou	net/minecraft/server/NBTTagString	net/minecraft/server/NBTTagString
+FIELD	ou	Ljava/lang/String;	a	field_732_a	a
+CLASS	ov	net/minecraft/server/BlockSponge	net/minecraft/server/BlockSponge
+CLASS	ow	net/minecraft/server/NetworkMasterThread	net/minecraft/server/NetworkMasterThread
+FIELD	ow	Ljl;	a	field_829_a	netManager
+CLASS	ox	net/minecraft/server/ThreadMonitorConnection	net/minecraft/server/ThreadMonitorConnection
+FIELD	ox	Ljl;	a	field_828_a	netManager
+CLASS	oy	net/minecraft/server/NetworkReaderThread	net/minecraft/server/NetworkReaderThread
+FIELD	oy	Ljl;	a	field_827_a	netManager
+CLASS	oz	net/minecraft/server/NetworkWriterThread	net/minecraft/server/NetworkWriterThread
+FIELD	oz	Ljl;	a	field_826_a	netManager
+CLASS	net/minecraft/server/MinecraftServer	net/minecraft/server/MinecraftServer	net/minecraft/server/MinecraftServer
+FIELD	net/minecraft/server/MinecraftServer	Ljava/util/logging/Logger;	a	field_6038_a	log
+FIELD	net/minecraft/server/MinecraftServer	Ljava/util/HashMap;	b	field_6037_b	trackerList
+FIELD	net/minecraft/server/MinecraftServer	Lcu;	c	field_6036_c	networkListenThread
+FIELD	net/minecraft/server/MinecraftServer	Lky;	d	field_6035_d	propertyManager
+FIELD	net/minecraft/server/MinecraftServer	[Ldp;	e	field_6034_e	worldServer
+FIELD	net/minecraft/server/MinecraftServer	Lfc;	f	field_6033_f	serverConfigurationManager
+FIELD	net/minecraft/server/MinecraftServer	Lmc;	p	field_22005_o	consoleCommandHandler
+FIELD	net/minecraft/server/MinecraftServer	Z	q	field_6025_n	isRunning
+FIELD	net/minecraft/server/MinecraftServer	Z	g	field_6032_g	isStopped
+FIELD	net/minecraft/server/MinecraftServer	I	h	field_9014_h	deathTime
+FIELD	net/minecraft/server/MinecraftServer	Ljava/lang/String;	i	field_9013_i	i
+FIELD	net/minecraft/server/MinecraftServer	I	j	field_9012_j	j
+FIELD	net/minecraft/server/MinecraftServer	Ljava/util/List;	r	field_9010_p	r
+FIELD	net/minecraft/server/MinecraftServer	Ljava/util/List;	s	field_6023_p	s
+FIELD	net/minecraft/server/MinecraftServer	[Lnl;	k	field_6028_k	tracker
+FIELD	net/minecraft/server/MinecraftServer	Z	l	field_6027_l	onlineMode
+FIELD	net/minecraft/server/MinecraftServer	Z	m	field_6026_m	spawnAnimals
+FIELD	net/minecraft/server/MinecraftServer	Z	n	field_9011_n	pvpMode
+FIELD	net/minecraft/server/MinecraftServer	Z	o	field_27005_o	allowFlight
+METHOD	net/minecraft/server/MinecraftServer	()V	run	run	run
+METHOD	net/minecraft/server/MinecraftServer	()Z	c	func_6008_d	init
+METHOD	net/minecraft/server/MinecraftServer	(Lil;Ljava/lang/String;J)V	a	func_6017_c	a
+METHOD	net/minecraft/server/MinecraftServer	(Ljava/lang/String;I)V	a	func_6019_a	outputPercentRemaining
+METHOD	net/minecraft/server/MinecraftServer	()V	e	func_6011_e	clearCurrentTask
+METHOD	net/minecraft/server/MinecraftServer	()V	f	func_6012_f	saveServerWorld
+METHOD	net/minecraft/server/MinecraftServer	()V	g	func_6013_g	stopServer
+METHOD	net/minecraft/server/MinecraftServer	()V	a	func_6016_a	initiateShutdown
+METHOD	net/minecraft/server/MinecraftServer	()V	h	func_6018_h	doTick
+METHOD	net/minecraft/server/MinecraftServer	(Ljava/lang/String;Lmb;)V	a	func_6010_a	addCommand
+METHOD	net/minecraft/server/MinecraftServer	()V	b	func_6021_b	commandLineParser
+METHOD	net/minecraft/server/MinecraftServer	(Ldg;)V	a	func_6022_a	func_6022_a
+METHOD	net/minecraft/server/MinecraftServer	([Ljava/lang/String;)V	main	main	main
+METHOD	net/minecraft/server/MinecraftServer	(Ljava/lang/String;)Ljava/io/File;	a	func_6009_a	getFile
+METHOD	net/minecraft/server/MinecraftServer	(Ljava/lang/String;)V	c	func_25002_c	logWarning
+METHOD	net/minecraft/server/MinecraftServer	(I)Ldp;	a	func_28004_a	getWorldManager
+METHOD	net/minecraft/server/MinecraftServer	(I)Lnl;	b	func_28003_b	getEntityTracker
+METHOD	net/minecraft/server/MinecraftServer	(Lnet/minecraft/server/MinecraftServer;)Z	a	func_6015_a	isServerRunning
+CLASS	pa	net/minecraft/server/BlockDispenser	net/minecraft/server/BlockDispenser
+FIELD	pa	Ljava/util/Random;	a	field_28032_a	a
+METHOD	pa	(Ldj;III)V	g	func_21035_g	g
+METHOD	pa	(Ldj;IIILjava/util/Random;)V	b	func_21036_b	dispense
+CLASS	pb	net/minecraft/server/IBlockAccess	net/minecraft/server/IBlockAccess
+METHOD	pb	(III)I	a	func_444_a	getTypeId
+METHOD	pb	(III)Ljh;	b	func_451_k	getTileEntity
+METHOD	pb	(III)I	c	func_446_b	getData
+METHOD	pb	(III)Lhj;	d	func_443_c	getMaterial
+METHOD	pb	(III)Z	e	func_445_d	e
+CLASS	pc	net/minecraft/server/WorldGenLiquids	net/minecraft/server/WorldGenLiquids
+FIELD	pc	I	a	field_4249_a	a
+CLASS	pd	net/minecraft/server/BlockLever	net/minecraft/server/BlockLever
+METHOD	pd	(Ldj;III)Z	g	func_274_g	g
+CLASS	pe	net/minecraft/server/WorldGenFire	net/minecraft/server/WorldGenFire
+CLASS	pf	net/minecraft/server/EntitySquid	net/minecraft/server/EntitySquid
+FIELD	pf	F	a	field_21063_a	a
+FIELD	pf	F	b	field_21062_b	b
+FIELD	pf	F	c	field_21061_c	c
+FIELD	pf	F	f	field_21059_f	f
+FIELD	pf	F	g	field_21060_ak	g
+FIELD	pf	F	h	field_21058_al	h
+FIELD	pf	F	i	field_21057_am	i
+FIELD	pf	F	j	field_21056_an	j
+FIELD	pf	F	k	field_21055_ao	k
+FIELD	pf	F	l	field_21054_ap	l
+FIELD	pf	F	m	field_21053_aq	m
+FIELD	pf	F	n	field_21052_ar	n
+FIELD	pf	F	o	field_21051_as	o
+FIELD	pf	F	p	field_21050_at	p
+CLASS	pg	net/minecraft/server/RedstoneUpdateInfo	net/minecraft/server/RedstoneUpdateInfo
+FIELD	pg	I	a	field_775_a	x
+FIELD	pg	I	b	field_774_b	y
+FIELD	pg	I	c	field_777_c	z
+FIELD	pg	J	d	field_776_d	updateTime
+CLASS	ph	net/minecraft/server/WorldChunkManager	net/minecraft/server/WorldChunkManager
+FIELD	ph	Lmq;	e	field_4255_e	e
+FIELD	ph	Lmq;	f	field_4254_f	f
+FIELD	ph	Lmq;	g	field_4253_g	g
+FIELD	ph	[D	a	field_4259_a	temperature
+FIELD	ph	[D	b	field_4258_b	rain
+FIELD	ph	[D	c	field_4257_c	c
+FIELD	ph	[Lgs;	d	field_4256_d	d
+METHOD	ph	(Lqa;)Lgs;	a	func_4066_a	a
+METHOD	ph	(II)Lgs;	a	func_4067_a	getBiome
+METHOD	ph	(IIII)[Lgs;	a	func_4065_a	getBiomeData
+METHOD	ph	([DIIII)[D	a	func_4068_a	a
+METHOD	ph	([Lgs;IIII)[Lgs;	a	func_4064_a	a
+CLASS	pi	net/minecraft/server/EntityPigZombie	net/minecraft/server/EntityPigZombie
+FIELD	pi	I	a	field_4106_a	angerLevel
+FIELD	pi	I	b	field_4105_b	soundDelay
+FIELD	pi	Lfy;	f	field_4107_c	f
+METHOD	pi	(Llq;)V	d	func_4047_h	d
+CLASS	pj	net/minecraft/server/IProgressUpdate	net/minecraft/server/IProgressUpdate
+METHOD	pj	(Ljava/lang/String;)V	a	func_438_a	a
+METHOD	pj	(Ljava/lang/String;)V	b	func_439_b	b
+METHOD	pj	(I)V	a	func_437_a	a
+CLASS	pk	net/minecraft/server/ChunkProviderGenerate	net/minecraft/server/ChunkProviderGenerate
+FIELD	pk	Ljava/util/Random;	j	field_706_j	j
+FIELD	pk	Lmp;	k	field_705_k	k
+FIELD	pk	Lmp;	l	field_704_l	l
+FIELD	pk	Lmp;	m	field_703_m	m
+FIELD	pk	Lmp;	n	field_702_n	n
+FIELD	pk	Lmp;	o	field_701_o	o
+FIELD	pk	Lmp;	a	field_715_a	a
+FIELD	pk	Lmp;	b	field_714_b	b
+FIELD	pk	Lmp;	c	field_713_c	c
+FIELD	pk	Ldj;	p	field_700_p	p
+FIELD	pk	[D	q	field_4224_q	q
+FIELD	pk	[D	r	field_698_r	r
+FIELD	pk	[D	s	field_697_s	s
+FIELD	pk	[D	t	field_696_t	t
+FIELD	pk	Ldy;	u	field_695_u	u
+FIELD	pk	[Lgs;	v	field_4223_v	v
+FIELD	pk	[D	d	field_4229_d	field_4229_d
+FIELD	pk	[D	e	field_4228_e	field_4228_e
+FIELD	pk	[D	f	field_4227_f	field_4227_f
+FIELD	pk	[D	g	field_4226_g	field_4226_g
+FIELD	pk	[D	h	field_4225_h	field_4225_h
+FIELD	pk	[[I	i	field_707_i	field_707_i
+FIELD	pk	[D	w	field_4222_w	w
+METHOD	pk	(II[B[Lgs;[D)V	a	func_4057_a	a
+METHOD	pk	(II[B[Lgs;)V	a	func_4056_a	a
+METHOD	pk	([DIIIIII)[D	a	func_4058_a	a
+CLASS	pl	net/minecraft/server/ItemFlintAndSteel	net/minecraft/server/ItemFlintAndSteel
+CLASS	pm	net/minecraft/server/CounterStatistic	net/minecraft/server/CounterStatistic
+CLASS	pn	net/minecraft/server/WorldGenTrees	net/minecraft/server/WorldGenTrees
+CLASS	po	net/minecraft/server/BlockBloodStone	net/minecraft/server/BlockBloodStone
+CLASS	pp	net/minecraft/server/BiomeRainforest	net/minecraft/server/BiomeRainforest
+CLASS	pq	net/minecraft/server/TileEntitySign	net/minecraft/server/TileEntitySign
+FIELD	pq	[Ljava/lang/String;	a	field_485_e	lines
+FIELD	pq	I	b	field_484_f	b
+FIELD	pq	Z	c	field_25053_c	isEditable
+METHOD	pq	()Z	a	func_25052_a	a
+METHOD	pq	(Z)V	a	func_32001_a	a
+CLASS	pr	net/minecraft/server/EntityMinecart	net/minecraft/server/EntityMinecart
+FIELD	pr	[Lfy;	h	field_470_ai	items
+FIELD	pr	I	a	field_9168_a	damage
+FIELD	pr	I	b	field_9167_b	b
+FIELD	pr	I	c	field_477_ad	c
+FIELD	pr	Z	i	field_469_aj	i
+FIELD	pr	I	d	field_476_ae	type
+FIELD	pr	I	e	field_9165_e	e
+FIELD	pr	D	f	field_9164_f	f
+FIELD	pr	D	g	field_9166_aj	g
+FIELD	pr	[[[I	j	field_468_ak	matrix
+FIELD	pr	I	k	field_9163_an	k
+FIELD	pr	D	l	field_9162_ao	l
+FIELD	pr	D	m	field_9161_ap	m
+FIELD	pr	D	n	field_9160_aq	n
+FIELD	pr	D	o	field_9159_ar	o
+FIELD	pr	D	p	field_9158_as	p
+METHOD	pr	(DDD)Lba;	h	func_182_g	h
+CLASS	ps	net/minecraft/server/ItemPainting	net/minecraft/server/ItemPainting
+CLASS	pt	net/minecraft/server/BlockFire	net/minecraft/server/BlockFire
+FIELD	pt	[I	a	field_646_a	a
+FIELD	pt	[I	b	field_645_b	b
+METHOD	pt	(III)V	a	func_267_a	a
+METHOD	pt	(Ldj;IIIILjava/util/Random;I)V	a	func_266_a	a
+METHOD	pt	(Ldj;III)Z	g	func_268_g	g
+METHOD	pt	(Ldj;III)I	h	func_270_h	h
+METHOD	pt	(Lpb;III)Z	b	func_269_b	b
+METHOD	pt	(Ldj;IIII)I	f	func_265_f	f
+CLASS	pu	net/minecraft/server/ItemInWorldManager	net/minecraft/server/ItemInWorldManager
+FIELD	pu	Ldp;	b	field_674_b	world
+FIELD	pu	Lem;	a	field_675_a	player
+FIELD	pu	F	c	field_672_d	c
+FIELD	pu	I	d	field_22055_d	lastDigTick
+FIELD	pu	I	e	field_22054_g	field_22054_g
+FIELD	pu	I	f	field_22053_h	field_22053_h
+FIELD	pu	I	g	field_22052_i	field_22052_i
+FIELD	pu	I	h	field_22051_j	currentTick
+FIELD	pu	Z	i	field_22050_k	i
+FIELD	pu	I	j	field_22049_l	j
+FIELD	pu	I	k	field_22048_m	k
+FIELD	pu	I	l	field_22047_n	l
+FIELD	pu	I	m	field_22046_o	m
+METHOD	pu	()V	a	func_328_a	a
+METHOD	pu	(IIII)V	a	func_324_a	func_324_a
+METHOD	pu	(III)V	a	func_22045_b	func_22045_b
+METHOD	pu	(III)Z	b	func_323_b	b
+METHOD	pu	(III)Z	c	func_325_c	func_325_c
+METHOD	pu	(Lem;Ldj;Lfy;)Z	a	func_6154_a	func_6154_a
+METHOD	pu	(Lem;Ldj;Lfy;IIII)Z	a	func_327_a	interact
+CLASS	pv	net/minecraft/server/Packet255KickDisconnect	net/minecraft/server/Packet255KickDisconnect
+FIELD	pv	Ljava/lang/String;	a	field_41_a	a
+CLASS	pw	net/minecraft/server/BlockStep	net/minecraft/server/BlockStep
+FIELD	pw	[Ljava/lang/String;	a	field_22027_a	a
+FIELD	pw	Z	b	field_20910_a	b
+CLASS	px	net/minecraft/server/ItemFood	net/minecraft/server/ItemFood
+FIELD	px	I	a	field_20901_a	a
+FIELD	px	Z	bk	field_25011_bi	bk
+METHOD	px	()I	k	func_25009_j	k
+METHOD	px	()Z	l	func_25010_k	l
+CLASS	py	net/minecraft/server/SlotResult	net/minecraft/server/SlotResult
+FIELD	py	Lhp;	d	field_20103_a	d
+FIELD	py	Lem;	e	field_25004_e	e
+CLASS	pz	net/minecraft/server/EntityWeather	net/minecraft/server/EntityWeather
+CLASS	qa	net/minecraft/server/ChunkCoordIntPair	net/minecraft/server/ChunkCoordIntPair
+FIELD	qa	I	a	field_152_a	x
+FIELD	qa	I	b	field_151_b	z
+METHOD	qa	(II)I	a	func_22006_a	a
-- 
2.24.1.windows.2

